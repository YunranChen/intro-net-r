[
["index.html", "Introduction to Network Analysis Using R Chapter 1 Introduction 1.1 Outline 1.2 Detailed Outline", " Introduction to Network Analysis Using R Yunran Chen 2019-04-29 Chapter 1 Introduction Here I provide a tutorial on basic network analysis using R. This tutorial is suitable for people who are familiar with R. The documents are based on the lab materials of STAT650 Social Network at Duke University. The webpage is built using bookdown 1.1 Outline Basic introduction on network objects. R packages including igraph, statnet(including sna, network). Collect network data. Web API requesting (Twitter, Reddit, IMDB, or more). Useful websites (SNAP, or more) Visualization (static and dynamic networks). Network analysis using package amen. 1.2 Detailed Outline igraph package Create networks and basics concepts Create simple networks, specific graphs, graph models Adjustments on graphs, rewiring graphs Edge, vertex and network attributes Built networks from external sources, basic visualization and network descriptions Get network from files (edgelist, matrix, dataframe) Visualization Plotting parameters Layouts Network and node descriptions Paths, communitites and related visualization Paths Paths, distances and diameter Components Transitivity and reciprocity Max-flow and min-cut Communities Pre-defined clusters Different algorithms Visualization Color the paths Plotting clusters Plotting dendrograms Mark groups References: Tutorial: http://kateto.net/networks-r-igraph Handbook: http://igraph.org/r/ Book: https://sites.fas.harvard.edu/~airoldi/pub/books/BookDraft-CsardiNepuszAiroldi2016.pdf Datasets: https://github.com/mathbeveridge/asoiaf https://networkofthrones.wordpress.com/data/ https://www.macalester.edu/~abeverid/thrones.html ERGM (statnet) summary network statistics ergm model fitting and interpretation: simulate network simulations based on specified model. gof, mcmc.diagnostics: Goodness of fit and MCMC diagnostics References: Tutorial: https://statnet.org/trac/raw-attachment/wiki/Sunbelt2016/ergm_tutorial.html Handbook: http://statnet.org/ Collect network data and API requests Several useful websites: Awesome website for papers, reviews, datasets and softwares: https://github.com/briatte/awesome-network-analysis Katherine’s webpage: http://kateto.net/2016/05/network-datasets/ Data analysis competition: https://www.kaggle.com/datasets https://data.world/search?q=network+dataset twitter API request: rtweet Official website: https://rtweet.info/index.html API authorization; create_token search_tweets stream_tweets Other functions Examples: retweet networks, friendship networks Other available R packages for API request: rtweet,Rfacebook,RedditExtractoR,imdbapi,omdbapi Direct API request from R. rjson, jsonlite References: https://rtweet.info/index.html Advanced Visualization Visualization for static network: Graph: hairball plot Matrix: heatmap in R basic package; geom_tile in pkg ggplot2 Other static networks: Two-mode networks (node-specific attribute) Multiple networks (edge-specific attribute) … ( ggtree, ggalluvial, etc.) ggplot2 version for network visualization: Comparison between ggnet2,geomnet,ggnetwork Extension to interactive (plotly) , dynamic network (ggnetwork) Other interactive network visualizations: visNetwork (good documentation) networkD3 threejs ggigraph Visualization for dynamic networks Snapshots for the evolving networks: ggnetwork (common) Animation for the evolving networks: ggplot2 + gganimate ndtv pkg (good documentation) References: http://kateto.net/netscix2016 http://kateto.net/network-visualization http://curleylab.psych.columbia.edu/netviz/ https://journal.r-project.org/archive/2017/RJ-2017-023/RJ-2017-023.pdf amen packages Gaussian AME model: ame Different relation: ame(...,model=,...) ordinal data censored and fixed rank nomination data sampled or missing data symmetric relation: ame(...,symmetric=TRUE,...) repeated measures data: longitudal data ame_rep(Y,Xdyad,Xrow,Xcol) References: https://github.com/pdhoff/amen/blob/master/inst/doc/amen.pdf "],
["igraph.html", "Chapter 2 igraph package 2.1 Introduction 2.2 Create networks and basics concepts 2.3 Built networks from external sources, basic visualization and more on network descriptions 2.4 Paths, communitites and related visualization 2.5 More about igraph", " Chapter 2 igraph package 2.1 Introduction 2.1.1 igraph vs statnet Figure 2.1: igraph versus statnet from Shizuka Lab 2.1.2 References Official website (handbook): http://igraph.org/r/ Tutorial: http://kateto.net/networks-r-igraph Book: https://sites.fas.harvard.edu/~airoldi/pub/books/BookDraft-CsardiNepuszAiroldi2016.pdf Datasets: https://github.com/mathbeveridge/asoiaf https://networkofthrones.wordpress.com/data/ https://www.macalester.edu/~abeverid/thrones.html 2.1.3 Preparation #install.packages(&quot;igraph&quot;) #install.packages(&quot;igraphdata&quot;) library(igraph) library(igraphdata) 2.2 Create networks and basics concepts 2.2.1 Outline Basic introduction on network analysis using R. R package igraph create networks (predifined structures; specific graphs; graph models; adjustments) Edge, vertex and network attributes Network and node descriptions R package statnet (ERGM,…) Collecting network data Web API requesting (Twitter, Reddit, IMDB, or more) Useful websites (SNAP, or more) Visualization static networks and dynamic networks Network analysis 2.2.2 Create simple networks graph(edges,n,directed,isolates) graph_from_literal 2.2.2.1 graph(edges,n,directed,isolates) an undirected graph with 3 edges: g1 &lt;- graph( edges=c(1,2, 2,3, 3,1), n=3, directed=F ) plot(g1) n can be greater than number of vertices in the edge list g2 &lt;- graph( edges=c(1,2, 2,3, 3,1), n=10 ) # now with 10 vertices, and directed by default plot(g2) named vertices g3 &lt;- graph( c(&quot;John&quot;, &quot;Jim&quot;, &quot;Jim&quot;, &quot;Jill&quot;, &quot;Jill&quot;, &quot;John&quot;)) # When the edge list has vertex names, the number of nodes is not needed plot(g3) named vertices without edges g4 &lt;- graph( c(&quot;John&quot;, &quot;Jim&quot;, &quot;Jim&quot;, &quot;Jack&quot;, &quot;Jim&quot;, &quot;Jack&quot;, &quot;John&quot;, &quot;John&quot;), isolates=c(&quot;Jesse&quot;, &quot;Janis&quot;, &quot;Jennifer&quot;, &quot;Justin&quot;) ) # In named graphs we can specify isolates by providing a list of their names. set.seed(1) plot(g4, edge.arrow.size=.5, vertex.color=&quot;gold&quot;, vertex.size=15, vertex.frame.color=&quot;gray&quot;, vertex.label.color=&quot;black&quot;, vertex.label.cex=1.5, vertex.label.dist=2, edge.curved=0.2) 2.2.2.2 graph_from_literal Small graphs can also be generated with a description of this kind: ‘-’ for undirected tie, “+-’ or”-+&quot; for directed ties pointing left &amp; right, “++” for a symmetric tie, and “:” for sets of vertices plot(graph_from_literal(a---b, b---c)) # the number of dashes doesn&#39;t matter plot(graph_from_literal(a--+b, b+--c)) plot(graph_from_literal(a+-+b, b+-+c)) a:b:c using colon to connect abc as a whole group. Each vertex within group a:b:c is connected to each vertex within group c:d:e plot(graph_from_literal(a:b:c---c:d:e)) plot(graph_from_literal(a--b:c:d)) plot(graph_from_literal(a:e--b:c:d)) 2.2.3 Creating specific graphs and graph models Specific graph make_empty_graph make_full_graph make_tree make_star make_ring Graph models sample_gnm Erdos-Renyi random graph sample_gnp Erdos-Renyi with G(n,p) specification sample_smallworld Watts-Strogatz small-world model sample_pa Barabasi-Albert preferential attachment model for scale-free graphs 2.2.3.1 Empty graph eg &lt;- make_empty_graph(40) plot(eg, vertex.size=10, vertex.label=NA) 2.2.3.2 Full graph fg &lt;- make_full_graph(40) plot(fg, vertex.size=10, vertex.label=NA) 2.2.3.3 Tree graph tr &lt;- make_tree(40, children = 3, mode = &quot;undirected&quot;) plot(tr, vertex.size=10, vertex.label=NA) 2.2.3.4 Star graph st &lt;- make_star(40) plot(st, vertex.size=10, vertex.label=NA) 2.2.3.5 Ring graph rn &lt;- make_ring(40) plot(rn, vertex.size=10, vertex.label=NA) 2.2.3.6 Erdos-Renyi random graph ‘n’ is number of nodes, ‘m’ is the number of edges er &lt;- sample_gnm(n=100, m=40) ####can also use erdos.renyi.game ## options include directed= and loops= plot(er, vertex.size=6, vertex.label=NA) 2.2.3.7 Erdos-Renyi with G(n,p) specification er &lt;- sample_gnp(n=100, p=.02) ####can also use erdos.renyi.game plot(er, vertex.size=6, vertex.label=NA) 2.2.4 Adjustments on graphs igraph object as a layer (using +) igraph object as a matrix (using []) rewiring a graph using rewire, connect.neighborhood combine graphs %du% other functions 2.2.4.1 igraph object as a layer kite &lt;- make_empty_graph(directed = FALSE) + vertices(LETTERS[1:10]) + edges(&#39;A&#39;,&#39;B&#39;, &#39;B&#39;,&#39;D&#39;, &#39;C&#39;,&#39;D&#39;, &#39;D&#39;,&#39;E&#39;, &#39;E&#39;,&#39;G&#39;, &#39;F&#39;,&#39;G&#39;, &#39;G&#39;,&#39;H&#39;, &#39;H&#39;,&#39;I&#39;, &#39;I&#39;,&#39;J&#39;) plot(kite) 2.2.4.2 igraph object as a matrix kite[] ## 10 x 10 sparse Matrix of class &quot;dgCMatrix&quot; ## [[ suppressing 10 column names &#39;A&#39;, &#39;B&#39;, &#39;C&#39; ... ]] ## ## A . 1 . . . . . . . . ## B 1 . . 1 . . . . . . ## C . . . 1 . . . . . . ## D . 1 1 . 1 . . . . . ## E . . . 1 . . 1 . . . ## F . . . . . . 1 . . . ## G . . . . 1 1 . 1 . . ## H . . . . . . 1 . 1 . ## I . . . . . . . 1 . 1 ## J . . . . . . . . 1 . add edge kite[&#39;A&#39;,&#39;F&#39;]=1 kite[] ## 10 x 10 sparse Matrix of class &quot;dgCMatrix&quot; ## [[ suppressing 10 column names &#39;A&#39;, &#39;B&#39;, &#39;C&#39; ... ]] ## ## A . 1 . . . 1 . . . . ## B 1 . . 1 . . . . . . ## C . . . 1 . . . . . . ## D . 1 1 . 1 . . . . . ## E . . . 1 . . 1 . . . ## F 1 . . . . . 1 . . . ## G . . . . 1 1 . 1 . . ## H . . . . . . 1 . 1 . ## I . . . . . . . 1 . 1 ## J . . . . . . . . 1 . add multiple edges kite[-1,1] ## B C D E F G H I J ## 1 0 0 0 1 0 0 0 0 kite[-1,1]=1 kite[] # add multiple edges or using from and to ## 10 x 10 sparse Matrix of class &quot;dgCMatrix&quot; ## [[ suppressing 10 column names &#39;A&#39;, &#39;B&#39;, &#39;C&#39; ... ]] ## ## A . 1 1 1 1 1 1 1 1 1 ## B 1 . . 1 . . . . . . ## C 1 . . 1 . . . . . . ## D 1 1 1 . 1 . . . . . ## E 1 . . 1 . . 1 . . . ## F 1 . . . . . 1 . . . ## G 1 . . . 1 1 . 1 . . ## H 1 . . . . . 1 . 1 . ## I 1 . . . . . . 1 . 1 ## J 1 . . . . . . . 1 . add multiple edges using from and to kite[from=LETTERS[1:3],to=LETTERS[4:6]]=1 kite[] ## 10 x 10 sparse Matrix of class &quot;dgCMatrix&quot; ## [[ suppressing 10 column names &#39;A&#39;, &#39;B&#39;, &#39;C&#39; ... ]] ## ## A . 1 1 1 1 1 1 1 1 1 ## B 1 . . 1 1 . . . . . ## C 1 . . 1 . 1 . . . . ## D 1 1 1 . 1 . . . . . ## E 1 1 . 1 . . 1 . . . ## F 1 . 1 . . . 1 . . . ## G 1 . . . 1 1 . 1 . . ## H 1 . . . . . 1 . 1 . ## I 1 . . . . . . 1 . 1 ## J 1 . . . . . . . 1 . remove edge kite[-1,2]=0 2.2.4.3 rewiring a graph set.seed(1) plot(rn, vertex.size=10, vertex.label=NA) ‘each_edge()’ is a rewiring method that changes the edge endpoints to a new vertex with a probability ‘prob’. And the new vertex is random variable distributed uniformly. rn.rewired &lt;- rewire(rn, each_edge(prob=0.1)) plot(rn.rewired, vertex.size=10, vertex.label=NA) Rewire to connect vertices to other vertices at a certain distance. rn.neigh = connect.neighborhood(rn, 5) plot(rn.neigh, vertex.size=8, vertex.label=NA) g &lt;- make_ring(10) plot(g) g &lt;- connect(g, 2) plot(g) combine graphs plot(rn %du% tr, vertex.size=10, vertex.label=NA) 2.2.5 Edge, vertex and network attributes Consider edge, vertex as sequences [] Consider the network as matrix [] Neighbors [[]] Attributes $ 2.2.5.1 consider edge, vertex as sequences plot(g4) E(g4) #edge list ## + 4/4 edges from 562dd0e (vertex names): ## [1] John-&gt;Jim Jim -&gt;Jack Jim -&gt;Jack John-&gt;John V(g4) #vertex list ## + 7/7 vertices, named, from 562dd0e: ## [1] John Jim Jack Jesse Janis Jennifer Justin ecount(g4) # count ## [1] 4 vcount(g4) # count ## [1] 7 refer vertex and edges V(g4)[c(&quot;John&quot;,&quot;Jim&quot;)] ## + 2/7 vertices, named, from 562dd0e: ## [1] John Jim V(g4)[nei(&quot;Jim&quot;)] # neighbors of Jim ## + 2/7 vertices, named, from 562dd0e: ## [1] John Jack E(g4)[c(&quot;John|Jim&quot;,&quot;Jim|Jack&quot;)] ## + 2/4 edges from 562dd0e (vertex names): ## [1] John-&gt;Jim Jim -&gt;Jack E(g4,path = c(&quot;John&quot;,&quot;Jim&quot;,&quot;Jack&quot;)) ## + 2/4 edges from 562dd0e (vertex names): ## [1] John-&gt;Jim Jim -&gt;Jack E(g4)[ &quot;John&quot; %--% &quot;Jack&quot; ] ## + 0/4 edges from 562dd0e (vertex names): E(g4)[ &quot;Jim&quot; %-&gt;% &quot;Jack&quot; ] ## + 2/4 edges from 562dd0e (vertex names): ## [1] Jim-&gt;Jack Jim-&gt;Jack E(g4)[ from(&quot;Jim&quot;) ] ## + 2/4 edges from 562dd0e (vertex names): ## [1] Jim-&gt;Jack Jim-&gt;Jack E(g4)[ to(&quot;Jim&quot;) ] ## + 1/4 edge from 562dd0e (vertex names): ## [1] John-&gt;Jim 2.2.5.2 consider the network as matrix class(g4) ## [1] &quot;igraph&quot; g4[] #&quot;adjacency matrix&quot; ## 7 x 7 sparse Matrix of class &quot;dgCMatrix&quot; ## John Jim Jack Jesse Janis Jennifer Justin ## John 1 1 . . . . . ## Jim . . 2 . . . . ## Jack . . . . . . . ## Jesse . . . . . . . ## Janis . . . . . . . ## Jennifer . . . . . . . ## Justin . . . . . . . g4[1,] # consider as a matrix to select ## John Jim Jack Jesse Janis Jennifer Justin ## 1 1 0 0 0 0 0 get.adjacency(g4) ## 7 x 7 sparse Matrix of class &quot;dgCMatrix&quot; ## John Jim Jack Jesse Janis Jennifer Justin ## John 1 1 . . . . . ## Jim . . 2 . . . . ## Jack . . . . . . . ## Jesse . . . . . . . ## Janis . . . . . . . ## Jennifer . . . . . . . ## Justin . . . . . . . ##explicitly getting adjacency matrix (as a sparse matrix) get.adjacency(g4,sparse=FALSE) ## John Jim Jack Jesse Janis Jennifer Justin ## John 1 1 0 0 0 0 0 ## Jim 0 0 2 0 0 0 0 ## Jack 0 0 0 0 0 0 0 ## Jesse 0 0 0 0 0 0 0 ## Janis 0 0 0 0 0 0 0 ## Jennifer 0 0 0 0 0 0 0 ## Justin 0 0 0 0 0 0 0 ##explicitly getting adjacency matrix --- not sparse, lets you manipulate it better g4[1:2,2:3] ## 2 x 2 sparse Matrix of class &quot;dgCMatrix&quot; ## Jim Jack ## John 1 . ## Jim . 2 g4[from=c(&quot;Jack&quot;,&quot;Jim&quot;,&quot;John&quot;),to=c(&quot;Jim&quot;,&quot;Jack&quot;,&quot;John&quot;)] ## [1] 0 1 1 2.2.5.3 neighbors neighbors(g4,&quot;Jim&quot;) ## + 2/7 vertices, named, from 562dd0e: ## [1] Jack Jack g4[[&quot;Jim&quot;]] ## $Jim ## + 2/7 vertices, named, from 562dd0e: ## [1] Jack Jack g4[[c(&quot;Jim&quot;,&quot;John&quot;)]] #works for multiple vertices ## $Jim ## + 2/7 vertices, named, from 562dd0e: ## [1] Jack Jack ## ## $John ## + 2/7 vertices, named, from 562dd0e: ## [1] John Jim g4[[&quot;Jim&quot;,]] ## $Jim ## + 2/7 vertices, named, from 562dd0e: ## [1] Jack Jack g4[[,&quot;Jim&quot;]] ## $Jim ## + 1/7 vertex, named, from 562dd0e: ## [1] John g4[[,&quot;Jim&quot;,edges=TRUE]] ## $Jim ## + 1/4 edge from 562dd0e (vertex names): ## [1] John-&gt;Jim 2.2.5.4 Attributes: vertex attributes, edge attributes, graph attributes use $ to create attributes and get attributes V(g4)$name # automatically generated when we created the network. ## [1] &quot;John&quot; &quot;Jim&quot; &quot;Jack&quot; &quot;Jesse&quot; &quot;Janis&quot; &quot;Jennifer&quot; ## [7] &quot;Justin&quot; V(g4)$gender &lt;- c(&quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;female&quot;, &quot;female&quot;, &quot;male&quot;) neighbors(g4,&quot;Jim&quot;,mode = &quot;all&quot;)$gender ## [1] &quot;male&quot; &quot;male&quot; &quot;male&quot; E(g4)$type &lt;- &quot;email&quot; # Edge attribute, assign &quot;email&quot; to all edges E(g4)$weight &lt;- 10 # Edge weight, setting all existing edges to 10 g4 &lt;- set_graph_attr(g4, &quot;name&quot;, &quot;Email Network&quot;) see the attributes edge_attr(g4) ## $type ## [1] &quot;email&quot; &quot;email&quot; &quot;email&quot; &quot;email&quot; ## ## $weight ## [1] 10 10 10 10 vertex_attr(g4) ## $name ## [1] &quot;John&quot; &quot;Jim&quot; &quot;Jack&quot; &quot;Jesse&quot; &quot;Janis&quot; &quot;Jennifer&quot; ## [7] &quot;Justin&quot; ## ## $gender ## [1] &quot;male&quot; &quot;male&quot; &quot;male&quot; &quot;male&quot; &quot;female&quot; &quot;female&quot; &quot;male&quot; graph_attr(g4) ## $name ## [1] &quot;Email Network&quot; graph_attr_names(g4) ## [1] &quot;name&quot; graph_attr(g4, &quot;name&quot;) ## [1] &quot;Email Network&quot; can remove the attribute g4 &lt;- set_graph_attr(g4, &quot;something&quot;, &quot;A thing&quot;) g4 &lt;- delete_graph_attr(g4, &quot;something&quot;) graph_attr(g4) ## $name ## [1] &quot;Email Network&quot; Make use of these attributes plot(g4, edge.arrow.size=.5, vertex.label.color=&quot;black&quot;, vertex.label.dist=1.5, vertex.color=as.factor(V(g4)$gender) ) plot(g4, edge.arrow.size=.5, vertex.label.color=&quot;black&quot;, vertex.label.dist=1.5, vertex.color=c( &quot;pink&quot;, &quot;skyblue&quot;)[1+(V(g4)$gender==&quot;male&quot;)] ) #consider as a sequence attributes can be combined plot(g4) g4s &lt;- igraph::simplify( g4, remove.multiple = T, remove.loops = F, edge.attr.comb=c(weight=&quot;sum&quot;, type=&quot;ignore&quot;) ) #specifies what to do with edge attributes, if remove.multiple=TRUE. In this case many edges might be mapped to a single one in the new graph, and their attributes are combined. E(g4)$type ## [1] &quot;email&quot; &quot;email&quot; &quot;email&quot; &quot;email&quot; E(g4s)$type ## NULL E(g4)$weight ## [1] 10 10 10 10 E(g4s)$weight ## [1] 10 10 20 2.2.5.5 special attributes make sure to avoid using these attribute names: color(e/v), layout(g), name(v),shape(v),type(v),weight(e) 2.2.6 Description of igraph object g4s ## IGRAPH 6cadc8c DNW- 7 3 -- Email Network ## + attr: name (g/c), name (v/c), gender (v/c), weight (e/n) ## + edges from 6cadc8c (vertex names): ## [1] John-&gt;John John-&gt;Jim Jim -&gt;Jack D or U, for a directed or undirected graph N for a named graph (where nodes have a name attribute) W for a weighted graph (where edges have a weight attribute) B for a bipartite (two-mode) graph (where nodes have a type attribute) (7 5) refer to the number of nodes and edges node &amp; edge attributes, for example: g:graph; v: vertex; e: edge;n:numeric; c:character;l:logical; x:complex data(karate) karate ## IGRAPH 4b458a1 UNW- 34 78 -- Zachary&#39;s karate club network ## + attr: name (g/c), Citation (g/c), Author (g/c), Faction (v/n), ## | name (v/c), label (v/c), color (v/n), weight (e/n) ## + edges from 4b458a1 (vertex names): ## [1] Mr Hi --Actor 2 Mr Hi --Actor 3 Mr Hi --Actor 4 ## [4] Mr Hi --Actor 5 Mr Hi --Actor 6 Mr Hi --Actor 7 ## [7] Mr Hi --Actor 8 Mr Hi --Actor 9 Mr Hi --Actor 11 ## [10] Mr Hi --Actor 12 Mr Hi --Actor 13 Mr Hi --Actor 14 ## [13] Mr Hi --Actor 18 Mr Hi --Actor 20 Mr Hi --Actor 22 ## [16] Mr Hi --Actor 32 Actor 2--Actor 3 Actor 2--Actor 4 ## [19] Actor 2--Actor 8 Actor 2--Actor 14 Actor 2--Actor 18 ## + ... omitted several edges data(macaque) macaque ## IGRAPH f7130f3 DN-- 45 463 -- ## + attr: Citation (g/c), Author (g/c), shape (v/c), name (v/c) ## + edges from f7130f3 (vertex names): ## [1] V1 -&gt;V2 V1 -&gt;V3 V1 -&gt;V3A V1 -&gt;V4 V1 -&gt;V4t ## [6] V1 -&gt;MT V1 -&gt;PO V1 -&gt;PIP V2 -&gt;V1 V2 -&gt;V3 ## [11] V2 -&gt;V3A V2 -&gt;V4 V2 -&gt;V4t V2 -&gt;VOT V2 -&gt;VP ## [16] V2 -&gt;MT V2 -&gt;MSTd/p V2 -&gt;MSTl V2 -&gt;PO V2 -&gt;PIP ## [21] V2 -&gt;VIP V2 -&gt;FST V2 -&gt;FEF V3 -&gt;V1 V3 -&gt;V2 ## [26] V3 -&gt;V3A V3 -&gt;V4 V3 -&gt;V4t V3 -&gt;MT V3 -&gt;MSTd/p ## [31] V3 -&gt;PO V3 -&gt;LIP V3 -&gt;PIP V3 -&gt;VIP V3 -&gt;FST ## [36] V3 -&gt;TF V3 -&gt;FEF V3A-&gt;V1 V3A-&gt;V2 V3A-&gt;V3 ## + ... omitted several edges 2.3 Built networks from external sources, basic visualization and more on network descriptions 2.3.1 Outline Get network from files (edgelist, matrix, dataframe) Visualization Plotting parameters Layouts Network and node descriptions 2.3.2 Dataset Datasets: Download the data from my github. The full dataset comes from https://github.com/mathbeveridge/asoiaf Analysis on the datasets: https://www.macalester.edu/~abeverid/thrones.html Figure 2.2: Network Visualization from abeverid 2.3.3 Get network from files 2.3.3.1 Creating network Figure 2.3: Introduction from igraph manual Figure 2.4: Introduction from igraph manual Figure 2.5: Introduction from igraph manual Figure 2.6: Introduction from igraph manual Figure 2.7: Introduction from igraph manual 2.3.3.2 Get network from files graph_from_adjacency_matrix() graph_from_edgelist() graph_from_data_frame() 2.3.3.3 graph_from_adjacency_matrix() Used for creating a small matrix. The networks in real world are usually large sparse matrix and stored as a edgelist. Binary matrix: set.seed(2) #sample from Bernoulli distribution with sample size 100. adjm &lt;- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.9,0.1)), nc=10) adjm ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 0 0 0 0 1 0 0 0 0 1 ## [2,] 0 0 0 0 0 0 0 0 0 0 ## [3,] 0 0 0 0 0 0 0 0 0 0 ## [4,] 0 0 0 0 0 1 0 0 0 0 ## [5,] 1 0 0 0 1 0 0 0 0 0 ## [6,] 1 0 0 0 0 0 0 0 0 0 ## [7,] 0 1 0 0 1 0 0 0 1 0 ## [8,] 0 0 0 0 0 1 0 0 0 0 ## [9,] 0 0 1 0 0 0 0 0 0 0 ## [10,] 0 0 0 0 0 0 0 0 0 0 g1 &lt;- graph_from_adjacency_matrix( adjm ) set.seed(1) plot(g1) #default is directed g2 &lt;- graph_from_adjacency_matrix( adjm ,mode = &quot;undirected&quot;) set.seed(1) plot(g2) #get rid of the self-loop (in real-world maybe self-loop does not make any sense) g3 &lt;- graph_from_adjacency_matrix( adjm ,mode = &quot;undirected&quot;,diag = FALSE) set.seed(1) plot(g3) Sparse matrix: adjms=g1[] adjms ## 10 x 10 sparse Matrix of class &quot;dgCMatrix&quot; ## ## [1,] . . . . 1 . . . . 1 ## [2,] . . . . . . . . . . ## [3,] . . . . . . . . . . ## [4,] . . . . . 1 . . . . ## [5,] 1 . . . 1 . . . . . ## [6,] 1 . . . . . . . . . ## [7,] . 1 . . 1 . . . 1 . ## [8,] . . . . . 1 . . . . ## [9,] . . 1 . . . . . . . ## [10,] . . . . . . . . . . g4=graph_from_adjacency_matrix(adjms) set.seed(1) plot(g4) Weighted matrix set.seed(1) adjmw &lt;- matrix(sample(0:5, 100, replace=TRUE, prob=c(0.9,0.02,0.02,0.02,0.02,0.02)), nc=10) adjmw ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 0 0 3 0 0 0 2 0 0 0 ## [2,] 0 0 0 0 0 0 0 0 0 0 ## [3,] 0 0 0 0 0 0 0 0 0 0 ## [4,] 2 0 0 0 0 0 0 0 0 0 ## [5,] 0 0 0 0 0 0 0 0 0 0 ## [6,] 0 0 0 0 0 0 0 0 0 0 ## [7,] 4 0 0 0 0 0 0 0 0 0 ## [8,] 0 1 0 0 0 0 0 0 0 0 ## [9,] 0 0 0 0 0 0 0 0 0 0 ## [10,] 0 0 0 0 0 0 0 5 0 0 g5 &lt;- graph_from_adjacency_matrix(adjmw, weighted=TRUE) set.seed(1) plot(g5) g5 ## IGRAPH 6f0feb3 D-W- 10 6 -- ## + attr: weight (e/n) ## + edges from 6f0feb3: ## [1] 1-&gt;3 1-&gt;7 4-&gt;1 7-&gt;1 8-&gt;2 10-&gt;8 E(g5)$weight ## [1] 3 2 2 4 1 5 Named matrix rownames(adjmw)=LETTERS[1:10] colnames(adjmw)=LETTERS[1:10] g6 &lt;- graph_from_adjacency_matrix(adjmw, weighted=TRUE) set.seed(1) plot(g6) 2.3.3.4 graph_from_edgelist() Most network datasets are stored as edgelists. Input is two-column matrix with each row defining one edge. gotdf=read.csv(&quot;images/gotstark_lannister.csv&quot;,stringsAsFactors = FALSE) head(gotdf,5) ## X Source Target Type weight book source.family ## 1 1 Arya-Stark Benjen-Stark Undirected 3 1 Stark ## 2 2 Arya-Stark Bran-Stark Undirected 14 1 Stark ## 3 3 Arya-Stark Catelyn-Stark Undirected 5 1 Stark ## 4 4 Arya-Stark Cersei-Lannister Undirected 12 1 Stark ## 5 5 Arya-Stark Desmond Undirected 3 1 Stark ## target.family ## 1 Stark ## 2 Stark ## 3 Stark ## 4 Lannister ## 5 &lt;NA&gt; library(dplyr) library(tidyr) gotdf.el=gotdf%&gt;%select(Source,Target,weight)%&gt;% group_by(Source,Target)%&gt;% expand(edge=c(1:weight))%&gt;%select(-edge) head(gotdf.el) ## # A tibble: 6 x 2 ## # Groups: Source, Target [2] ## Source Target ## &lt;chr&gt; &lt;chr&gt; ## 1 Arya-Stark Benjen-Stark ## 2 Arya-Stark Benjen-Stark ## 3 Arya-Stark Benjen-Stark ## 4 Arya-Stark Bran-Stark ## 5 Arya-Stark Bran-Stark ## 6 Arya-Stark Bran-Stark ## input need to be a matrix got1=graph_from_edgelist(gotdf.el%&gt;%as.matrix(),directed = FALSE) got1 ## IGRAPH bdd718b UN-- 99 3374 -- ## + attr: name (v/c) ## + edges from bdd718b (vertex names): ## [1] Arya-Stark--Benjen-Stark Arya-Stark--Benjen-Stark ## [3] Arya-Stark--Benjen-Stark Arya-Stark--Bran-Stark ## [5] Arya-Stark--Bran-Stark Arya-Stark--Bran-Stark ## [7] Arya-Stark--Bran-Stark Arya-Stark--Bran-Stark ## [9] Arya-Stark--Bran-Stark Arya-Stark--Bran-Stark ## [11] Arya-Stark--Bran-Stark Arya-Stark--Bran-Stark ## [13] Arya-Stark--Bran-Stark Arya-Stark--Bran-Stark ## [15] Arya-Stark--Bran-Stark Arya-Stark--Bran-Stark ## + ... omitted several edges plot(got1,edge.arrow.size=.5, vertex.color=&quot;gold&quot;, vertex.size=3, vertex.frame.color=&quot;gray&quot;, vertex.label.color=&quot;black&quot;, vertex.label.cex=.5, vertex.label.dist=2, edge.curved=0.2) 2.3.3.4.1 Simplify the network el &lt;- matrix( c(&quot;foo&quot;, &quot;bar&quot;,&quot;foo&quot;,&quot;bar&quot;, &quot;bar&quot;, &quot;foobar&quot;), nc = 2, byrow = TRUE) graph_from_edgelist(el)%&gt;%plot() E(got1)$weight=rep(1,ecount(got1)) got1s &lt;- igraph::simplify( got1, remove.multiple = T, remove.loops = F, edge.attr.comb=c(weight=&quot;sum&quot;)) plot(got1s,edge.arrow.size=.5, vertex.color=&quot;gold&quot;, vertex.size=3, vertex.frame.color=&quot;gray&quot;, vertex.label.color=&quot;black&quot;, vertex.label.cex=.5, vertex.label.dist=2, edge.curved=0.5,layout=layout_with_lgl) 2.3.3.4.2 Short name library(stringr) nameshort=V(got1s)$name%&gt;% str_split(.,&quot;-&quot;,simplify = TRUE)%&gt;% .[,1] V(got1s)$name[1:3] ## [1] &quot;Arya-Stark&quot; &quot;Benjen-Stark&quot; &quot;Bran-Stark&quot; nameshort[1:3] ## [1] &quot;Arya&quot; &quot;Benjen&quot; &quot;Bran&quot; V(got1s)$name=nameshort plot(got1s,edge.arrow.size=.5, vertex.color=&quot;gold&quot;, vertex.size=3, vertex.frame.color=&quot;gray&quot;, vertex.label.color=&quot;black&quot;, vertex.label.cex=.5, vertex.label.dist=2, edge.curved=0.5,layout=layout_with_lgl) 2.3.3.5 graph_from_data_frame() Most common and useful. d: a data frame containing a symbolic edge list in the first two columns. Additional columns are considered as edge attributes. vertices: A data frame with vertex metadata head(gotdf,5) ## X Source Target Type weight book source.family ## 1 1 Arya-Stark Benjen-Stark Undirected 3 1 Stark ## 2 2 Arya-Stark Bran-Stark Undirected 14 1 Stark ## 3 3 Arya-Stark Catelyn-Stark Undirected 5 1 Stark ## 4 4 Arya-Stark Cersei-Lannister Undirected 12 1 Stark ## 5 5 Arya-Stark Desmond Undirected 3 1 Stark ## target.family ## 1 Stark ## 2 Stark ## 3 Stark ## 4 Lannister ## 5 &lt;NA&gt; gotdf=gotdf%&gt;%select(-X) got2=graph_from_data_frame(d=gotdf,directed = FALSE) got2 ## IGRAPH 21f2988 UNW- 99 238 -- ## + attr: name (v/c), Type (e/c), weight (e/n), book (e/n), ## | source.family (e/c), target.family (e/c) ## + edges from 21f2988 (vertex names): ## [1] Arya-Stark--Benjen-Stark Arya-Stark--Bran-Stark ## [3] Arya-Stark--Catelyn-Stark Arya-Stark--Cersei-Lannister ## [5] Arya-Stark--Desmond Arya-Stark--Eddard-Stark ## [7] Arya-Stark--Ilyn-Payne Arya-Stark--Jeyne-Poole ## [9] Arya-Stark--Joffrey-Baratheon Arya-Stark--Jon-Snow ## [11] Arya-Stark--Jory-Cassel Arya-Stark--Meryn-Trant ## [13] Arya-Stark--Mordane Arya-Stark--Mycah ## + ... omitted several edges plot(got2,edge.arrow.size=.5, vertex.color=&quot;gold&quot;, vertex.size=3, vertex.frame.color=&quot;gray&quot;, vertex.label.color=&quot;black&quot;, vertex.label.cex=.5, vertex.label.dist=2, edge.curved=0.5,layout=layout_with_lgl) 2.3.3.5.1 get dataframe, matrix or adgelist from igraph object igraph::as_data_frame(got2)%&gt;%head(2) ## from to Type weight book source.family ## 1 Arya-Stark Benjen-Stark Undirected 3 1 Stark ## 2 Arya-Stark Bran-Stark Undirected 14 1 Stark ## target.family ## 1 Stark ## 2 Stark as_adjacency_matrix(got2)%&gt;%head(2) ## [1] 0 1 as_edgelist(got2)%&gt;%head(2) ## [,1] [,2] ## [1,] &quot;Arya-Stark&quot; &quot;Benjen-Stark&quot; ## [2,] &quot;Arya-Stark&quot; &quot;Bran-Stark&quot; 2.3.3.5.2 read_graph, write_graph ## store in txt or csv or others write_graph(graph = got2,file = &quot;g.txt&quot;,format = &quot;edgelist&quot;) read_graph(file = &quot;g.txt&quot;,format = &quot;edgelist&quot;,directed=F) ## IGRAPH 99ad3df U--- 99 238 -- ## + edges from 99ad3df: ## [1] 1-- 2 1-- 3 1-- 5 1-- 6 1-- 7 1--12 1--13 1--14 1--17 1--18 1--19 ## [12] 1--20 1--21 1--22 1--23 1--24 1--25 1--26 1--27 1--28 1--29 1--30 ## [23] 1--31 1--32 1--33 1--34 1--35 2-- 3 2-- 6 2--13 2--15 2--21 2--28 ## [34] 2--35 2--36 2--37 2--38 2--39 2--40 2--41 3-- 5 3-- 6 3-- 7 3--12 ## [45] 3--13 3--14 3--15 3--20 3--21 3--22 3--27 3--28 3--29 3--33 3--35 ## [56] 3--37 3--38 3--40 3--42 3--43 3--44 3--45 3--46 3--47 3--48 3--49 ## [67] 3--50 3--51 3--52 3--53 4-- 7 4--11 4--27 4--28 4--52 5-- 6 5-- 7 ## [78] 5-- 8 5--12 5--13 5--14 5--15 5--16 5--20 5--21 5--27 5--28 5--29 ## [89] 5--38 5--40 5--43 5--46 5--51 5--54 5--55 5--56 5--57 5--58 5--59 ## + ... omitted several edges ## store the whole graph write_graph(got2,file = &quot;gg&quot;,format = &quot;pajek&quot;) read_graph(file=&quot;gg&quot;,format=&quot;pajek&quot;) ## IGRAPH 6586ad6 U-W- 99 238 -- ## + attr: weight (e/n) ## + edges from 6586ad6: ## [1] 1-- 2 1-- 3 1-- 5 1-- 6 1--17 1-- 7 1--18 1--19 1--20 1--21 1--22 ## [12] 1--23 1--24 1--25 1--26 1--27 1--12 1--13 1--28 1--29 1--30 1--14 ## [23] 1--31 1--32 1--33 1--34 1--35 2-- 3 2-- 6 2--36 2--37 2--21 2--38 ## [34] 2--39 2--13 2--28 2--40 2--15 2--41 2--35 3-- 5 3-- 6 3-- 7 3--42 ## [45] 3--43 3--44 3--45 3--37 3--20 3--46 3--21 3--22 3--47 3--38 3--48 ## [56] 3--49 3--27 3--50 3--51 3--52 3--12 3--13 3--28 3--29 3--14 3--53 ## [67] 3--40 3--33 3--15 3--35 4-- 7 4--11 4--27 4--52 4--28 5-- 6 5--54 ## [78] 5--55 5-- 7 5--56 5--57 5--43 5--58 5-- 8 5--20 5--46 5--21 5--59 ## + ... omitted several edges got2 ## IGRAPH 21f2988 UNW- 99 238 -- ## + attr: name (v/c), Type (e/c), weight (e/n), book (e/n), ## | source.family (e/c), target.family (e/c) ## + edges from 21f2988 (vertex names): ## [1] Arya-Stark--Benjen-Stark Arya-Stark--Bran-Stark ## [3] Arya-Stark--Catelyn-Stark Arya-Stark--Cersei-Lannister ## [5] Arya-Stark--Desmond Arya-Stark--Eddard-Stark ## [7] Arya-Stark--Ilyn-Payne Arya-Stark--Jeyne-Poole ## [9] Arya-Stark--Joffrey-Baratheon Arya-Stark--Jon-Snow ## [11] Arya-Stark--Jory-Cassel Arya-Stark--Meryn-Trant ## [13] Arya-Stark--Mordane Arya-Stark--Mycah ## + ... omitted several edges 2.3.4 Visualization Plotting parameters: mapping important attributes to visual properties Find a good layout ?igraph.plotting 2.3.4.1 Plotting parameters Figure 2.8: Introduction from Kateto tutorial Figure 2.9: Introduction from Kateto tutorial Figure 2.10: Introduction from Kateto tutorial plot(got2, vertex.color=&quot;gold&quot;, vertex.size=3, vertex.frame.color=&quot;gray&quot;, vertex.label.color=&quot;black&quot;, vertex.label.cex=.5, vertex.label.dist=2, edge.curved=0.5,layout=layout_with_lgl) 2.3.4.1.1 To make the graph look nicer Node color: using family name Node size: degree Edge width: weight ## store the fullname fullnames=V(got2)$name fullnames[1:3] ## [1] &quot;Arya-Stark&quot; &quot;Benjen-Stark&quot; &quot;Bran-Stark&quot; #get family name familynames=fullnames%&gt;%str_split(&quot;-&quot;,simplify = TRUE)%&gt;%.[,2] familynames[familynames==&quot;&quot;]=&quot;None&quot; familynames[familynames==&quot;(guard)&quot;]=&quot;None&quot; # add vertices attributes V(got2)$familyname=familynames V(got2)$fullname=fullnames V(got2)$name=nameshort # first name Set colors and legend. pch: plotting symbols appearing in the legend pt.bg: background color for point cex: text size pt.cex: point size ncol: number of columns of the legend bty: “o”– rectangle box; “n” – no box vcol=V(got2)$familyname vcol[(vcol!=&quot;Stark&quot;)&amp;(vcol!=&quot;Lannister&quot;)]=&quot;gray50&quot; vcol[vcol==&quot;Stark&quot;]=&quot;tomato&quot; vcol[vcol==&quot;Lannister&quot;]=&quot;gold&quot; V(got2)$color=vcol V(got2)$size=igraph::degree(got2)%&gt;%log()*4 E(got2)$width=E(got2)$weight%&gt;%log()/2 plot(got2, vertex.label.color=&quot;black&quot;, vertex.label.cex=.5, vertex.label.dist=2, edge.curved=0.5,layout=layout_with_kk) legend(&quot;right&quot;, legend = c(&quot;Stark&quot;,&quot;Lannister&quot;,&quot;Other&quot;), pch=21, col=c(&quot;tomato&quot;,&quot;gold&quot;,&quot;gray50&quot;), pt.bg=c(&quot;tomato&quot;,&quot;gold&quot;,&quot;gray50&quot;), pt.cex=1, cex=.8, bty=&quot;n&quot;, ncol=1) Plot only labels of the nodes plot(got2, vertex.shape=&quot;none&quot;,vertex.label.color=&quot;black&quot;, vertex.label.cex=.5, vertex.label.dist=2, edge.curved=0.5,layout=layout_with_kk) 2.3.4.2 Layouts Figure 2.11: Layouts from Kateto tutorial Force-directed layouts: suitable for general, small to medium sized graphs. (computational complexity; based on physical analogies) layout_with_fr: Fruchterman-Reingold is one of the most used force-directed layout algorithms. Force-directed layouts try to get a nice-looking graph where edges are similar in length and cross each other as little as possible. As a result, nodes are evenly distributed through the chart area, and the layout is intuitive in that nodes which share more connections are closer to each other. layout_with_kk: Another popular force-directed algorithm that produces nice results for connected graphs is Kamada Kawai. layout_with_graphopt: … For large graphs: layout_with_lgl: The LGL algorithm is meant for large, connected graphs. Here you can also specify a root: a node that will be placed in the middle of the layout. layout_with_drl: layout_with_gfr: layout_with_dh:simulated annealing algorithm by Davidson and Harel #layout_with_dh plot(got2, vertex.label.color=&quot;black&quot;, vertex.label.cex=.5,vertex.label.dist=0.2, edge.curved=0.5,layout=layout_with_dh) legend(&quot;right&quot;, legend = c(&quot;Stark&quot;,&quot;Lannister&quot;,&quot;Other&quot;), pch=21, col=c(&quot;tomato&quot;,&quot;gold&quot;,&quot;gray50&quot;), pt.bg=c(&quot;tomato&quot;,&quot;gold&quot;,&quot;gray50&quot;), pt.cex=1, cex=.8, bty=&quot;n&quot;, ncol=1) Selecting a layout automatically connected and vcount&lt;=100: kk vcount&lt;=1000:fr else: drl plot(got2, vertex.label.color=&quot;black&quot;, vertex.label.cex=.5,vertex.label.dist=0.2, edge.curved=0.5,layout=layout.auto(got2)) Without label and color the edge. set.seed(2) plot(got2, vertex.shape=&quot;none&quot;,vertex.label.color=&quot;black&quot;, vertex.label.cex=.5,vertex.label.dist=0.2, edge.curved=0.5,layout=layout_with_dh) ##color the edge got2 ## IGRAPH 21f2988 UNW- 99 238 -- ## + attr: name (v/c), familyname (v/c), fullname (v/c), color (v/c), ## | size (v/n), Type (e/c), weight (e/n), book (e/n), source.family ## | (e/c), target.family (e/c), width (e/n) ## + edges from 21f2988 (vertex names): ## [1] Arya--Benjen Arya--Bran Arya--Cersei Arya--Desmond Arya--Petyr ## [6] Arya--Eddard Arya--Rickon Arya--Robb Arya--Robert Arya--Rodrik ## [11] Arya--Sandor Arya--Sansa Arya--Syrio Arya--Tomard Arya--Tommen ## [16] Arya--Vayon Arya--Jory Arya--Meryn Arya--Yoren Arya--Jaremy ## [21] Arya--Jeor Arya--Mordane Arya--Luwin Arya--Mance Arya--Theon ## [26] Arya--Tyrion Arya--Waymar ## + ... omitted several edges ecol=rep(&quot;gray50&quot;,ecount(got2)) ecol[E(got2)$source.family==&quot;Stark&quot;]=&quot;tomato&quot; ecol[E(got2)$source.family==&quot;Lannister&quot;]=&quot;gold&quot; ecol[(ecol==&quot;tomato&quot;)&amp;(E(got2)$target.family==&quot;Lannister&quot;)&amp;(!is.na(E(got2)$target.family))]=&quot;orange&quot; ecol[(ecol==&quot;gold&quot;)&amp;(E(got2)$target.family==&quot;Stark&quot;)&amp;(!is.na(E(got2)$target.family))]=&quot;orange&quot; set.seed(2) plot(got2, vertex.shape=&quot;none&quot;,vertex.label.color=&quot;black&quot;, edge.color=ecol, vertex.label.cex=.5,vertex.label.dist=0.2, edge.curved=0.5,layout=layout_with_dh) legend(&quot;right&quot;, legend = c(&quot;Stark&quot;,&quot;Lannister&quot;,&quot;Stark-Lannister&quot;,&quot;Other&quot;), col=c(&quot;tomato&quot;,&quot;gold&quot;,&quot;orange&quot;,&quot;gray50&quot;), lty=rep(1,4), cex=.8, bty=&quot;n&quot;, ncol=1) 2.3.4.3 layout is not deterministic Different runs will result in slightly different configurations. Saving the layout or set.seed allows us to get the exact same result multiple times, which can be helpful if you want to plot the time evolution of a graph, or different relationships – and want nodes to stay in the same place in multiple plots. set.seed(1) l=layout_with_dh(got2) plot(got2, vertex.shape=&quot;none&quot;,vertex.label.color=&quot;black&quot;, vertex.label.cex=.5,vertex.label.dist=0.2, edge.curved=0.5,layout=l) rescale norm_coords rescale=F can use layout=l*2 l=layout_with_fr(got2) l &lt;- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1) #default -- scaled plot(got2, vertex.shape=&quot;none&quot;,vertex.label.color=&quot;black&quot;, vertex.label.cex=.5,vertex.label.dist=0.2, edge.curved=0.5,layout=l,rescale=F) Will introduce interactive r packages next time. par(mfrow=c(2,2), mar=c(0,0,0,0)) plot(got2, vertex.shape=&quot;none&quot;,vertex.label.color=&quot;black&quot;, vertex.label.cex=.5,vertex.label.dist=0.2, edge.curved=0.5,layout=l*0.5,rescale=F) plot(got2, vertex.shape=&quot;none&quot;,vertex.label.color=&quot;black&quot;, vertex.label.cex=.5,vertex.label.dist=0.2, edge.curved=0.5,layout=l*0.8,rescale=F) plot(got2, vertex.shape=&quot;none&quot;,vertex.label.color=&quot;black&quot;, vertex.label.cex=.5,vertex.label.dist=0.2, edge.curved=0.5,layout=l*1,rescale=F) plot(got2, vertex.shape=&quot;none&quot;,vertex.label.color=&quot;black&quot;, vertex.label.cex=.5,vertex.label.dist=0.2, edge.curved=0.5,layout=l*2,rescale=F) #dev.off() 2.3.5 Network and node descriptions Density: edge_density Degree: degree centrality and centralization: centr_degree closeness, centr_clo eigen_centrality, centr_eigen betweenness, edge_betweenness, centr_betw reciprocity,transitivity,diameter,… 2.3.5.1 Density The proportion of present edges from all possible ties. edge_density(got2, loops=F) ## [1] 0.04906205 ecount(got2)/(vcount(got2)*(vcount(got2)-1))*2 #for an undirected network ## [1] 0.04906205 2.3.5.2 Node degrees ‘degree’ has a mode of ‘in’ for in-degree, ‘out’ for out-degree, and ‘all’ or ‘total’ for total degree. Notice the graph is undirected. So there is no difference under different parameter setting. deg &lt;- igraph::degree(got2, mode=&quot;all&quot;) hist(deg, breaks=1:vcount(got2)-1, main=&quot;Histogram of node degree&quot;) deg.dist &lt;- degree_distribution(got2, cumulative=T, mode=&quot;all&quot;) plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col=&quot;orange&quot;, xlab=&quot;Degree&quot;, ylab=&quot;Cumulative Frequency&quot;) 2.3.5.3 centrality and centralization Who is the most important character? Degree Closeness Eigenvector Betweeness Degree (number of ties). Normalization should be the max degree the network can get igraph::degree(got2, mode=&quot;in&quot;,loops = F)%&gt;%sort(decreasing = TRUE)%&gt;%.[1:5] ## Eddard Cersei Bran Arya Desmond ## 56 41 32 27 27 #Notice this is undirected network, the choice of mode does not matter centr_degree(got2, mode=&quot;in&quot;, normalized=T,loops = F)$res%&gt;%sort(decreasing = TRUE)%&gt;%.[1:5] ## [1] 56 41 32 27 27 centr_degree(got2, mode=&quot;all&quot;, normalized=T,loops = F)$res%&gt;%sort(decreasing = TRUE)%&gt;%.[1:5] ## [1] 56 41 32 27 27 #Pay attention to whether allowing self-loop or not # Normalization may differ due to the setting centr_degree(got2, mode=&quot;all&quot;, normalized=T,loops = F)$theoretical_max ## [1] 9506 centr_degree(got2, mode=&quot;in&quot;, normalized=T,loops = F)$theoretical_max ## [1] 9506 centr_degree(got2, mode=&quot;in&quot;, normalized=T,loops = T)$theoretical_max ## [1] 9702 Closeness (centrality based on distance to others in the graph) Inverse of the node’s average geodesic distance to others in the network #whether to include weight or not #If a graph has edge attribute weight, the weight will be automatically took into consideration igraph::closeness(got2, mode=&quot;all&quot;, weights=NA) %&gt;%sort(decreasing = TRUE)%&gt;%.[1:5] ## Eddard Cersei Bran Arya Desmond ## 0.006993007 0.006329114 0.006097561 0.005882353 0.005847953 igraph::closeness(got2, mode=&quot;all&quot;)%&gt;%sort(decreasing = TRUE)%&gt;%.[1:5] ## Eddard Cersei Donnel Bran Arya ## 0.0010193680 0.0010111223 0.0010070493 0.0009990010 0.0009852217 centr_clo(got2, mode=&quot;all&quot;, normalized=T)$res %&gt;%sort(decreasing = TRUE)%&gt;%.[1:5] ## [1] 0.6853147 0.6202532 0.5975610 0.5764706 0.5730994 Eigenvector (centrality proportional to the sum of connection centralities) Values of the first eigenvector of the graph adjacency matrix eigen_centrality(got2, directed=F, weights=NA)$vector%&gt;%sort(decreasing = TRUE)%&gt;%.[1:5] ## Eddard Cersei Bran Desmond Arya ## 1.0000000 0.8163499 0.7410532 0.7276696 0.6740883 eigen_centrality(got2, directed=F)$vector%&gt;%sort(decreasing = TRUE)%&gt;%.[1:5] ## Eddard Yoren Desmond Cersei Vayon ## 1.0000000 0.8538947 0.4281666 0.3352669 0.2441671 centr_eigen(got2, directed=F, normalized=T) $vector%&gt;%sort(decreasing = TRUE)%&gt;%.[1:5] ## [1] 1.0000000 0.8163499 0.7410532 0.7276696 0.6740883 Betweenness (centrality based on a broker position connecting others) (Number of geodesics that pass through the node or the edge) igraph::betweenness(got2, directed=F, weights=NA)%&gt;%sort(decreasing = TRUE)%&gt;%.[1:5] ## Eddard Cersei Bran Arya Meryn ## 2155.2656 1554.1678 915.6561 510.5637 366.8074 igraph::betweenness(got2, directed=F)%&gt;%sort(decreasing = TRUE)%&gt;%.[1:5] ## Eddard Cersei Bran Benjen Arya ## 1835.5000 1483.2500 1024.8571 694.4762 689.5833 edge_betweenness(got2, directed=F, weights=NA)%&gt;%sort(decreasing = TRUE)%&gt;%.[1:5] ## [1] 426.4643 271.6982 198.3379 150.0371 133.8635 centr_betw(got2, directed=F, normalized=T)$res%&gt;%sort(decreasing = TRUE)%&gt;%.[1:5] ## [1] 2155.2656 1554.1678 915.6561 510.5637 366.8074 2.3.5.4 Other properties transitivity reciprocity clustering coefficient … 2.4 Paths, communitites and related visualization 2.4.1 Outline R package igraph Paths Paths, distances and diameter Components Transitivity and reciprocity Max-flow and min-cut Communities Pre-defined clusters Different algorithms Visualization Color the paths Plotting clusters Plotting dendrograms Mark groups 2.4.2 Datasets 2.4.2.1 Load the datasets data(USairports) data(karate) ?USairports ?karate 2.4.2.2 Preprocess USairports ## IGRAPH bf6202d DN-- 755 23473 -- US airports ## + attr: name (g/c), name (v/c), City (v/c), Position (v/c), ## | Carrier (e/c), Departures (e/n), Seats (e/n), Passengers (e/n), ## | Aircraft (e/n), Distance (e/n) ## + edges from bf6202d (vertex names): ## [1] BGR-&gt;JFK BGR-&gt;JFK BOS-&gt;EWR ANC-&gt;JFK JFK-&gt;ANC LAS-&gt;LAX MIA-&gt;JFK ## [8] EWR-&gt;ANC BJC-&gt;MIA MIA-&gt;BJC TEB-&gt;ANC JFK-&gt;LAX LAX-&gt;JFK LAX-&gt;SFO ## [15] AEX-&gt;LAS BFI-&gt;SBA ELM-&gt;PIT GEG-&gt;SUN ICT-&gt;PBI LAS-&gt;LAX LAS-&gt;PBI ## [22] LAS-&gt;SFO LAX-&gt;LAS PBI-&gt;AEX PBI-&gt;ICT PIT-&gt;VCT SFO-&gt;LAX VCT-&gt;DWH ## [29] IAD-&gt;JFK ABE-&gt;CLT ABE-&gt;HPN AGS-&gt;CLT AGS-&gt;CLT AVL-&gt;CLT AVL-&gt;CLT ## [36] AVP-&gt;CLT AVP-&gt;PHL BDL-&gt;CLT BHM-&gt;CLT BHM-&gt;CLT BNA-&gt;CLT BNA-&gt;CLT ## + ... omitted several edges #should have no self-loop sum(which_loop(USairports)) ## [1] 53 USairports &lt;- igraph::simplify(USairports, remove.loops = TRUE, remove.multiple = FALSE) sum(which_loop(USairports)) ## [1] 0 #different carrier and aircraft types leading to multiple graphs USairports[[&quot;RDU&quot;,&quot;JFK&quot;,edges=TRUE]][[1]][[1:5]] ## + 5/23420 edges from 1fcdaeb (vertex names): ## tail head tid hid Carrier Departures Seats ## 22271 RDU JFK 74 4 Chautauqua Airlines Inc. 27 1350 ## 20487 RDU JFK 74 4 American Eagle Airlines Inc. 48 2112 ## 20486 RDU JFK 74 4 American Eagle Airlines Inc. 57 2109 ## 14914 RDU JFK 74 4 Comair Inc. 1 76 ## 14913 RDU JFK 74 4 Comair Inc. 5 250 ## Passengers Aircraft Distance ## 22271 1118 675 426 ## 20487 1881 676 426 ## 20486 1833 674 426 ## 14914 68 638 426 ## 14913 209 629 426 #simplify air &lt;- igraph::simplify(USairports, edge.attr.comb =list(Departures = &quot;sum&quot;, Seats = &quot;sum&quot;, Passengers = &quot;sum&quot;,Distance=&quot;mean&quot;, &quot;ignore&quot;)) air ## IGRAPH 0073656 DN-- 755 8228 -- US airports ## + attr: name (g/c), name (v/c), City (v/c), Position (v/c), ## | Departures (e/n), Seats (e/n), Passengers (e/n), Distance (e/n) ## + edges from 0073656 (vertex names): ## [1] BGR-&gt;BOS BGR-&gt;JFK BGR-&gt;MIA BGR-&gt;EWR BGR-&gt;DCA BGR-&gt;DTW BGR-&gt;LGA ## [8] BGR-&gt;PHL BGR-&gt;PIE BGR-&gt;SFB BOS-&gt;BGR BOS-&gt;JFK BOS-&gt;LAS BOS-&gt;MIA ## [15] BOS-&gt;EWR BOS-&gt;LAX BOS-&gt;PBI BOS-&gt;PIT BOS-&gt;SFO BOS-&gt;IAD BOS-&gt;BDL ## [22] BOS-&gt;BUF BOS-&gt;BWI BOS-&gt;CAK BOS-&gt;CLE BOS-&gt;CLT BOS-&gt;CMH BOS-&gt;CVG ## [29] BOS-&gt;DCA BOS-&gt;DTW BOS-&gt;GSO BOS-&gt;IND BOS-&gt;LGA BOS-&gt;MDT BOS-&gt;MKE ## [36] BOS-&gt;MSP BOS-&gt;MSY BOS-&gt;MYR BOS-&gt;ORF BOS-&gt;PHF BOS-&gt;PHL BOS-&gt;RDU ## [43] BOS-&gt;RIC BOS-&gt;SRQ BOS-&gt;STL BOS-&gt;SYR BOS-&gt;ALB BOS-&gt;PVD BOS-&gt;ROC ## + ... omitted several edges air[[&quot;RDU&quot;,&quot;JFK&quot;,edges=TRUE]] ## [[1]] ## + 1/8228 edge from 0073656 (vertex names): ## [1] RDU-&gt;JFK 2.4.3 Paths, distances and diameter 2.4.3.1 Paths 2.4.3.1.1 Select specific paths Select specific paths #select length 1 path air[[from=&quot;RDU&quot;,to=&quot;BOS&quot;,edges=TRUE]] ## [[1]] ## + 1/8228 edge from 0073656 (vertex names): ## [1] RDU-&gt;BOS # select &gt;=1 paths flight_rdu_bos=V(air)[&quot;RDU&quot;,&quot;JFK&quot;,&quot;BOS&quot;] E(air,path=flight_rdu_bos) ## + 2/8228 edges from 0073656 (vertex names): ## [1] RDU-&gt;JFK JFK-&gt;BOS #another way E(air)[&quot;RDU&quot;%-&gt;%&quot;JFK&quot;,&quot;JFK&quot;%-&gt;%&quot;BOS&quot;] ## + 2/8228 edges from 0073656 (vertex names): ## [1] RDU-&gt;JFK JFK-&gt;BOS 2.4.3.1.2 Shortest paths Many paths between edges. Direct flight or multiple steps. Length of path: number of edges included in a path shortest_paths: only one of the shortest paths all_shortest_paths: all the shortest paths; nrgeo is the resultant vector of values from Djikstra’s algorithm which is used to find the shortest paths. #arkansas airport-XNA shortest_paths(air,from=&quot;RDU&quot;,to = &quot;XNA&quot;,weights = E(air)$Distance)$vpath ## [[1]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU CLT XNA shortest_paths(air,from=&quot;RDU&quot;,to = &quot;XNA&quot;,weights = NA)$vpath #one of the shortest path ## [[1]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU LAS XNA shortest_paths(air,from=&quot;RDU&quot;,to = &quot;XNA&quot;,mode = &quot;in&quot;,weights = NA)$vpath #to ## [[1]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU BOS XNA shortest_paths(air,from=&quot;RDU&quot;,to = &quot;XNA&quot;,mode = &quot;out&quot;,weights = NA)$vpath #from ## [[1]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU LAS XNA shortest_paths(air,from=&quot;RDU&quot;,to = &quot;XNA&quot;,mode = &quot;all&quot;,weights = NA)$vpath #undirected ## [[1]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU BOS XNA all_shortest_paths(air,from=&quot;RDU&quot;,to = &quot;XNA&quot;,weight=NA)$res ## [[1]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU MEM XNA ## ## [[2]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU DFW XNA ## ## [[3]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU DEN XNA ## ## [[4]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU ATL XNA ## ## [[5]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU ORD XNA ## ## [[6]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU IAH XNA ## ## [[7]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU MSP XNA ## ## [[8]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU LGA XNA ## ## [[9]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU DTW XNA ## ## [[10]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU CVG XNA ## ## [[11]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU CLT XNA ## ## [[12]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU EWR XNA ## ## [[13]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU LAS XNA all_shortest_paths(air,from=&quot;RDU&quot;,to = &quot;XNA&quot;,weights = E(air)$Distance)$res ## [[1]] ## + 3/755 vertices, named, from 0073656: ## [1] RDU CLT XNA 2.4.3.1.3 Color certain paths: Color the path from Actor 33 to Mr Hi and set the width for the path. path_vk=shortest_paths(karate,from=&quot;Actor 33&quot;, to=&quot;Mr Hi&quot;)$vpath[[1]] ecol=rep(&quot;gray80&quot;,ecount(karate)) ecol[E(karate,path = path_vk)]=&quot;orange&quot; ew=rep(1,ecount(karate)) ew[E(karate,path = path_vk)]=3 plot(karate,edge.color=ecol,edge.width=ew) 2.4.3.2 distance Distance: length of shortest path distance_table: The frequency of shortest path length between each pair of vertices. distance_table(air) ## $res ## [1] 8228 94912 166335 163830 86263 15328 2793 291 27 ## ## $unconnected ## [1] 31263 # unconnected: the number of pairs for which the first vertex is not reachable from the second distances distances(air,&quot;RDU&quot;,&quot;XNA&quot;,weights = NA) # not consider the weight ## XNA ## RDU 2 distances(air,&quot;RDU&quot;,&quot;XNA&quot;,weights = E(air)$Distance) # specify the weight ## XNA ## RDU 884 # how the function `distances` works (shortest_paths(air,from=&quot;RDU&quot;,to = &quot;XNA&quot;,weights = E(air)$Distance)$vpath[[1]]) ## + 3/755 vertices, named, from 0073656: ## [1] RDU CLT XNA E(air)[&quot;RDU&quot;%-&gt;%&quot;CLT&quot;,&quot;CLT&quot;%-&gt;%&quot;XNA&quot;]$Distance%&gt;%sum() ## [1] 884 #can return a distance matrix distances(air,c(&quot;BOS&quot;,&quot;JFK&quot;,&quot;RDU&quot;,&quot;XNA&quot;),c(&quot;BOS&quot;,&quot;JFK&quot;,&quot;RDU&quot;,&quot;XNA&quot;),weights = E(air)$Distance,mode = &quot;all&quot;) #undirected ## BOS JFK RDU XNA ## BOS 0 187 612 1312 ## JFK 187 0 426 1150 ## RDU 612 426 0 884 ## XNA 1312 1150 884 0 distances(air,c(&quot;BOS&quot;,&quot;JFK&quot;,&quot;RDU&quot;,&quot;XNA&quot;),c(&quot;BOS&quot;,&quot;JFK&quot;,&quot;RDU&quot;,&quot;XNA&quot;),weights = E(air)$Distance,mode = &quot;in&quot;) #focus on to ## BOS JFK RDU XNA ## BOS 0 187 612 1312 ## JFK 187 0 426 1150 ## RDU 612 426 0 884 ## XNA 1313 1150 884 0 distances(air,c(&quot;BOS&quot;,&quot;JFK&quot;,&quot;RDU&quot;,&quot;XNA&quot;),c(&quot;BOS&quot;,&quot;JFK&quot;,&quot;RDU&quot;,&quot;XNA&quot;),weights = E(air)$Distance,mode = &quot;out&quot;) #focus on from # tranpose of mode &quot;in&quot; ## BOS JFK RDU XNA ## BOS 0 187 612 1313 ## JFK 187 0 426 1150 ## RDU 612 426 0 884 ## XNA 1312 1150 884 0 mean_distance: average path length in a graph, by calculating the shortest paths between all pairs of vertices (both ways for directed graphs). does not consider edge weights currently and uses a breadth-first search. # connected=TRUE mean_distance(air,directed = TRUE) ## [1] 3.52743 # How the function works freq=distance_table(air)$res/sum(distance_table(air)$res) sum(freq*1:9) ## [1] 3.52743 #connected=FALSE mean_distance(air,directed = TRUE,unconnected = FALSE) ## [1] 44.79658 #How the function works freq=c(distance_table(air)$res,distance_table(air)$unconnected)/sum(c(distance_table(air)$res,distance_table(air)$unconnected)) sum(freq*c(1:9,vcount(air))) ## [1] 44.79658 2.4.3.3 Diameter diameter: The largest distance of a graph. In the special case when some vertices are not reachable via a path from some others, returns the longest finite distance. diameter(air) ## [1] 9 diameter(air,weights = E(air)$Distance) ## [1] 11257 diameter(air,directed = FALSE) ## [1] 8 #can also specify the unconnected=TRUE/FALSE 2.4.3.3.1 Get the nodes and edges of the airports in the longest path #get the nodes get_diameter(air,weights = E(air)$Distance) ## + 9/755 vertices, named, from 0073656: ## [1] VNY ORL OPF SDF STL SFO GUM SPN TIQ dia_v=get_diameter(air,weights = E(air)$Distance) # information of nodes dia_v[[]] ## + 9/755 vertices, named, from 0073656: ## name City Position ## 717 VNY Van Nuys, CA N341235 W1182924 ## 713 ORL Orlando, FL N283244 W0811959 ## 712 OPF Miami, FL N255425 W0801642 ## 78 SDF Louisville, KY N381028 W0854410 ## 80 STL St. Louis, MO N384452 W0902136 ## 18 SFO San Francisco, CA N373708 W1222230 ## 178 GUM Guam, TT N132900 E1444746 ## 180 SPN Saipan, TT N150708 E1454346 ## 181 TIQ Tinian, TT N145949 E1453705 # edges E(air,path = dia_v) ## + 8/8228 edges from 0073656 (vertex names): ## [1] VNY-&gt;ORL ORL-&gt;OPF OPF-&gt;SDF SDF-&gt;STL STL-&gt;SFO SFO-&gt;GUM GUM-&gt;SPN SPN-&gt;TIQ # info of edges dia_e=E(air,path = dia_v) dia_e[[]] ## + 8/8228 edges from 0073656 (vertex names): ## tail head tid hid Departures Seats Passengers Distance ## 8184 VNY ORL 717 713 1 12 4 2218 ## 8178 ORL OPF 713 712 1 12 4 193 ## 8177 OPF SDF 712 78 1 10 2 904 ## 2696 SDF STL 78 80 60 8220 5837 254 ## 2735 STL SFO 80 18 31 3852 2820 1736 ## 804 SFO GUM 18 178 26 10675 9951 5812 ## 5350 GUM SPN 178 180 164 7544 4554 129 ## 5356 SPN TIQ 180 181 283 1698 1576 11 ## delete the flight with passengers &lt;= 10 then recalculate the diameter air_filt=delete_edges(air,E(air)[Passengers&lt;=10]) get_diameter(air_filt,weights = E(air_filt)$Distance) ## + 8/755 vertices, named, from 5611041: ## [1] TIQ SPN GUM HNL LAX OKC NYL JQF 2.4.3.3.2 Color the paths along the diameter First step is to select the edges along the path. Then just change the edge attribute. dia_vk=get_diameter(karate,directed = FALSE) ecol=rep(&quot;gray80&quot;,ecount(karate)) ecol[E(karate,path = dia_vk)]=&quot;orange&quot; plot(karate,edge.color=ecol) 2.4.4 Components 2.4.4.1 Components For an undirected graph, Connected: if there is a path from any vertex to any other. Unconnected: if not connected. An unconnected graph has multiple components. Components: a maximal induced subgraph that is connected. is_connected(air) ## [1] FALSE count_components(air) ## [1] 6 #no:number of components names(igraph::components(air)) ## [1] &quot;membership&quot; &quot;csize&quot; &quot;no&quot; igraph::components(air)$csize ## [1] 745 2 2 3 2 1 igraph::components(air)$membership[igraph::components(air)$membership==6] ## DET ## 6 # check whether RDU is in the largest component subcomponent(air,&quot;RDU&quot;) #not bad ## + 745/755 vertices, named, from 0073656: ## [1] RDU BOS JFK LAS MIA EWR TEB PIT IAD BDL BNA BTR BWI CLE CLT CMH CVG ## [18] DCA DTW GPT GSO ILM IND LEX LGA MDT MKE MSP PHL STL SYR TYS MHT PVD ## [35] FLL MCO TPA IAH ORD CID MCI MSN SBN ATL DEN DFW MDW PHX RSW TUS ACY ## [52] MEM SJU UTM SWO DAL ECP EVV LAN PIA FRG ISO BGR LAX PBI SFO BUF CAK ## [69] MSY MYR ORF PHF RIC SRQ XNA ALB ROC SCE BHB PBG PQI AUS PDX SAN SEA ## [86] SLC JAX STT SJC LGB PTK PGD IAG ACK LEB MVY PVC BMG AUG HYA RKD RUT ## [103] SLK ANC ABE AVP PWM SAV BTV SWF LWB CKB OKC HOU SAT SMF SNA BUR OAK ## [120] EGE BQN PSE FAR FWA FOE AEX GEG ICT BHM HPN LIT SDF MAF SHV MLI OMA ## [137] SGF TUL ABQ DSM GRR AMA LBB BOI HNL OGG ONT RNO COS ELP FAT GJT MFE ## [154] PSP BLI EUG ATW BIL BZN DLH FSD GRB GTF IDA MOT MSO BIS GFK RAP AZA ## + ... omitted several vertices 2.4.4.2 strongly connected and weakly connected For a directed network, weakly connected: its corresponding undirected network that ignored edge directions, is connected strongly connected: if and only if it has a directed path from each vertex to all other vertices. is_connected(air,mode = &quot;weak&quot;) ## [1] FALSE is_connected(air,mode = &quot;strong&quot;) ## [1] FALSE count_components(air,mode = &quot;strong&quot;) ## [1] 30 igraph::components(air,mode = &quot;strong&quot;)$membership%&gt;%table() ## . ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ## 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 2 1 1 ## 19 20 21 22 23 24 25 26 27 28 29 30 ## 1 1 1 1 1 1 723 1 1 1 1 1 # check whether RDU is in the largest component &quot;RDU&quot;%in%(igraph::components(air,mode = &quot;strong&quot;)$membership[igraph::components(air,mode = &quot;strong&quot;)$membership==25]%&gt;%names()) # not bad ## [1] TRUE 2.4.4.3 Transitivity and reciprocity Network and node properties 2.4.4.4 Reciprocity The proportion of reciprocated ties for a directed network #number of reciprocity edges divided by number of edges reciprocity(air) ## [1] 0.8762761 2*dyad_census(air)$mut/ecount(air) ## [1] 0.8762761 # number of mutual pairs divided by number of connected pairs reciprocity(air,mode = &quot;ratio&quot;) ## [1] 0.7797967 dyad_census(air)$mut/(dyad_census(air)$mut+dyad_census(air)$asym) ## [1] 0.7797967 #number of pairs dyad_census(air) ## $mut ## [1] 3605 ## ## $asym ## [1] 1018 ## ## $null ## [1] 280012 2.4.4.5 transitivity global: ratio of triangles to connected triples. local: ratio of triangles to connected triples each vertex is part of. transitivity(air,type = &quot;global&quot;) ## [1] 0.3384609 transitivity(air,type = &quot;local&quot;)[1:5] ## [1] 0.16842105 0.09683141 0.02803235 0.11144883 0.05888073 transitivity(air,vids = c(&quot;RDU&quot;,&quot;JFK&quot;),type = &quot;local&quot;) # specify multiple vertices ## [1] 0.4803279 0.3859649 #corresponds to different types of triples triad_census(air) ## [1] 68169544 712579 2380343 1445 1289 2465 15322 ## [8] 19171 91 39 114868 202 376 558 ## [15] 6422 18671 ?triad_census 2.4.4.6 maximum flows and minimum cuts max flow How many passengers the US airport network can transport from a given airport to another one. E(air)[[&quot;BOS&quot;%-&gt;%&quot;JFK&quot;]] ## + 1/8228 edge from 0073656 (vertex names): ## tail head tid hid Departures Seats Passengers Distance ## 12 BOS JFK 2 4 491 39403 31426 187 # use seat to present the capacity. max_flow(air,&quot;BOS&quot;,&quot;JFK&quot;,capacity = E(air)$Seats)$value ## [1] 1177758 #capacity is for max_flow() function as default E(air)$capacity=E(air)$Seats max_flow(air,&quot;BOS&quot;,&quot;JFK&quot;)$value ## [1] 1177758 min cut: the minimum number of edges, that disconnect a destination vertex from a departure vertex. In a weighted network with edge capacities the minimum cut calculates the total capacity needed to disconnect the vertex pair. E(air)[[&quot;BOS&quot;%-&gt;%&quot;JFK&quot;]] ## + 1/8228 edge from 0073656 (vertex names): ## tail head tid hid Departures Seats Passengers Distance capacity ## 12 BOS JFK 2 4 491 39403 31426 187 39403 # use seat to present the capacity. min_cut(air,&quot;BOS&quot;,&quot;JFK&quot;,capacity = E(air)$Seats) ## [1] 1177758 #capacity is for max_flow() function as default E(air)$capacity=E(air)$Seats min_cut(air,&quot;BOS&quot;,&quot;JFK&quot;) ## [1] 1177758 max-flow min-cut theorem: the minimum cut in a graph from a source vertex to a target vertex always equals the maximum flow between the same vertices. min_cut(air,&quot;BOS&quot;,&quot;JFK&quot;,capacity = E(air)$Seats) ## [1] 1177758 max_flow(air,&quot;BOS&quot;,&quot;JFK&quot;,capacity = E(air)$Seats)$value ## [1] 1177758 2.4.5 Community 2.4.5.1 Make clusters You can speicfy the cluster as you want. data(&quot;karate&quot;) #ground truth V(karate)$Faction ## [1] 1 1 1 1 1 1 1 1 2 2 1 1 1 1 2 2 1 1 2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 ground_truth=make_clusters(karate,V(karate)$Faction) ground_truth ## IGRAPH clustering unknown, groups: 2, mod: 0.37 ## + groups: ## $`1` ## [1] 1 2 3 4 5 6 7 8 11 12 13 14 17 18 20 22 ## ## $`2` ## [1] 9 10 15 16 19 21 23 24 25 26 27 28 29 30 31 32 33 34 ## #cluster by the distance dist_memb=karate %&gt;% distances(v = c(&quot;John A&quot;, &quot;Mr Hi&quot;)) %&gt;% apply(2, which.min) %&gt;% make_clusters(graph = karate) 2.4.5.2 Community detection Different algorithm for community detection (clustering) 2.4.5.3 Girvan-Newman algorithm Girvan-Newman algorithm (edge betweenness method): the number of shortest paths passing through an intra-community edge should be low while inter-community edges are likely to act as bottlenecks that participate in many shortest paths between vertices of different communities. dendrogram &lt;- cluster_edge_betweenness(karate) ## Warning in cluster_edge_betweenness(karate): At community.c:460 :Membership ## vector will be selected based on the lowest modularity score. ## Warning in cluster_edge_betweenness(karate): At community.c:467 :Modularity ## calculation with weighted edge betweenness community detection might not ## make sense -- modularity treats edge weights as similarities while edge ## betwenness treats them as distances dendrogram ## IGRAPH clustering edge betweenness, groups: 6, mod: 0.35 ## + groups: ## $`1` ## [1] &quot;Mr Hi&quot; &quot;Actor 2&quot; &quot;Actor 4&quot; &quot;Actor 8&quot; &quot;Actor 12&quot; &quot;Actor 13&quot; ## [7] &quot;Actor 18&quot; &quot;Actor 20&quot; &quot;Actor 22&quot; ## ## $`2` ## [1] &quot;Actor 3&quot; &quot;Actor 10&quot; &quot;Actor 14&quot; &quot;Actor 29&quot; ## ## $`3` ## [1] &quot;Actor 5&quot; &quot;Actor 6&quot; &quot;Actor 7&quot; &quot;Actor 11&quot; &quot;Actor 17&quot; ## ## + ... omitted several groups/vertices plot_dendrogram(dendrogram) # for hierarchical structure membership(dendrogram) # best cut in terms of modularity ## Mr Hi Actor 2 Actor 3 Actor 4 Actor 5 Actor 6 Actor 7 Actor 8 ## 1 1 2 1 3 3 3 1 ## Actor 9 Actor 10 Actor 11 Actor 12 Actor 13 Actor 14 Actor 15 Actor 16 ## 4 2 3 1 1 2 4 4 ## Actor 17 Actor 18 Actor 19 Actor 20 Actor 21 Actor 22 Actor 23 Actor 24 ## 3 1 4 1 4 1 4 5 ## Actor 25 Actor 26 Actor 27 Actor 28 Actor 29 Actor 30 Actor 31 Actor 32 ## 5 5 6 5 2 6 4 4 ## Actor 33 John A ## 4 4 cut_at(dendrogram,no = 2) # cut into two groups ## [1] 2 2 1 2 2 2 2 2 1 1 2 2 2 1 1 1 2 2 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 V(karate)[Faction == 1]$shape &lt;- &quot;circle&quot; V(karate)[Faction == 2]$shape &lt;- &quot;square&quot; set.seed(1) plot(dendrogram,karate) 2.4.5.4 Exact modularity maximization Exact modularity maximization: optimization problem to maximum the modularity cluster_optimal() is not available for the underlying package is removed from CRAN For large graph, apply cluster_fast_greedy() #optimal=cluster_optimal(karate) #set.seed(1) #plot(optimal,karate) optimal_lg=cluster_fast_greedy(karate) set.seed(1) plot(optimal_lg,karate) 2.4.5.5 Leading eigenvector eigen=cluster_leading_eigen(karate) set.seed(1) plot(eigen,karate) clusters &lt;- cluster_leading_eigen(karate, steps = 1) #at most two cluster 2.4.5.6 Label propagation algorithm: The algorithm terminates when it holds for each node that it belongs to a community to which a maximum number of its neighbors also belong. fixed: TRUE-label will not change. initial: initial point. #non-negative values: different labels; negative values: no labels initial=rep(-1,vcount(karate)) fixed=rep(FALSE,vcount(karate)) #need to have names names(initial)=names(fixed)=V(karate)$name initial[&#39;Mr Hi&#39;]=1 initial[&#39;John A&#39;]=2 fixed[&#39;Mr Hi&#39;]=fixed[&#39;John A&#39;]=TRUE lab=cluster_label_prop(karate,initial = initial,fixed = fixed) set.seed(1) plot(lab,karate) set.seed(1) plot(ground_truth,karate) 2.4.5.7 Other algorithms: cluster_spinglass … 2.4.6 Visualization 2.4.6.1 Visulization color the paths plotting clusters plotting dendrograms marked several grouping vertices plot support igraph and other igraph objects such as vertexclustering, vertexdendrogram, … 2.4.6.2 Plotting clusters plot(vertexdendrogram,igraph) set.seed(1) plot(ground_truth,karate) 2.4.6.3 Plotting dendrograms plot_dendrogram(vertexdendrogram) Not flexible enough. Try ggdendrogram() in ggplot2 package. set.seed(1) plot_dendrogram(dendrogram) #labels at the same height: hang=-1 #cex: size of labels plot_dendrogram(dendrogram,hang = -1, cex = 0.6) 2.4.6.4 marked groups plot: mark.group: list mark.col: vector mark.border: vector mark.shape: vector (smoothness of the border, range from -1 to 1) mark.expand: vector (size of the border) ls=list(`1`=ground_truth[[1]],`2`=ground_truth[[2]]) ls ## $`1` ## [1] 1 2 3 4 5 6 7 8 11 12 13 14 17 18 20 22 ## ## $`2` ## [1] 9 10 15 16 19 21 23 24 25 26 27 28 29 30 31 32 33 34 # other pars can be set as default set.seed(1) plot(karate,mark.groups = ls) set.seed(1) plot(karate,mark.groups = ls,mark.col = c(&quot;lightblue&quot;,&quot;yellow&quot;),mark.border = rainbow(length(ls),alpha=1),mark.shape=c(-0.5,1),mark.expand = 1:2) 2.5 More about igraph Epidemics on networks: compartmental models on netwoks Spectral embeddings: community detection Change-point detection in temporal graphs CLustering multiple graphs Cliques and graphlets Graphons Graph matching "],
["ergm-statnet-package.html", "Chapter 3 ERGM (statnet Package) 3.1 Introduction 3.2 Preparation 3.3 summary the network statistics 3.4 ergm fit ergm model 3.5 simulate netowrks from an ergm model fit 3.6 Check the goodness of fit 3.7 More functions", " Chapter 3 ERGM (statnet Package) 3.1 Introduction 3.1.1 Outline Here we only focus on the R package statnet to fit ERGM. summary network statistics ergm model fitting and interpretation: simulate network simulations based on specified model. gof, mcmc.diagnostics: Goodness of fit and MCMC diagnostics 3.1.2 statnet The analytic framework is based on Exponential family Random Graph Models (ergm). statnet provides a comprehensive framework for ergm-based network modeling, including tools for: model estimation model-based network simulation network visualization model evaluation Powered by Markov chain Monte Carlo (MCMC) algorithm. 3.1.3 References Official website (handbook): http://statnet.org/ Tutorial: https://statnet.org/trac/raw-attachment/wiki/Sunbelt2016/ergm_tutorial.html Explore the official websites to find more info 3.2 Preparation #install.packages(&quot;statnet&quot;) library(statnet) ## Installed ReposVer Built ## network &quot;1.13.0.1&quot; &quot;1.15&quot; &quot;3.5.0&quot; ## networkDynamic &quot;0.9.0&quot; &quot;0.10.0&quot; &quot;3.5.0&quot; library(dplyr) 3.3 summary the network statistics 3.3.1 Dataset florentine: Florentine Family Marriage and Business Ties Data data(package=&quot;ergm&quot;) #see all available dataset in the package data(florentine) # load flomarriage and flobusiness data flomarriage # see the details of the network ## Network attributes: ## vertices = 16 ## directed = FALSE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges= 20 ## missing edges= 0 ## non-missing edges= 20 ## ## Vertex attribute names: ## priorates totalties vertex.names wealth ## ## No edge attributes class(flomarriage) ## [1] &quot;network&quot; summary(flomarriage) ## Network attributes: ## vertices = 16 ## directed = FALSE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges = 20 ## missing edges = 0 ## non-missing edges = 20 ## density = 0.1666667 ## ## Vertex attributes: ## ## priorates: ## numeric valued attribute ## attribute summary: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00 0.00 21.50 25.94 44.75 74.00 ## ## totalties: ## numeric valued attribute ## attribute summary: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.00 4.75 9.00 13.88 15.00 54.00 ## vertex.names: ## character valued attribute ## 16 valid vertex names ## ## wealth: ## numeric valued attribute ## attribute summary: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 3.00 17.50 39.00 42.56 48.25 146.00 ## ## No edge attributes ## ## Network edgelist matrix: ## [,1] [,2] ## [1,] 1 9 ## [2,] 2 6 ## [3,] 2 7 ## [4,] 2 9 ## [5,] 3 5 ## [6,] 3 9 ## [7,] 4 7 ## [8,] 4 11 ## [9,] 4 15 ## [10,] 5 11 ## [11,] 5 15 ## [12,] 7 8 ## [13,] 7 16 ## [14,] 9 13 ## [15,] 9 14 ## [16,] 9 16 ## [17,] 10 14 ## [18,] 11 15 ## [19,] 13 15 ## [20,] 13 16 set.seed(1) plot(flomarriage) 3.3.2 summary summary(network-object~ergm-terms): provide the statistics of network summary(flomarriage~edges+triangle+kstar(1:3)+degree(0:5)) ## edges triangle kstar1 kstar2 kstar3 degree0 degree1 degree2 ## 20 3 40 47 34 1 4 2 ## degree3 degree4 degree5 ## 6 2 0 3.3.3 directed networks data(samplk) samplk3 ## Network attributes: ## vertices = 18 ## directed = TRUE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges= 56 ## missing edges= 0 ## non-missing edges= 56 ## ## Vertex attribute names: ## cloisterville group vertex.names ## ## No edge attributes set.seed(1) plot(samplk3) idegree and odegree. summary(samplk3~idegree(1:3)+odegree(c(2,4))) #indegree and outdegree ## idegree1 idegree2 idegree3 odegree2 odegree4 ## 1 7 2 0 2 3.4 ergm fit ergm model 3.4.1 ERGM The general form: \\(P(g=G)=\\frac{exp(\\theta&#39;T(G))}{c(\\theta)}\\) log-odds of a single edge between node \\(i\\) and \\(j\\): \\(logit(Y)=\\theta&#39;T(G)\\) Similar as regression: glm(y~x) – ergm(graph~terms) where terms are \\(T(\\cdot)\\) 3.4.2 ergm function. Input: formula [netowrk object (adjacency matrix)] ~ [ergm-terms] #Input ?ergm class(flomarriage) ## [1] &quot;network&quot; ergm(flomarriage~edges)%&gt;%summary() ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: flomarriage ~ edges ## ## Iterations: 5 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -1.6094 0.2449 0 -6.571 &lt;1e-04 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 166.4 on 120 degrees of freedom ## Residual Deviance: 108.1 on 119 degrees of freedom ## ## AIC: 110.1 BIC: 112.9 (Smaller is better.) mat=as.sociomatrix(flomarriage) ergm(mat~edges)%&gt;%summary() ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: mat ~ edges ## ## Iterations: 5 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -1.6094 0.1732 0 -9.292 &lt;1e-04 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 332.7 on 240 degrees of freedom ## Residual Deviance: 216.3 on 239 degrees of freedom ## ## AIC: 218.3 BIC: 221.8 (Smaller is better.) Output: ergm object Method on ergm object: class names summary coef coefficients vcov flomodel.01=ergm(flomarriage~edges) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. summary(flomodel.01) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: flomarriage ~ edges ## ## Iterations: 5 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -1.6094 0.2449 0 -6.571 &lt;1e-04 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 166.4 on 120 degrees of freedom ## Residual Deviance: 108.1 on 119 degrees of freedom ## ## AIC: 110.1 BIC: 112.9 (Smaller is better.) class(flomodel.01) ## [1] &quot;ergm&quot; names(flomodel.01) ## [1] &quot;coef&quot; &quot;iterations&quot; &quot;MCMCtheta&quot; &quot;gradient&quot; ## [5] &quot;hessian&quot; &quot;covar&quot; &quot;failure&quot; &quot;est.cov&quot; ## [9] &quot;glm&quot; &quot;glm.null&quot; &quot;theta1&quot; &quot;offset&quot; ## [13] &quot;drop&quot; &quot;estimable&quot; &quot;network&quot; &quot;reference&quot; ## [17] &quot;newnetwork&quot; &quot;formula&quot; &quot;constrained&quot; &quot;constraints&quot; ## [21] &quot;target.stats&quot; &quot;etamap&quot; &quot;target.esteq&quot; &quot;estimate&quot; ## [25] &quot;control&quot; &quot;null.lik&quot; &quot;mle.lik&quot; flomodel.01$coef ## edges ## -1.609438 coef(flomodel.01) ## edges ## -1.609438 coefficients(flomodel.01) ## Warning: You appear to be calling coef.ergm() directly. coef.ergm() is a ## method, and will not be exported in a future version of &#39;ergm&#39;. Use coef() ## instead, or getS3method() if absolutely necessary. ## edges ## -1.609438 vcov(flomodel.01) #variance-covariance matrix of the main parameters ## edges ## edges 0.05999985 vcov(flomodel.01)%&gt;%sqrt() ## edges ## edges 0.2449487 vcov(ergm(flomarriage~edges+triangle)) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Starting Monte Carlo maximum likelihood estimation (MCMLE): ## Iteration 1 of at most 20: ## Optimizing with step length 1. ## The log-likelihood improved by 0.002922. ## Step length converged once. Increasing MCMC sample size. ## Iteration 2 of at most 20: ## Optimizing with step length 1. ## The log-likelihood improved by 0.0006953. ## Step length converged twice. Stopping. ## Finished MCMLE. ## Evaluating log-likelihood at the estimate. Using 20 bridges: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 . ## This model was fit using MCMC. To examine model diagnostics and check for degeneracy, use the mcmc.diagnostics() function. ## edges triangle ## edges 0.1242829 -0.1573260 ## triangle -0.1573260 0.3539089 3.4.3 ergm-terms See the full list of ergm-terms help(&#39;ergm-terms&#39;) 3.4.3.1 Erdos-Renyi model G(n,p) model: include edges term Edge included in the graph with prob \\(p\\): \\(Pr(A=a|p)=\\prod p^{a_{ij}}(1-p)^{1-a_{ij}}\\) Rewrite Erdos-Renyi model in ERGM form: \\(T(G)=\\#edges\\), \\(\\theta=log \\frac{p}{1-p}\\) 3.4.3.2 Interpretation of the parameter Interpretation (similar when you interpret glm): edges: If the number of edges increase 1, the log-odds of any edge existing is -1.6094. \\(p&lt;\\alpha\\): parameter does not equal to 0 significantly, Null Deviance: The null deviance in the ergm output appears to be based on an Erdos-Renyi random graph with p = 0.5. Residual Deviance: 2 times difference of loglik (saturated model - our model) (smaller is better) AIC, BIC: -loglik+penalty(#parameter) flomodel.01=ergm(flomarriage~edges) #similar as regression lm(y~x) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. summary(flomodel.01) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: flomarriage ~ edges ## ## Iterations: 5 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -1.6094 0.2449 0 -6.571 &lt;1e-04 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 166.4 on 120 degrees of freedom ## Residual Deviance: 108.1 on 119 degrees of freedom ## ## AIC: 110.1 BIC: 112.9 (Smaller is better.) flomodel.01$coef/(1+exp(flomodel.01$coef)) # prob of an edge exists ## edges ## -1.341198 -2*(flomodel.01$mle.lik)+2 #AIC: -2loglik+2k ## &#39;log Lik.&#39; 110.1347 (df=1) -2*(flomodel.01$mle.lik)+log(16*15/2) #BIC:-2loglik+klog(n) ## &#39;log Lik.&#39; 112.9222 (df=1) pchisq(108.1 , df=119, lower.tail=FALSE) # H0: our model fits well. The smaller the better. Accept H0. ## [1] 0.7535728 3.4.3.3 Include triangle terms Include number of triangles as a measure of clustering. flomodel.02=ergm(flomarriage~edges+triangle) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Starting Monte Carlo maximum likelihood estimation (MCMLE): ## Iteration 1 of at most 20: ## Optimizing with step length 1. ## The log-likelihood improved by 0.00888. ## Step length converged once. Increasing MCMC sample size. ## Iteration 2 of at most 20: ## Optimizing with step length 1. ## The log-likelihood improved by 0.000148. ## Step length converged twice. Stopping. ## Finished MCMLE. ## Evaluating log-likelihood at the estimate. Using 20 bridges: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 . ## This model was fit using MCMC. To examine model diagnostics and check for degeneracy, use the mcmc.diagnostics() function. summary(flomodel.02) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: flomarriage ~ edges + triangle ## ## Iterations: 2 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -1.6737 0.3578 0 -4.677 &lt;1e-04 *** ## triangle 0.1490 0.6029 0 0.247 0.805 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 166.4 on 120 degrees of freedom ## Residual Deviance: 108.1 on 118 degrees of freedom ## ## AIC: 112.1 BIC: 117.6 (Smaller is better.) Coefficients: -1.6744\\(\\times\\)#of edges+0.1497\\(\\times\\)#of triangles triangle is not significant AIC, BIC: larger than that of ER model 3.4.3.4 Include nodal covariates: nodecov Using nodecov to include continuous nodal covariates flomarriage ## Network attributes: ## vertices = 16 ## directed = FALSE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges= 20 ## missing edges= 0 ## non-missing edges= 20 ## ## Vertex attribute names: ## priorates totalties vertex.names wealth ## ## No edge attributes wealth=flomarriage %v% &#39;wealth&#39; # %v% get the vertex attributes set.seed(1) plot(flomarriage, vertex.cex=wealth/25, main=&quot;Florentine marriage by wealth&quot;, cex.main=0.8) flomodel.03=ergm(flomarriage~edges+nodecov(&#39;wealth&#39;)) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. summary(flomodel.03) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: flomarriage ~ edges + nodecov(&quot;wealth&quot;) ## ## Iterations: 4 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -2.594929 0.536056 0 -4.841 &lt;1e-04 *** ## nodecov.wealth 0.010546 0.004674 0 2.256 0.0241 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 166.4 on 120 degrees of freedom ## Residual Deviance: 103.1 on 118 degrees of freedom ## ## AIC: 107.1 BIC: 112.7 (Smaller is better.) Interpretation: -2.594929 # of edges + 0.010546 wealth of node i + 0.010546 wealth of node j 3.4.3.5 Include transformation of continuous nodal covariates flomodel.04=ergm(flomarriage~edges+absdiff(&quot;wealth&quot;)) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. summary(flomodel.04) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: flomarriage ~ edges + absdiff(&quot;wealth&quot;) ## ## Iterations: 4 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -2.302042 0.401906 0 -5.728 &lt;1e-04 *** ## absdiff.wealth 0.015519 0.006157 0 2.521 0.0117 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 166.4 on 120 degrees of freedom ## Residual Deviance: 102.0 on 118 degrees of freedom ## ## AIC: 106 BIC: 111.5 (Smaller is better.) 3.4.3.6 Include transformation of continuous nodal covariates flomodel.05=ergm(flomarriage~edges+nodecov(&#39;wealth&#39;)+nodecov(&#39;wealth&#39;,transform=function(x) x^2)) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. summary(flomodel.05) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: flomarriage ~ edges + nodecov(&quot;wealth&quot;) + nodecov(&quot;wealth&quot;, transform = function(x) x^2) ## ## Iterations: 4 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -2.904e+00 9.313e-01 0 -3.119 0.00182 ** ## nodecov.wealth 1.730e-02 1.695e-02 0 1.021 0.30737 ## nodecov.wealth.1 -4.459e-05 1.073e-04 0 -0.416 0.67768 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 166.4 on 120 degrees of freedom ## Residual Deviance: 102.9 on 117 degrees of freedom ## ## AIC: 108.9 BIC: 117.3 (Smaller is better.) 3.4.3.7 Include other possible ergm-terms flomodel.06=ergm(flomarriage~kstar(1:2) + absdiff(&quot;wealth&quot;)) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Starting Monte Carlo maximum likelihood estimation (MCMLE): ## Iteration 1 of at most 20: ## Optimizing with step length 1. ## The log-likelihood improved by 0.01795. ## Step length converged once. Increasing MCMC sample size. ## Iteration 2 of at most 20: ## Optimizing with step length 1. ## The log-likelihood improved by 0.001918. ## Step length converged twice. Stopping. ## Finished MCMLE. ## Evaluating log-likelihood at the estimate. Using 20 bridges: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 . ## This model was fit using MCMC. To examine model diagnostics and check for degeneracy, use the mcmc.diagnostics() function. summary(flomodel.06) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: flomarriage ~ kstar(1:2) + absdiff(&quot;wealth&quot;) ## ## Iterations: 2 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## kstar1 -0.857799 0.455348 0 -1.884 0.0596 . ## kstar2 -0.162150 0.224192 0 -0.723 0.4695 ## absdiff.wealth 0.019244 0.008719 0 2.207 0.0273 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 166.4 on 120 degrees of freedom ## Residual Deviance: 101.3 on 117 degrees of freedom ## ## AIC: 107.3 BIC: 115.7 (Smaller is better.) summary(ergm(flomarriage~kstar(c(1,3)) + absdiff(&quot;wealth&quot;))) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Starting Monte Carlo maximum likelihood estimation (MCMLE): ## Iteration 1 of at most 20: ## Optimizing with step length 1. ## The log-likelihood improved by 0.01691. ## Step length converged once. Increasing MCMC sample size. ## Iteration 2 of at most 20: ## Optimizing with step length 1. ## The log-likelihood improved by 0.001825. ## Step length converged twice. Stopping. ## Finished MCMLE. ## Evaluating log-likelihood at the estimate. Using 20 bridges: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 . ## This model was fit using MCMC. To examine model diagnostics and check for degeneracy, use the mcmc.diagnostics() function. ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: flomarriage ~ kstar(c(1, 3)) + absdiff(&quot;wealth&quot;) ## ## Iterations: 2 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## kstar1 -1.054277 0.261968 0 -4.024 &lt;1e-04 *** ## kstar3 -0.086239 0.111865 0 -0.771 0.4408 ## absdiff.wealth 0.020937 0.009522 0 2.199 0.0279 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 166.4 on 120 degrees of freedom ## Residual Deviance: 101.0 on 117 degrees of freedom ## ## AIC: 107 BIC: 115.4 (Smaller is better.) 3.4.3.8 Include categorical nodal covariates: nodefactor data(&quot;faux.mesa.high&quot;) mesa=faux.mesa.high mesa # grade, race, sex are discrete vertex attribute ## Network attributes: ## vertices = 205 ## directed = FALSE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges= 203 ## missing edges= 0 ## non-missing edges= 203 ## ## Vertex attribute names: ## Grade Race Sex ## ## No edge attributes plot(mesa, vertex.col=&#39;Grade&#39;) legend(&#39;bottomleft&#39;,fill=7:12,legend=paste(&#39;Grade&#39;,7:12),cex=0.75) 3.4.3.9 Include discrete nodal covariates: nodefactor fauxmodel.01=ergm(mesa ~edges + nodecov(&#39;Grade&#39;)) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. summary(fauxmodel.01) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: mesa ~ edges + nodecov(&quot;Grade&quot;) ## ## Iterations: 7 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -3.64578 0.56757 0 -6.424 &lt;1e-04 *** ## nodecov.Grade -0.05650 0.03274 0 -1.726 0.0844 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 28987 on 20910 degrees of freedom ## Residual Deviance: 2283 on 20908 degrees of freedom ## ## AIC: 2287 BIC: 2303 (Smaller is better.) fauxmodel.02=ergm(mesa ~edges + nodefactor(&#39;Grade&#39;)) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. summary(fauxmodel.02) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: mesa ~ edges + nodefactor(&quot;Grade&quot;) ## ## Iterations: 6 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -4.17784 0.14696 0 -28.428 &lt; 1e-04 *** ## nodefactor.Grade.8 -0.27924 0.14209 0 -1.965 0.04938 * ## nodefactor.Grade.9 -0.47364 0.14912 0 -3.176 0.00149 ** ## nodefactor.Grade.10 -0.54653 0.18641 0 -2.932 0.00337 ** ## nodefactor.Grade.11 -0.19281 0.16550 0 -1.165 0.24401 ## nodefactor.Grade.12 -0.05704 0.20739 0 -0.275 0.78330 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 28987 on 20910 degrees of freedom ## Residual Deviance: 2269 on 20904 degrees of freedom ## ## AIC: 2281 BIC: 2329 (Smaller is better.) 3.4.3.10 Include other terms: eg. homophily help(&#39;ergm-terms&#39;) # check all the possible ergm terms 3.4.3.11 Include other terms: eg. homophily nodematch: Uniform homophily and differential homophily uniform homophily(diff=FALSE), adds one network statistic to the model, which counts the number of edges (i,j) for which attrname(i)==attrname(j). differential homophily(diff=TRUE), p(#of unique values of the attrname attribute) network statistics are added to the model. The kth such statistic counts the number of edges (i,j) for which attrname(i) == attrname(j) == value(k), where value(k) is the kth smallest unique value of the attrname attribute. When multiple attribute names are given, the statistic counts only ties for which all of the attributes match. ?nodematch fauxmodel.03 &lt;- ergm(mesa ~edges + nodematch(&#39;Grade&#39;,diff=F) ) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. summary(fauxmodel.03) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: mesa ~ edges + nodematch(&quot;Grade&quot;, diff = F) ## ## Iterations: 8 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -6.0340 0.1583 0 -38.12 &lt;1e-04 *** ## nodematch.Grade 2.8310 0.1773 0 15.96 &lt;1e-04 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 28987 on 20910 degrees of freedom ## Residual Deviance: 1940 on 20908 degrees of freedom ## ## AIC: 1944 BIC: 1959 (Smaller is better.) mixingmatrix(mesa, &quot;Race&quot;) # reason for Inf ## Note: Marginal totals can be misleading ## for undirected mixing matrices. ## Black Hisp NatAm Other White ## Black 0 8 13 0 5 ## Hisp 8 53 41 1 22 ## NatAm 13 41 46 0 10 ## Other 0 1 0 0 0 ## White 5 22 10 0 4 fauxmodel.04 &lt;- ergm(mesa ~edges + nodematch(&#39;Grade&#39;,diff=T) ) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. summary(fauxmodel.04) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: mesa ~ edges + nodematch(&quot;Grade&quot;, diff = T) ## ## Iterations: 8 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -6.0340 0.1583 0 -38.117 &lt;1e-04 *** ## nodematch.Grade.7 2.8471 0.1973 0 14.427 &lt;1e-04 *** ## nodematch.Grade.8 2.9145 0.2381 0 12.240 &lt;1e-04 *** ## nodematch.Grade.9 2.4385 0.2641 0 9.234 &lt;1e-04 *** ## nodematch.Grade.10 2.5579 0.3736 0 6.846 &lt;1e-04 *** ## nodematch.Grade.11 3.3104 0.2962 0 11.176 &lt;1e-04 *** ## nodematch.Grade.12 3.7315 0.4565 0 8.174 &lt;1e-04 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 28987 on 20910 degrees of freedom ## Residual Deviance: 1928 on 20903 degrees of freedom ## ## AIC: 1942 BIC: 1998 (Smaller is better.) fauxmodel.04 &lt;- ergm(mesa ~edges + nodematch(&#39;Grade&#39;,diff=T,keep=c(2,4)) ) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. summary(fauxmodel.04) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: mesa ~ edges + nodematch(&quot;Grade&quot;, diff = T, keep = c(2, 4)) ## ## Iterations: 7 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -4.80539 0.07913 0 -60.727 &lt; 1e-04 *** ## nodematch.Grade.8 1.68584 0.19469 0 8.659 &lt; 1e-04 *** ## nodematch.Grade.10 1.32930 0.34758 0 3.824 0.000131 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 28987 on 20910 degrees of freedom ## Residual Deviance: 2225 on 20907 degrees of freedom ## ## AIC: 2231 BIC: 2255 (Smaller is better.) fauxmodel.05 &lt;- ergm(mesa ~edges + nodematch(&#39;Grade&#39;,diff=T)+ nodematch(&#39;Race&#39;,diff=T) ) ## Observed statistic(s) nodematch.Race.Black and nodematch.Race.Other are at their smallest attainable values. Their coefficients will be fixed at -Inf. ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. summary(fauxmodel.05) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: mesa ~ edges + nodematch(&quot;Grade&quot;, diff = T) + nodematch(&quot;Race&quot;, ## diff = T) ## ## Iterations: 8 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -6.2328 0.1742 0 -35.785 &lt;1e-04 *** ## nodematch.Grade.7 2.8740 0.1981 0 14.509 &lt;1e-04 *** ## nodematch.Grade.8 2.8788 0.2391 0 12.038 &lt;1e-04 *** ## nodematch.Grade.9 2.4642 0.2647 0 9.310 &lt;1e-04 *** ## nodematch.Grade.10 2.5692 0.3770 0 6.815 &lt;1e-04 *** ## nodematch.Grade.11 3.2921 0.2978 0 11.057 &lt;1e-04 *** ## nodematch.Grade.12 3.8376 0.4592 0 8.357 &lt;1e-04 *** ## nodematch.Race.Black -Inf 0.0000 0 -Inf &lt;1e-04 *** ## nodematch.Race.Hisp 0.0679 0.1737 0 0.391 0.6959 ## nodematch.Race.NatAm 0.9817 0.1842 0 5.329 &lt;1e-04 *** ## nodematch.Race.Other -Inf 0.0000 0 -Inf &lt;1e-04 *** ## nodematch.Race.White 1.2685 0.5371 0 2.362 0.0182 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 28987 on 20910 degrees of freedom ## Residual Deviance: 1928 on 20898 degrees of freedom ## ## AIC: 1952 BIC: 2047 (Smaller is better.) ## ## Warning: The following terms have infinite coefficient estimates: ## nodematch.Race.Black nodematch.Race.Other mixingmatrix(mesa,&quot;Race&quot;) ## Note: Marginal totals can be misleading ## for undirected mixing matrices. ## Black Hisp NatAm Other White ## Black 0 8 13 0 5 ## Hisp 8 53 41 1 22 ## NatAm 13 41 46 0 10 ## Other 0 1 0 0 0 ## White 5 22 10 0 4 3.4.3.12 directed network samplk3 ## Network attributes: ## vertices = 18 ## directed = TRUE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges= 56 ## missing edges= 0 ## non-missing edges= 56 ## ## Vertex attribute names: ## cloisterville group vertex.names ## ## No edge attributes set.seed(1) plot(samplk3) 3.4.3.13 Include mutual sampmodel.01 &lt;- ergm(samplk3~edges+mutual) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Starting Monte Carlo maximum likelihood estimation (MCMLE): ## Iteration 1 of at most 20: ## Optimizing with step length 1. ## The log-likelihood improved by 0.0002847. ## Step length converged once. Increasing MCMC sample size. ## Iteration 2 of at most 20: ## Optimizing with step length 1. ## The log-likelihood improved by 0.001122. ## Step length converged twice. Stopping. ## Finished MCMLE. ## Evaluating log-likelihood at the estimate. Using 20 bridges: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 . ## This model was fit using MCMC. To examine model diagnostics and check for degeneracy, use the mcmc.diagnostics() function. summary(sampmodel.01) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: samplk3 ~ edges + mutual ## ## Iterations: 2 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -2.1505 0.2152 0 -9.993 &lt;1e-04 *** ## mutual 2.2849 0.4684 0 4.878 &lt;1e-04 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 424.2 on 306 degrees of freedom ## Residual Deviance: 268.0 on 304 degrees of freedom ## ## AIC: 272 BIC: 279.5 (Smaller is better.) Strong mutual effect. 3.4.3.14 Include sender, receiver, mutual p1 model sampmodel.02 &lt;- ergm(samplk3~ edges + sender + receiver + mutual) ## Observed statistic(s) receiver10 are at their smallest attainable values. Their coefficients will be fixed at -Inf. ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Starting Monte Carlo maximum likelihood estimation (MCMLE): ## Iteration 1 of at most 20: ## Optimizing with step length 1. ## The log-likelihood improved by 1.081. ## Step length converged once. Increasing MCMC sample size. ## Iteration 2 of at most 20: ## Optimizing with step length 1. ## The log-likelihood improved by 0.08992. ## Step length converged twice. Stopping. ## Finished MCMLE. ## Evaluating log-likelihood at the estimate. Using 20 bridges: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 . ## This model was fit using MCMC. To examine model diagnostics and check for degeneracy, use the mcmc.diagnostics() function. summary(sampmodel.02) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: samplk3 ~ edges + sender + receiver + mutual ## ## Iterations: 2 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -2.315741 0.796090 0 -2.909 0.00363 ** ## sender2 -0.438628 1.092996 0 -0.401 0.68819 ## sender3 0.776450 1.093259 0 0.710 0.47757 ## sender4 -0.008577 1.115291 0 -0.008 0.99386 ## sender5 -0.452058 1.134888 0 -0.398 0.69039 ## sender6 0.502989 1.095639 0 0.459 0.64617 ## sender7 -0.252892 1.103350 0 -0.229 0.81871 ## sender8 0.529555 1.111692 0 0.476 0.63382 ## sender9 0.005037 1.122952 0 0.004 0.99642 ## sender10 1.457053 1.055864 0 1.380 0.16760 ## sender11 0.534553 1.100976 0 0.486 0.62730 ## sender12 -0.446945 1.125660 0 -0.397 0.69133 ## sender13 0.530122 1.107423 0 0.479 0.63215 ## sender14 0.529945 1.117297 0 0.474 0.63528 ## sender15 0.508301 1.123175 0 0.453 0.65087 ## sender16 0.793735 1.081730 0 0.734 0.46309 ## sender17 0.526922 1.107444 0 0.476 0.63422 ## sender18 0.235750 1.103263 0 0.214 0.83079 ## receiver2 0.772420 0.896048 0 0.862 0.38867 ## receiver3 -0.739738 0.996962 0 -0.742 0.45809 ## receiver4 0.017002 0.951789 0 0.018 0.98575 ## receiver5 0.766819 0.911852 0 0.841 0.40038 ## receiver6 -1.087262 1.114647 0 -0.975 0.32935 ## receiver7 0.412868 0.901948 0 0.458 0.64713 ## receiver8 -1.111177 1.098415 0 -1.012 0.31172 ## receiver9 -0.001184 0.951954 0 -0.001 0.99901 ## receiver10 -Inf 0.000000 0 -Inf &lt; 1e-04 *** ## receiver11 -1.089252 1.082136 0 -1.007 0.31414 ## receiver12 0.755936 0.907398 0 0.833 0.40480 ## receiver13 -1.107780 1.098538 0 -1.008 0.31326 ## receiver14 -1.092423 1.110361 0 -0.984 0.32519 ## receiver15 -1.111820 1.099080 0 -1.012 0.31173 ## receiver16 -2.004070 1.347086 0 -1.488 0.13683 ## receiver17 -1.096807 1.109898 0 -0.988 0.32305 ## receiver18 -0.480288 1.012901 0 -0.474 0.63538 ## mutual 3.153694 0.636817 0 4.952 &lt; 1e-04 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 424.2 on 306 degrees of freedom ## Residual Deviance: NaN on 270 degrees of freedom ## ## AIC: NaN BIC: NaN (Smaller is better.) ## ## Warning: The following terms have infinite coefficient estimates: ## receiver10 sna::degree(samplk3,cmode = &quot;indegree&quot;) ## [1] 4 6 3 4 6 2 5 2 4 0 2 6 2 2 2 1 2 3 3.4.3.15 Other ergm-terms Details of other ergm-terms see https://www.jstatsoft.org/article/view/v024i04. 3.4.4 Missing edges Make sure to set missing edges as NA: probability of an edge in the observed sample. missnet=flomarriage missnet[1,2]=missnet[2,4]=missnet[5,6]=NA # originally are 0 summary(ergm(missnet~edges)) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: missnet ~ edges ## ## Iterations: 5 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -1.5790 0.2456 0 -6.43 &lt;1e-04 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 162.2 on 117 degrees of freedom ## Residual Deviance: 107.0 on 116 degrees of freedom ## ## AIC: 109 BIC: 111.8 (Smaller is better.) summary(ergm(flomarriage~edges)) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Stopping at the initial estimate. ## Evaluating log-likelihood at the estimate. ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: flomarriage ~ edges ## ## Iterations: 5 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -1.6094 0.2449 0 -6.571 &lt;1e-04 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 166.4 on 120 degrees of freedom ## Residual Deviance: 108.1 on 119 degrees of freedom ## ## AIC: 110.1 BIC: 112.9 (Smaller is better.) #Set NA 1/(1+exp(-(-1.5790))) ## [1] 0.1709372 20/(choose(16,2)-3) ## [1] 0.1709402 #Set 0 1/(1+exp(-(-1.6094))) ## [1] 0.1666719 20/(choose(16,2)) ## [1] 0.1666667 3.5 simulate netowrks from an ergm model fit The ergm model defines a probability distibution across all networks of this size(#nodes fixed). Use simulate(ergm-model,nsim=n) to get a list of networks Use summary and functions that can be used to a list summary(flomodel.04) ## ## ========================== ## Summary of model fit ## ========================== ## ## Formula: flomarriage ~ edges + absdiff(&quot;wealth&quot;) ## ## Iterations: 4 out of 20 ## ## Monte Carlo MLE Results: ## Estimate Std. Error MCMC % z value Pr(&gt;|z|) ## edges -2.302042 0.401906 0 -5.728 &lt;1e-04 *** ## absdiff.wealth 0.015519 0.006157 0 2.521 0.0117 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Null Deviance: 166.4 on 120 degrees of freedom ## Residual Deviance: 102.0 on 118 degrees of freedom ## ## AIC: 106 BIC: 111.5 (Smaller is better.) flomodel.04.sim &lt;- simulate(flomodel.04, nsim=10,seed = 1) ## Warning: You appear to be calling simulate.formula() directly. ## simulate.formula() is a method, and will not be exported in a future ## version of &#39;ergm&#39;. Use simulate() instead, or getS3method() if absolutely ## necessary. class(flomodel.04.sim) ## [1] &quot;network.list&quot; summary(flomodel.04.sim) ## Number of Networks: 10 ## Model: flomarriage ~ edges + absdiff(&quot;wealth&quot;) ## Reference: ~Bernoulli ## Constraints: ~. ## Parameters: ## edges absdiff.wealth ## -2.3020421 0.0155192 ## ## Stored network statistics: ## edges absdiff.wealth ## [1,] 20 1070 ## [2,] 22 1170 ## [3,] 19 734 ## [4,] 18 1123 ## [5,] 18 1215 ## [6,] 15 697 ## [7,] 20 1165 ## [8,] 31 1577 ## [9,] 19 1138 ## [10,] 22 1136 ## Number of Networks: 10 ## Model: flomarriage ~ edges + absdiff(&quot;wealth&quot;) ## Reference: ~Bernoulli ## Constraints: ~. ## Parameters: ## edges absdiff.wealth ## -2.3020421 0.0155192 length(flomodel.04.sim) ## [1] 10 flomodel.04.sim[[4]] ## Network attributes: ## vertices = 16 ## directed = FALSE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges= 18 ## missing edges= 0 ## non-missing edges= 18 ## ## Vertex attribute names: ## priorates totalties vertex.names wealth ## ## No edge attributes plot(flomodel.04.sim[[4]], label= flomodel.04.sim[[4]] %v% &quot;vertex.names&quot;) flomarriage ## Network attributes: ## vertices = 16 ## directed = FALSE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges= 20 ## missing edges= 0 ## non-missing edges= 20 ## ## Vertex attribute names: ## priorates totalties vertex.names wealth ## ## No edge attributes formula: Specify your own model basis: initial network for MC control: settings of MCMC basenet &lt;- network(16,density=0.1,directed=FALSE) g.sim &lt;- simulate(flomarriage ~ edges + kstar(2), nsim=1000, coef=c(-1.8,0.03), basis=basenet, control=control.simulate(MCMC.burnin=1000, MCMC.interval=10)) # MCMC.interval: Number of proposals between sampled statistics. length(g.sim) ## [1] 1000 ?simulate.ergm 3.6 Check the goodness of fit AIC,BIC; Deviance; Goodness of fit: gof MCMC diagnostics: mcmc.diagnostics 3.6.1 gof gof(model~model+degree+esp+distance) Only four possible arguments for ergm-term: model: all the terms included in the model degree: degree (node level) esp: edgwise share partners (edge level) distance: geodesic distances (dyad level) Draw samples from the specified model, calculate the MC p-value based on the distribution generated by the samples. flo.04.gof.model=gof(flomodel.04~model+degree+esp+distance) flo.04.gof.model ## ## Goodness-of-fit for model statistics ## ## obs min mean max MC p-value ## edges 20 12 20.22 30 1.00 ## absdiff.wealth 1146 565 1142.44 1841 0.96 ## ## Goodness-of-fit for degree ## ## obs min mean max MC p-value ## 0 1 0 1.24 5 1.00 ## 1 4 0 3.15 8 0.74 ## 2 2 0 4.51 9 0.24 ## 3 6 0 3.32 7 0.18 ## 4 2 0 2.01 6 1.00 ## 5 0 0 0.91 4 0.72 ## 6 1 0 0.50 3 0.82 ## 7 0 0 0.22 2 1.00 ## 8 0 0 0.10 1 1.00 ## 9 0 0 0.02 1 1.00 ## 10 0 0 0.02 1 1.00 ## ## Goodness-of-fit for edgewise shared partner ## ## obs min mean max MC p-value ## esp0 12 5 12.39 23 1.00 ## esp1 7 0 5.99 14 0.94 ## esp2 1 0 1.60 12 1.00 ## esp3 0 0 0.19 4 1.00 ## esp4 0 0 0.05 1 1.00 ## ## Goodness-of-fit for minimum geodesic distance ## ## obs min mean max MC p-value ## 1 20 12 20.22 30 1.00 ## 2 35 15 35.01 58 1.00 ## 3 32 4 26.70 41 0.58 ## 4 15 0 11.11 24 0.60 ## 5 3 0 3.35 14 1.00 ## 6 0 0 0.89 11 1.00 ## 7 0 0 0.21 6 1.00 ## 8 0 0 0.06 3 1.00 ## 9 0 0 0.02 2 1.00 ## Inf 15 0 22.43 73 1.00 names(flo.04.gof.model) ## [1] &quot;network.size&quot; &quot;GOF&quot; &quot;pval.model&quot; &quot;summary.model&quot; ## [5] &quot;pobs.model&quot; &quot;psim.model&quot; &quot;bds.model&quot; &quot;obs.model&quot; ## [9] &quot;sim.model&quot; &quot;pval.dist&quot; &quot;summary.dist&quot; &quot;pobs.dist&quot; ## [13] &quot;psim.dist&quot; &quot;bds.dist&quot; &quot;obs.dist&quot; &quot;sim.dist&quot; ## [17] &quot;pval.deg&quot; &quot;summary.deg&quot; &quot;pobs.deg&quot; &quot;psim.deg&quot; ## [21] &quot;bds.deg&quot; &quot;obs.deg&quot; &quot;sim.deg&quot; &quot;pval.espart&quot; ## [25] &quot;summary.espart&quot; &quot;pobs.espart&quot; &quot;psim.espart&quot; &quot;bds.espart&quot; ## [29] &quot;obs.espart&quot; &quot;sim.espart&quot; #95% confidence interval plot(flo.04.gof.model) 3.6.2 mcmc.diagnostics Check the MCMC #install.packages(&quot;latticeExtra&quot;) fit &lt;- ergm(flobusiness ~ edges+degree(1)) ## Starting maximum pseudolikelihood estimation (MPLE): ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Starting Monte Carlo maximum likelihood estimation (MCMLE): ## Iteration 1 of at most 20: ## Optimizing with step length 1. ## The log-likelihood improved by 0.2425. ## Step length converged once. Increasing MCMC sample size. ## Iteration 2 of at most 20: ## Optimizing with step length 1. ## The log-likelihood improved by 0.001113. ## Step length converged twice. Stopping. ## Finished MCMLE. ## Evaluating log-likelihood at the estimate. Using 20 bridges: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 . ## This model was fit using MCMC. To examine model diagnostics and check for degeneracy, use the mcmc.diagnostics() function. mcmc.diagnostics(fit) #centered ## Sample statistics summary: ## ## Iterations = 16384:4209664 ## Thinning interval = 1024 ## Number of chains = 1 ## Sample size per chain = 4096 ## ## 1. Empirical mean and standard deviation for each variable, ## plus standard error of the mean: ## ## Mean SD Naive SE Time-series SE ## edges -0.12183 3.766 0.05884 0.05884 ## degree1 0.07349 1.634 0.02553 0.02553 ## ## 2. Quantiles for each variable: ## ## 2.5% 25% 50% 75% 97.5% ## edges -7 -3 0 2 7 ## degree1 -4 -1 0 1 3 ## ## ## Sample statistics cross-correlations: ## edges degree1 ## edges 1.0000 -0.4341 ## degree1 -0.4341 1.0000 ## ## Sample statistics auto-correlation: ## Chain 1 ## edges degree1 ## Lag 0 1.000000000 1.000000000 ## Lag 1024 0.006760343 0.001466041 ## Lag 2048 0.008602875 -0.006057681 ## Lag 3072 -0.018218817 -0.011568388 ## Lag 4096 0.028773889 -0.015764465 ## Lag 5120 -0.015302900 -0.004412151 ## ## Sample statistics burn-in diagnostic (Geweke): ## Chain 1 ## ## Fraction in 1st window = 0.1 ## Fraction in 2nd window = 0.5 ## ## edges degree1 ## 0.9156 -0.5825 ## ## Individual P-values (lower = worse): ## edges degree1 ## 0.3598522 0.5602179 ## Joint P-value (lower = worse): 0.6503828 . ## Warning in formals(fun): argument is not a function ## ## MCMC diagnostics shown here are from the last round of simulation, prior to computation of final parameter estimates. Because the final estimates are refinements of those used for this simulation run, these diagnostics may understate model performance. To directly assess the performance of the final model on in-model statistics, please use the GOF command: gof(ergmFitObject, GOF=~model). Interpretation on mcmc.diagnostics: Good example. Mixing well: MCMC sample statistics are varying randomly around the observed values at each step Bell-shaped centered at 0. The difference between the observed and simulated values of the sample statistics have a roughly bell-shaped distribution, centered at 0. Notice the sawtooth pattern is due to the discrete values. The sawtooth pattern visible on the degree term deviation plot is due to the combination of discrete values and small range in the statistics: the observed number of degree 1 nodes is 3, and only a few discrete values are produced by the simulations. Bad example: Figure 3.1: Example from Tutorial 3.7 More functions Figure 3.2: Example from Tutorial "],
["collect-network-data-and-api-requests.html", "Chapter 4 Collect network data and API requests 4.1 Several useful websites 4.2 Web scraping 4.3 Preparation 4.4 Twitter API request 4.5 Other APIs 4.6 API request directly from R", " Chapter 4 Collect network data and API requests 4.1 Several useful websites Papers, reviews, dataset, software (tutorial) Katherine’s webpage Kaggle dataworld 4.2 Web scraping Web APIs (application programming interface): website offers a set of structured http requests that return JSON or XML files. R packages: rtweet (twitter), Rfacebook (facebook), RedditExtractoR (reddit), imdbapi (IMDB), omdbapi(The Open Movie Database). Using rtweet to make API requests Construct Retweet networks Construct Friendship networks API request from R. rjson (map JSON file to datafram),rvest (web scrapping). 4.3 Preparation library(dplyr) library(igraph) library(purrr) library(&quot;stringr&quot;) 4.4 Twitter API request 4.4.1 R package rtweet Official website: https://rtweet.info/index.html Explore the official websites to find more info. All the functions Tutorial FAQ (possible issues) Good documentation; Recommended over another R package twitteR. 4.4.2 Preparation #install.packages(&quot;rtweet&quot;) library(&quot;rtweet&quot;) 4.4.3 API authorization Follow https://rtweet.info/articles/auth.html Create a Twitter App Authorization via access token: create_token() automatically saves your token as an environment variable, you’ll be set for future sessions as well! #save your token as an environment variable for you create_token( app = &quot;your_research_app&quot;, consumer_key = &quot;consumer_API_key&quot;, consumer_secret = &quot;consumer_API_secret_key&quot;, access_token = &quot;access_token&quot;, access_secret = &quot;access_token_secret&quot;) 4.4.4 rtweet API request Tweeter Developer Send a request specifying parameters; Get response in JSON format search_tweets: sampling from tweets in past 7 days matching keywords (specified # of tweets) – recent/popular/mixed stream_tweets: sampling/keyword-filter/user-track/geo-location live stream for future time period;(specified time period) 4.4.4.1 search_tweets limiting searches to 10 keywords and operators only past 6-9 days of Tweets Parameters: help() or see https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets q: Query to be searched. Spaces/AND – both (“data science”;“data AND science”); OR – either or (data OR science); ’&quot;“’ – exact (‘“data science”’;”&quot;data science&quot;&quot;); “#datascience” – track hashtag; “@duke” – track at. More about operators n: total number of desired tweets. At most 18,000 in a single call; For \\(&gt;\\) 18,000, retryonratelimit=TRUE type: “recent”,“popular”,“mixed” include_rts: whether to include retweets geocode: “latitude,longitude,radius” lang: language parse: TRUE(dateframe); FALSE(list) rt &lt;- search_tweets( q=&quot;#dukebasketball&quot;, #Query to be searched n = 10, include_rts=FALSE, result_type=&quot;recent&quot;, geocode = &quot;36.00,-78.94,5mi&quot; ) ## Searching for tweets... ## Finished collecting tweets! rt ## # A tibble: 4 x 88 ## user_id status_id created_at screen_name text source ## &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 109257… 11208030… 2019-04-23 21:34:08 rj5nation &quot;Do … Twitt… ## 2 109257… 11200524… 2019-04-21 19:51:29 rj5nation &quot;Tag… Twitt… ## 3 109257… 11196528… 2019-04-20 17:23:31 rj5nation &quot;NBA… Twitt… ## 4 202752… 11207366… 2019-04-23 17:10:09 BlueBloodR… &quot;#Re… Insta… ## # … with 82 more variables: display_text_width &lt;dbl&gt;, ## # reply_to_status_id &lt;lgl&gt;, reply_to_user_id &lt;lgl&gt;, ## # reply_to_screen_name &lt;lgl&gt;, is_quote &lt;lgl&gt;, is_retweet &lt;lgl&gt;, ## # favorite_count &lt;int&gt;, retweet_count &lt;int&gt;, hashtags &lt;list&gt;, ## # symbols &lt;list&gt;, urls_url &lt;list&gt;, urls_t.co &lt;list&gt;, ## # urls_expanded_url &lt;list&gt;, media_url &lt;list&gt;, media_t.co &lt;list&gt;, ## # media_expanded_url &lt;list&gt;, media_type &lt;list&gt;, ext_media_url &lt;list&gt;, ## # ext_media_t.co &lt;list&gt;, ext_media_expanded_url &lt;list&gt;, ## # ext_media_type &lt;chr&gt;, mentions_user_id &lt;list&gt;, ## # mentions_screen_name &lt;list&gt;, lang &lt;chr&gt;, quoted_status_id &lt;chr&gt;, ## # quoted_text &lt;chr&gt;, quoted_created_at &lt;dttm&gt;, quoted_source &lt;chr&gt;, ## # quoted_favorite_count &lt;int&gt;, quoted_retweet_count &lt;int&gt;, ## # quoted_user_id &lt;chr&gt;, quoted_screen_name &lt;chr&gt;, quoted_name &lt;chr&gt;, ## # quoted_followers_count &lt;int&gt;, quoted_friends_count &lt;int&gt;, ## # quoted_statuses_count &lt;int&gt;, quoted_location &lt;chr&gt;, ## # quoted_description &lt;chr&gt;, quoted_verified &lt;lgl&gt;, ## # retweet_status_id &lt;chr&gt;, retweet_text &lt;chr&gt;, ## # retweet_created_at &lt;dttm&gt;, retweet_source &lt;chr&gt;, ## # retweet_favorite_count &lt;int&gt;, retweet_retweet_count &lt;int&gt;, ## # retweet_user_id &lt;chr&gt;, retweet_screen_name &lt;chr&gt;, retweet_name &lt;chr&gt;, ## # retweet_followers_count &lt;int&gt;, retweet_friends_count &lt;int&gt;, ## # retweet_statuses_count &lt;int&gt;, retweet_location &lt;chr&gt;, ## # retweet_description &lt;chr&gt;, retweet_verified &lt;lgl&gt;, place_url &lt;chr&gt;, ## # place_name &lt;chr&gt;, place_full_name &lt;chr&gt;, place_type &lt;chr&gt;, ## # country &lt;chr&gt;, country_code &lt;chr&gt;, geo_coords &lt;list&gt;, ## # coords_coords &lt;list&gt;, bbox_coords &lt;list&gt;, status_url &lt;chr&gt;, ## # name &lt;chr&gt;, location &lt;chr&gt;, description &lt;chr&gt;, url &lt;chr&gt;, ## # protected &lt;lgl&gt;, followers_count &lt;int&gt;, friends_count &lt;int&gt;, ## # listed_count &lt;int&gt;, statuses_count &lt;int&gt;, favourites_count &lt;int&gt;, ## # account_created_at &lt;dttm&gt;, verified &lt;lgl&gt;, profile_url &lt;chr&gt;, ## # profile_expanded_url &lt;chr&gt;, account_lang &lt;chr&gt;, ## # profile_banner_url &lt;chr&gt;, profile_background_url &lt;chr&gt;, ## # profile_image_url &lt;chr&gt; rt &lt;- search_tweets( &quot;trump OR president&quot;, n = 10, lang = &quot;en&quot; ) ## Searching for tweets... ## Finished collecting tweets! rt ## # A tibble: 6 x 88 ## user_id status_id created_at screen_name text source ## &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 160955… 11229473… 2019-04-29 19:34:39 Ireneruby0… BREA… Twitt… ## 2 106135… 11229473… 2019-04-29 19:34:39 MikeBisson8 &quot;Joe… Twitt… ## 3 104652… 11229473… 2019-04-29 19:34:39 g_twang @den… Twitt… ## 4 305775… 11229473… 2019-04-29 19:34:39 EternalNik… At t… Twitt… ## 5 726916… 11229473… 2019-04-29 19:34:39 Warakuna &quot;@St… Twitt… ## 6 106948… 11229473… 2019-04-29 19:34:39 DianeGroot… &quot;Rab… Twitt… ## # … with 82 more variables: display_text_width &lt;dbl&gt;, ## # reply_to_status_id &lt;chr&gt;, reply_to_user_id &lt;chr&gt;, ## # reply_to_screen_name &lt;chr&gt;, is_quote &lt;lgl&gt;, is_retweet &lt;lgl&gt;, ## # favorite_count &lt;int&gt;, retweet_count &lt;int&gt;, hashtags &lt;list&gt;, ## # symbols &lt;list&gt;, urls_url &lt;list&gt;, urls_t.co &lt;list&gt;, ## # urls_expanded_url &lt;list&gt;, media_url &lt;list&gt;, media_t.co &lt;list&gt;, ## # media_expanded_url &lt;list&gt;, media_type &lt;list&gt;, ext_media_url &lt;list&gt;, ## # ext_media_t.co &lt;list&gt;, ext_media_expanded_url &lt;list&gt;, ## # ext_media_type &lt;chr&gt;, mentions_user_id &lt;list&gt;, ## # mentions_screen_name &lt;list&gt;, lang &lt;chr&gt;, quoted_status_id &lt;chr&gt;, ## # quoted_text &lt;chr&gt;, quoted_created_at &lt;dttm&gt;, quoted_source &lt;chr&gt;, ## # quoted_favorite_count &lt;int&gt;, quoted_retweet_count &lt;int&gt;, ## # quoted_user_id &lt;chr&gt;, quoted_screen_name &lt;chr&gt;, quoted_name &lt;chr&gt;, ## # quoted_followers_count &lt;int&gt;, quoted_friends_count &lt;int&gt;, ## # quoted_statuses_count &lt;int&gt;, quoted_location &lt;chr&gt;, ## # quoted_description &lt;chr&gt;, quoted_verified &lt;lgl&gt;, ## # retweet_status_id &lt;chr&gt;, retweet_text &lt;chr&gt;, ## # retweet_created_at &lt;dttm&gt;, retweet_source &lt;chr&gt;, ## # retweet_favorite_count &lt;int&gt;, retweet_retweet_count &lt;int&gt;, ## # retweet_user_id &lt;chr&gt;, retweet_screen_name &lt;chr&gt;, retweet_name &lt;chr&gt;, ## # retweet_followers_count &lt;int&gt;, retweet_friends_count &lt;int&gt;, ## # retweet_statuses_count &lt;int&gt;, retweet_location &lt;chr&gt;, ## # retweet_description &lt;chr&gt;, retweet_verified &lt;lgl&gt;, place_url &lt;chr&gt;, ## # place_name &lt;chr&gt;, place_full_name &lt;chr&gt;, place_type &lt;chr&gt;, ## # country &lt;chr&gt;, country_code &lt;chr&gt;, geo_coords &lt;list&gt;, ## # coords_coords &lt;list&gt;, bbox_coords &lt;list&gt;, status_url &lt;chr&gt;, ## # name &lt;chr&gt;, location &lt;chr&gt;, description &lt;chr&gt;, url &lt;lgl&gt;, ## # protected &lt;lgl&gt;, followers_count &lt;int&gt;, friends_count &lt;int&gt;, ## # listed_count &lt;int&gt;, statuses_count &lt;int&gt;, favourites_count &lt;int&gt;, ## # account_created_at &lt;dttm&gt;, verified &lt;lgl&gt;, profile_url &lt;chr&gt;, ## # profile_expanded_url &lt;chr&gt;, account_lang &lt;chr&gt;, ## # profile_banner_url &lt;chr&gt;, profile_background_url &lt;chr&gt;, ## # profile_image_url &lt;chr&gt; search_tweets( q=&quot;#dukebasketball&quot;, #Query to be searched n = 10, include_rts=FALSE, result_type=&quot;recent&quot;, geocode = &quot;36.00,-78.94,5mi&quot; ) ## Searching for tweets... ## Finished collecting tweets! ## # A tibble: 4 x 88 ## user_id status_id created_at screen_name text source ## &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 109257… 11208030… 2019-04-23 21:34:08 rj5nation &quot;Do … Twitt… ## 2 109257… 11200524… 2019-04-21 19:51:29 rj5nation &quot;Tag… Twitt… ## 3 109257… 11196528… 2019-04-20 17:23:31 rj5nation &quot;NBA… Twitt… ## 4 202752… 11207366… 2019-04-23 17:10:09 BlueBloodR… &quot;#Re… Insta… ## # … with 82 more variables: display_text_width &lt;dbl&gt;, ## # reply_to_status_id &lt;lgl&gt;, reply_to_user_id &lt;lgl&gt;, ## # reply_to_screen_name &lt;lgl&gt;, is_quote &lt;lgl&gt;, is_retweet &lt;lgl&gt;, ## # favorite_count &lt;int&gt;, retweet_count &lt;int&gt;, hashtags &lt;list&gt;, ## # symbols &lt;list&gt;, urls_url &lt;list&gt;, urls_t.co &lt;list&gt;, ## # urls_expanded_url &lt;list&gt;, media_url &lt;list&gt;, media_t.co &lt;list&gt;, ## # media_expanded_url &lt;list&gt;, media_type &lt;list&gt;, ext_media_url &lt;list&gt;, ## # ext_media_t.co &lt;list&gt;, ext_media_expanded_url &lt;list&gt;, ## # ext_media_type &lt;chr&gt;, mentions_user_id &lt;list&gt;, ## # mentions_screen_name &lt;list&gt;, lang &lt;chr&gt;, quoted_status_id &lt;chr&gt;, ## # quoted_text &lt;chr&gt;, quoted_created_at &lt;dttm&gt;, quoted_source &lt;chr&gt;, ## # quoted_favorite_count &lt;int&gt;, quoted_retweet_count &lt;int&gt;, ## # quoted_user_id &lt;chr&gt;, quoted_screen_name &lt;chr&gt;, quoted_name &lt;chr&gt;, ## # quoted_followers_count &lt;int&gt;, quoted_friends_count &lt;int&gt;, ## # quoted_statuses_count &lt;int&gt;, quoted_location &lt;chr&gt;, ## # quoted_description &lt;chr&gt;, quoted_verified &lt;lgl&gt;, ## # retweet_status_id &lt;chr&gt;, retweet_text &lt;chr&gt;, ## # retweet_created_at &lt;dttm&gt;, retweet_source &lt;chr&gt;, ## # retweet_favorite_count &lt;int&gt;, retweet_retweet_count &lt;int&gt;, ## # retweet_user_id &lt;chr&gt;, retweet_screen_name &lt;chr&gt;, retweet_name &lt;chr&gt;, ## # retweet_followers_count &lt;int&gt;, retweet_friends_count &lt;int&gt;, ## # retweet_statuses_count &lt;int&gt;, retweet_location &lt;chr&gt;, ## # retweet_description &lt;chr&gt;, retweet_verified &lt;lgl&gt;, place_url &lt;chr&gt;, ## # place_name &lt;chr&gt;, place_full_name &lt;chr&gt;, place_type &lt;chr&gt;, ## # country &lt;chr&gt;, country_code &lt;chr&gt;, geo_coords &lt;list&gt;, ## # coords_coords &lt;list&gt;, bbox_coords &lt;list&gt;, status_url &lt;chr&gt;, ## # name &lt;chr&gt;, location &lt;chr&gt;, description &lt;chr&gt;, url &lt;chr&gt;, ## # protected &lt;lgl&gt;, followers_count &lt;int&gt;, friends_count &lt;int&gt;, ## # listed_count &lt;int&gt;, statuses_count &lt;int&gt;, favourites_count &lt;int&gt;, ## # account_created_at &lt;dttm&gt;, verified &lt;lgl&gt;, profile_url &lt;chr&gt;, ## # profile_expanded_url &lt;chr&gt;, account_lang &lt;chr&gt;, ## # profile_banner_url &lt;chr&gt;, profile_background_url &lt;chr&gt;, ## # profile_image_url &lt;chr&gt; dataframe: each row a tweet users_data: only extract user-related column ts_plot lat_lng ## search for 18000 tweets using the rstats hashtag rt &lt;- search_tweets( &quot;#dukebasketball&quot;, n = 50000, include_rts = FALSE, geocode = &quot;36.00,-78.94,2000mi&quot; ) ## Searching for tweets... ## This may take a few seconds... ## Finished collecting tweets! rt_dmbb=rt class(rt) ## [1] &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; ## preview tweets data names(rt) ## [1] &quot;user_id&quot; &quot;status_id&quot; ## [3] &quot;created_at&quot; &quot;screen_name&quot; ## [5] &quot;text&quot; &quot;source&quot; ## [7] &quot;display_text_width&quot; &quot;reply_to_status_id&quot; ## [9] &quot;reply_to_user_id&quot; &quot;reply_to_screen_name&quot; ## [11] &quot;is_quote&quot; &quot;is_retweet&quot; ## [13] &quot;favorite_count&quot; &quot;retweet_count&quot; ## [15] &quot;hashtags&quot; &quot;symbols&quot; ## [17] &quot;urls_url&quot; &quot;urls_t.co&quot; ## [19] &quot;urls_expanded_url&quot; &quot;media_url&quot; ## [21] &quot;media_t.co&quot; &quot;media_expanded_url&quot; ## [23] &quot;media_type&quot; &quot;ext_media_url&quot; ## [25] &quot;ext_media_t.co&quot; &quot;ext_media_expanded_url&quot; ## [27] &quot;ext_media_type&quot; &quot;mentions_user_id&quot; ## [29] &quot;mentions_screen_name&quot; &quot;lang&quot; ## [31] &quot;quoted_status_id&quot; &quot;quoted_text&quot; ## [33] &quot;quoted_created_at&quot; &quot;quoted_source&quot; ## [35] &quot;quoted_favorite_count&quot; &quot;quoted_retweet_count&quot; ## [37] &quot;quoted_user_id&quot; &quot;quoted_screen_name&quot; ## [39] &quot;quoted_name&quot; &quot;quoted_followers_count&quot; ## [41] &quot;quoted_friends_count&quot; &quot;quoted_statuses_count&quot; ## [43] &quot;quoted_location&quot; &quot;quoted_description&quot; ## [45] &quot;quoted_verified&quot; &quot;retweet_status_id&quot; ## [47] &quot;retweet_text&quot; &quot;retweet_created_at&quot; ## [49] &quot;retweet_source&quot; &quot;retweet_favorite_count&quot; ## [51] &quot;retweet_retweet_count&quot; &quot;retweet_user_id&quot; ## [53] &quot;retweet_screen_name&quot; &quot;retweet_name&quot; ## [55] &quot;retweet_followers_count&quot; &quot;retweet_friends_count&quot; ## [57] &quot;retweet_statuses_count&quot; &quot;retweet_location&quot; ## [59] &quot;retweet_description&quot; &quot;retweet_verified&quot; ## [61] &quot;place_url&quot; &quot;place_name&quot; ## [63] &quot;place_full_name&quot; &quot;place_type&quot; ## [65] &quot;country&quot; &quot;country_code&quot; ## [67] &quot;geo_coords&quot; &quot;coords_coords&quot; ## [69] &quot;bbox_coords&quot; &quot;status_url&quot; ## [71] &quot;name&quot; &quot;location&quot; ## [73] &quot;description&quot; &quot;url&quot; ## [75] &quot;protected&quot; &quot;followers_count&quot; ## [77] &quot;friends_count&quot; &quot;listed_count&quot; ## [79] &quot;statuses_count&quot; &quot;favourites_count&quot; ## [81] &quot;account_created_at&quot; &quot;verified&quot; ## [83] &quot;profile_url&quot; &quot;profile_expanded_url&quot; ## [85] &quot;account_lang&quot; &quot;profile_banner_url&quot; ## [87] &quot;profile_background_url&quot; &quot;profile_image_url&quot; ## preview users data users_data(rt)%&gt;%names() ## [1] &quot;user_id&quot; &quot;screen_name&quot; ## [3] &quot;name&quot; &quot;location&quot; ## [5] &quot;description&quot; &quot;url&quot; ## [7] &quot;protected&quot; &quot;followers_count&quot; ## [9] &quot;friends_count&quot; &quot;listed_count&quot; ## [11] &quot;statuses_count&quot; &quot;favourites_count&quot; ## [13] &quot;account_created_at&quot; &quot;verified&quot; ## [15] &quot;profile_url&quot; &quot;profile_expanded_url&quot; ## [17] &quot;account_lang&quot; &quot;profile_banner_url&quot; ## [19] &quot;profile_background_url&quot; &quot;profile_image_url&quot; ## plot time series (if ggplot2 is installed) ts_plot(rt) #Duke vs No. 16 Louisville 4.4.4.2 search_tweets2 Search different queries independently. Other parameters are the same. st2 &lt;- search_tweets2( c(&quot;\\&quot;data science\\&quot;&quot;, &quot;rstats OR python&quot;), n = 50 ) ## Searching for tweets... ## Finished collecting tweets! ## Searching for tweets... ## Finished collecting tweets! st2$query ## [1] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [4] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [7] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [10] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [13] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [16] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [19] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [22] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [25] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [28] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [31] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [34] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [37] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [40] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [43] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [46] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; ## [49] &quot;\\&quot;data science\\&quot;&quot; &quot;\\&quot;data science\\&quot;&quot; &quot;rstats OR python&quot; ## [52] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [55] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [58] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [61] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [64] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [67] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [70] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [73] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [76] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [79] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [82] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [85] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [88] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [91] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [94] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [97] &quot;rstats OR python&quot; &quot;rstats OR python&quot; &quot;rstats OR python&quot; ## [100] &quot;rstats OR python&quot; names(st2) ## [1] &quot;user_id&quot; &quot;status_id&quot; ## [3] &quot;created_at&quot; &quot;screen_name&quot; ## [5] &quot;text&quot; &quot;source&quot; ## [7] &quot;display_text_width&quot; &quot;reply_to_status_id&quot; ## [9] &quot;reply_to_user_id&quot; &quot;reply_to_screen_name&quot; ## [11] &quot;is_quote&quot; &quot;is_retweet&quot; ## [13] &quot;favorite_count&quot; &quot;retweet_count&quot; ## [15] &quot;hashtags&quot; &quot;symbols&quot; ## [17] &quot;urls_url&quot; &quot;urls_t.co&quot; ## [19] &quot;urls_expanded_url&quot; &quot;media_url&quot; ## [21] &quot;media_t.co&quot; &quot;media_expanded_url&quot; ## [23] &quot;media_type&quot; &quot;ext_media_url&quot; ## [25] &quot;ext_media_t.co&quot; &quot;ext_media_expanded_url&quot; ## [27] &quot;ext_media_type&quot; &quot;mentions_user_id&quot; ## [29] &quot;mentions_screen_name&quot; &quot;lang&quot; ## [31] &quot;quoted_status_id&quot; &quot;quoted_text&quot; ## [33] &quot;quoted_created_at&quot; &quot;quoted_source&quot; ## [35] &quot;quoted_favorite_count&quot; &quot;quoted_retweet_count&quot; ## [37] &quot;quoted_user_id&quot; &quot;quoted_screen_name&quot; ## [39] &quot;quoted_name&quot; &quot;quoted_followers_count&quot; ## [41] &quot;quoted_friends_count&quot; &quot;quoted_statuses_count&quot; ## [43] &quot;quoted_location&quot; &quot;quoted_description&quot; ## [45] &quot;quoted_verified&quot; &quot;retweet_status_id&quot; ## [47] &quot;retweet_text&quot; &quot;retweet_created_at&quot; ## [49] &quot;retweet_source&quot; &quot;retweet_favorite_count&quot; ## [51] &quot;retweet_retweet_count&quot; &quot;retweet_user_id&quot; ## [53] &quot;retweet_screen_name&quot; &quot;retweet_name&quot; ## [55] &quot;retweet_followers_count&quot; &quot;retweet_friends_count&quot; ## [57] &quot;retweet_statuses_count&quot; &quot;retweet_location&quot; ## [59] &quot;retweet_description&quot; &quot;retweet_verified&quot; ## [61] &quot;place_url&quot; &quot;place_name&quot; ## [63] &quot;place_full_name&quot; &quot;place_type&quot; ## [65] &quot;country&quot; &quot;country_code&quot; ## [67] &quot;geo_coords&quot; &quot;coords_coords&quot; ## [69] &quot;bbox_coords&quot; &quot;status_url&quot; ## [71] &quot;name&quot; &quot;location&quot; ## [73] &quot;description&quot; &quot;url&quot; ## [75] &quot;protected&quot; &quot;followers_count&quot; ## [77] &quot;friends_count&quot; &quot;listed_count&quot; ## [79] &quot;statuses_count&quot; &quot;favourites_count&quot; ## [81] &quot;account_created_at&quot; &quot;verified&quot; ## [83] &quot;profile_url&quot; &quot;profile_expanded_url&quot; ## [85] &quot;account_lang&quot; &quot;profile_banner_url&quot; ## [87] &quot;profile_background_url&quot; &quot;profile_image_url&quot; ## [89] &quot;query&quot; 4.4.4.3 Visualization research_tweets returns a dataframe. Visualization based on the dataframe. ts_plot: Creates a ggplot2 plot of the frequency of tweets over a specified interval of time. Using ggplot2; Map: Using lat_lng ## plot time series of tweets ts_plot(rt_dmbb, &quot;3 hours&quot;) + # a ggplot object ggplot2::theme_minimal() + # Add multiple layers directly ggplot2::theme(plot.title = ggplot2::element_text(face = &quot;bold&quot;)) + ggplot2::labs( x = NULL, y = NULL, title = &quot;Frequency of #dukebasketball Twitter statuses from past 6-9 days&quot;, subtitle = &quot;Twitter status (tweet) counts aggregated using three-hour intervals&quot;, caption = &quot;\\nSource: Data collected from Twitter&#39;s REST API via rtweet&quot; ) # an example using `groupby` with ggplot2 ts_plot(rt_dmbb%&gt;%dplyr::group_by(is_quote), &quot;3 hours&quot;) + # a ggplot object ggplot2::theme_minimal() #install.packages(&quot;maps&quot;) ## create lat/lng variables using all available tweet and profile geo-location data rt_dmbbll &lt;- lat_lng(rt_dmbb) names(rt_dmbbll)[!names(rt_dmbbll)%in%names(rt_dmbb)] ## [1] &quot;lat&quot; &quot;lng&quot; ## plot state boundaries par(mar = c(0, 0, 0, 0)) maps::map(&quot;state&quot;,&quot;north carolina&quot;, lwd = .25) ## plot lat and lng points onto state map with(rt_dmbbll, points(lng, lat, pch = 20, cex = .75, col = rgb(0, .3, .7, .75))) 4.4.4.4 stream_tweets https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets q Sampling a small random sample of all publicly available tweets q=&quot;&quot; Filtering via a search-like query (up to 400 keywords) q=&quot;duke,basketball&quot;. “,” separation Tracking via vector of user ids (up to 5000 user_ids) q=&quot;hillaryclinton,realdonaldtrump&quot;. “,” separation Location via geo coordinates (1-360 degree location boxes) q=c(-125, 26, -65, 49) timeout : amount of time (seconds) occupy your r session parse: TRUE(dataframe); FALSE(JSON). file_name: save as a file Usually the file is large. Recommend to save as JSON file then parse to data.frame. To ensure the stream automatically reconnects following any interruption prior to the specified stream time, use stream_tweets2(). ## Randomly sample (approximately 1%) from the live stream of all tweets for 30 seconds (default) rt &lt;- stream_tweets(&quot;&quot;) ## Streaming tweets for 30 seconds... ## Finished streaming tweets! ## opening file input connection. ## Found 500 records... Found 1000 records... Found 1118 records... Imported 1118 records. Simplifying... ## closing file input connection. nrow(rt) ## [1] 1118 rt &lt;- stream_tweets(&quot;duke,bluedevil,unc&quot;) ## Streaming tweets for 30 seconds... ## Finished streaming tweets! ## opening file input connection. ## Found 21 records... Imported 21 records. Simplifying... ## closing file input connection. nrow(rt) ## [1] 21 rt ## # A tibble: 21 x 88 ## user_id status_id created_at screen_name text source ## &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 970417… 11229475… 2019-04-29 19:35:28 GunnerSava… &quot;A C… Twitt… ## 2 556456… 11229475… 2019-04-29 19:35:29 CadenceMag… “To … Twitt… ## 3 110557… 11229475… 2019-04-29 19:35:30 lydiawood2… MY D… Twitt… ## 4 108921… 11229475… 2019-04-29 19:35:31 unicornmnfs &quot;/un… unico… ## 5 998333… 11229475… 2019-04-29 19:35:32 KatieFLeli… &quot;For… Twitt… ## 6 956004… 11229475… 2019-04-29 19:35:33 jodi_poll &quot;For… Twitt… ## 7 838102… 11229475… 2019-04-29 19:35:34 72ElCamino &quot;For… Twitt… ## 8 203445… 11229475… 2019-04-29 19:35:37 SCantojr Mond… WordP… ## 9 847396… 11229475… 2019-04-29 19:35:38 JacksonWor… &quot;A f… Twitt… ## 10 944091… 11229475… 2019-04-29 19:35:41 paosalazar… &quot;Ple… Twitt… ## # … with 11 more rows, and 82 more variables: display_text_width &lt;dbl&gt;, ## # reply_to_status_id &lt;lgl&gt;, reply_to_user_id &lt;lgl&gt;, ## # reply_to_screen_name &lt;lgl&gt;, is_quote &lt;lgl&gt;, is_retweet &lt;lgl&gt;, ## # favorite_count &lt;int&gt;, retweet_count &lt;int&gt;, hashtags &lt;list&gt;, ## # symbols &lt;list&gt;, urls_url &lt;list&gt;, urls_t.co &lt;list&gt;, ## # urls_expanded_url &lt;list&gt;, media_url &lt;list&gt;, media_t.co &lt;list&gt;, ## # media_expanded_url &lt;list&gt;, media_type &lt;list&gt;, ext_media_url &lt;list&gt;, ## # ext_media_t.co &lt;list&gt;, ext_media_expanded_url &lt;list&gt;, ## # ext_media_type &lt;chr&gt;, mentions_user_id &lt;list&gt;, ## # mentions_screen_name &lt;list&gt;, lang &lt;chr&gt;, quoted_status_id &lt;chr&gt;, ## # quoted_text &lt;chr&gt;, quoted_created_at &lt;dttm&gt;, quoted_source &lt;chr&gt;, ## # quoted_favorite_count &lt;int&gt;, quoted_retweet_count &lt;int&gt;, ## # quoted_user_id &lt;chr&gt;, quoted_screen_name &lt;chr&gt;, quoted_name &lt;chr&gt;, ## # quoted_followers_count &lt;int&gt;, quoted_friends_count &lt;int&gt;, ## # quoted_statuses_count &lt;int&gt;, quoted_location &lt;chr&gt;, ## # quoted_description &lt;chr&gt;, quoted_verified &lt;lgl&gt;, ## # retweet_status_id &lt;chr&gt;, retweet_text &lt;chr&gt;, ## # retweet_created_at &lt;dttm&gt;, retweet_source &lt;chr&gt;, ## # retweet_favorite_count &lt;int&gt;, retweet_retweet_count &lt;int&gt;, ## # retweet_user_id &lt;chr&gt;, retweet_screen_name &lt;chr&gt;, retweet_name &lt;chr&gt;, ## # retweet_followers_count &lt;int&gt;, retweet_friends_count &lt;int&gt;, ## # retweet_statuses_count &lt;int&gt;, retweet_location &lt;chr&gt;, ## # retweet_description &lt;chr&gt;, retweet_verified &lt;lgl&gt;, place_url &lt;chr&gt;, ## # place_name &lt;chr&gt;, place_full_name &lt;chr&gt;, place_type &lt;chr&gt;, ## # country &lt;chr&gt;, country_code &lt;chr&gt;, geo_coords &lt;list&gt;, ## # coords_coords &lt;list&gt;, bbox_coords &lt;list&gt;, status_url &lt;chr&gt;, ## # name &lt;chr&gt;, location &lt;chr&gt;, description &lt;chr&gt;, url &lt;chr&gt;, ## # protected &lt;lgl&gt;, followers_count &lt;int&gt;, friends_count &lt;int&gt;, ## # listed_count &lt;int&gt;, statuses_count &lt;int&gt;, favourites_count &lt;int&gt;, ## # account_created_at &lt;dttm&gt;, verified &lt;lgl&gt;, profile_url &lt;chr&gt;, ## # profile_expanded_url &lt;chr&gt;, account_lang &lt;chr&gt;, ## # profile_banner_url &lt;chr&gt;, profile_background_url &lt;chr&gt;, ## # profile_image_url &lt;chr&gt; ## stream tweets for a day (60 secs x 60 mins * 24 hours ) stream_tweets( &quot;abc,nbcnews,cbsnews,nytimes,bbcworld,bbcbreaking,bbcnews,bbcsport&quot;, timeout = 60*2, file_name = &quot;tweetsth1.json&quot;, parse = FALSE ) ## Streaming tweets for 120 seconds... ## Finished streaming tweets! ## streaming data saved as tweetsth1.json ## read in the data as a tidy tbl data frame djt1 &lt;- parse_stream(&quot;tweetsth1.json&quot;) ## opening file input connection. ## Found 500 records... Found 1000 records... Found 1074 records... Imported 1074 records. Simplifying... ## closing file input connection. djt1 ## # A tibble: 1,074 x 88 ## user_id status_id created_at screen_name text source ## &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 307027… 11229476… 2019-04-29 19:35:57 fairess369 @rea… Twitt… ## 2 307027… 11229478… 2019-04-29 19:36:49 fairess369 @rea… Twitt… ## 3 307027… 11229477… 2019-04-29 19:36:10 fairess369 @rea… Twitt… ## 4 307027… 11229479… 2019-04-29 19:36:58 fairess369 @rea… Twitt… ## 5 997309… 11229476… 2019-04-29 19:35:57 devereauxh… Best… Twitt… ## 6 924353… 11229476… 2019-04-29 19:35:57 RepCabreado Los … Twitt… ## 7 244991… 11229476… 2019-04-29 19:35:57 MsAvaArmst… Trea… Twitt… ## 8 975817… 11229476… 2019-04-29 19:35:57 hill_rb @Kel… Twitt… ## 9 210528… 11229476… 2019-04-29 19:35:57 kefish &quot;NEW… Twitt… ## 10 114935… 11229476… 2019-04-29 19:35:57 1JaimeLee &quot;A $… Twitt… ## # … with 1,064 more rows, and 82 more variables: display_text_width &lt;dbl&gt;, ## # reply_to_status_id &lt;chr&gt;, reply_to_user_id &lt;chr&gt;, ## # reply_to_screen_name &lt;chr&gt;, is_quote &lt;lgl&gt;, is_retweet &lt;lgl&gt;, ## # favorite_count &lt;int&gt;, retweet_count &lt;int&gt;, hashtags &lt;list&gt;, ## # symbols &lt;list&gt;, urls_url &lt;list&gt;, urls_t.co &lt;list&gt;, ## # urls_expanded_url &lt;list&gt;, media_url &lt;list&gt;, media_t.co &lt;list&gt;, ## # media_expanded_url &lt;list&gt;, media_type &lt;list&gt;, ext_media_url &lt;list&gt;, ## # ext_media_t.co &lt;list&gt;, ext_media_expanded_url &lt;list&gt;, ## # ext_media_type &lt;chr&gt;, mentions_user_id &lt;list&gt;, ## # mentions_screen_name &lt;list&gt;, lang &lt;chr&gt;, quoted_status_id &lt;chr&gt;, ## # quoted_text &lt;chr&gt;, quoted_created_at &lt;dttm&gt;, quoted_source &lt;chr&gt;, ## # quoted_favorite_count &lt;int&gt;, quoted_retweet_count &lt;int&gt;, ## # quoted_user_id &lt;chr&gt;, quoted_screen_name &lt;chr&gt;, quoted_name &lt;chr&gt;, ## # quoted_followers_count &lt;int&gt;, quoted_friends_count &lt;int&gt;, ## # quoted_statuses_count &lt;int&gt;, quoted_location &lt;chr&gt;, ## # quoted_description &lt;chr&gt;, quoted_verified &lt;lgl&gt;, ## # retweet_status_id &lt;chr&gt;, retweet_text &lt;chr&gt;, ## # retweet_created_at &lt;dttm&gt;, retweet_source &lt;chr&gt;, ## # retweet_favorite_count &lt;int&gt;, retweet_retweet_count &lt;int&gt;, ## # retweet_user_id &lt;chr&gt;, retweet_screen_name &lt;chr&gt;, retweet_name &lt;chr&gt;, ## # retweet_followers_count &lt;int&gt;, retweet_friends_count &lt;int&gt;, ## # retweet_statuses_count &lt;int&gt;, retweet_location &lt;chr&gt;, ## # retweet_description &lt;chr&gt;, retweet_verified &lt;lgl&gt;, place_url &lt;chr&gt;, ## # place_name &lt;chr&gt;, place_full_name &lt;chr&gt;, place_type &lt;chr&gt;, ## # country &lt;chr&gt;, country_code &lt;chr&gt;, geo_coords &lt;list&gt;, ## # coords_coords &lt;list&gt;, bbox_coords &lt;list&gt;, status_url &lt;chr&gt;, ## # name &lt;chr&gt;, location &lt;chr&gt;, description &lt;chr&gt;, url &lt;chr&gt;, ## # protected &lt;lgl&gt;, followers_count &lt;int&gt;, friends_count &lt;int&gt;, ## # listed_count &lt;int&gt;, statuses_count &lt;int&gt;, favourites_count &lt;int&gt;, ## # account_created_at &lt;dttm&gt;, verified &lt;lgl&gt;, profile_url &lt;chr&gt;, ## # profile_expanded_url &lt;chr&gt;, account_lang &lt;chr&gt;, ## # profile_banner_url &lt;chr&gt;, profile_background_url &lt;chr&gt;, ## # profile_image_url &lt;chr&gt; 4.4.4.5 Other functions https://rtweet.info/reference/index.html 4.4.5 Retweet networks Retweet networks: create networks based on datasets directed: retweet Similarly, we can get quote networks, replying networks. rt_duke &lt;- search_tweets( &quot;#duke&quot;, n = 1000 ) ## Searching for tweets... ## Finished collecting tweets! nrow(rt_duke) ## [1] 936 names(rt_duke) ## [1] &quot;user_id&quot; &quot;status_id&quot; ## [3] &quot;created_at&quot; &quot;screen_name&quot; ## [5] &quot;text&quot; &quot;source&quot; ## [7] &quot;display_text_width&quot; &quot;reply_to_status_id&quot; ## [9] &quot;reply_to_user_id&quot; &quot;reply_to_screen_name&quot; ## [11] &quot;is_quote&quot; &quot;is_retweet&quot; ## [13] &quot;favorite_count&quot; &quot;retweet_count&quot; ## [15] &quot;hashtags&quot; &quot;symbols&quot; ## [17] &quot;urls_url&quot; &quot;urls_t.co&quot; ## [19] &quot;urls_expanded_url&quot; &quot;media_url&quot; ## [21] &quot;media_t.co&quot; &quot;media_expanded_url&quot; ## [23] &quot;media_type&quot; &quot;ext_media_url&quot; ## [25] &quot;ext_media_t.co&quot; &quot;ext_media_expanded_url&quot; ## [27] &quot;ext_media_type&quot; &quot;mentions_user_id&quot; ## [29] &quot;mentions_screen_name&quot; &quot;lang&quot; ## [31] &quot;quoted_status_id&quot; &quot;quoted_text&quot; ## [33] &quot;quoted_created_at&quot; &quot;quoted_source&quot; ## [35] &quot;quoted_favorite_count&quot; &quot;quoted_retweet_count&quot; ## [37] &quot;quoted_user_id&quot; &quot;quoted_screen_name&quot; ## [39] &quot;quoted_name&quot; &quot;quoted_followers_count&quot; ## [41] &quot;quoted_friends_count&quot; &quot;quoted_statuses_count&quot; ## [43] &quot;quoted_location&quot; &quot;quoted_description&quot; ## [45] &quot;quoted_verified&quot; &quot;retweet_status_id&quot; ## [47] &quot;retweet_text&quot; &quot;retweet_created_at&quot; ## [49] &quot;retweet_source&quot; &quot;retweet_favorite_count&quot; ## [51] &quot;retweet_retweet_count&quot; &quot;retweet_user_id&quot; ## [53] &quot;retweet_screen_name&quot; &quot;retweet_name&quot; ## [55] &quot;retweet_followers_count&quot; &quot;retweet_friends_count&quot; ## [57] &quot;retweet_statuses_count&quot; &quot;retweet_location&quot; ## [59] &quot;retweet_description&quot; &quot;retweet_verified&quot; ## [61] &quot;place_url&quot; &quot;place_name&quot; ## [63] &quot;place_full_name&quot; &quot;place_type&quot; ## [65] &quot;country&quot; &quot;country_code&quot; ## [67] &quot;geo_coords&quot; &quot;coords_coords&quot; ## [69] &quot;bbox_coords&quot; &quot;status_url&quot; ## [71] &quot;name&quot; &quot;location&quot; ## [73] &quot;description&quot; &quot;url&quot; ## [75] &quot;protected&quot; &quot;followers_count&quot; ## [77] &quot;friends_count&quot; &quot;listed_count&quot; ## [79] &quot;statuses_count&quot; &quot;favourites_count&quot; ## [81] &quot;account_created_at&quot; &quot;verified&quot; ## [83] &quot;profile_url&quot; &quot;profile_expanded_url&quot; ## [85] &quot;account_lang&quot; &quot;profile_banner_url&quot; ## [87] &quot;profile_background_url&quot; &quot;profile_image_url&quot; netdf=rt_duke%&gt;%dplyr::select(.,screen_name,retweet_screen_name,is_retweet) netdfr=netdf%&gt;%filter(is_retweet)%&gt;%select(-is_retweet) netdfp=netdf%&gt;%filter(!is_retweet)%&gt;%pull(screen_name) igra_duke=graph_from_data_frame(netdfr)#+netdfp E(igra_duke)$weight=rep(1,ecount(igra_duke)) igra_duke_s &lt;- igraph::simplify( igra_duke, remove.multiple = T, remove.loops = F, edge.attr.comb=c(weight=&quot;sum&quot;)) igra_duke_s ## IGRAPH 34c93fb DNW- 524 420 -- ## + attr: name (v/c), weight (e/n) ## + edges from 34c93fb (vertex names): ## [1] kenfranck000000-&gt;kenfranck000000 SportsTrebuchet-&gt;CoverTwoShow ## [3] PJordanFootball-&gt;CoverTwoShow CoachHarakel -&gt;CoachMerrittJMU ## [5] budawamaai -&gt;tv_gikuyu Its_Jaleel -&gt;DukeBlueUpdates ## [7] Its_Jaleel -&gt;rhj_24324 moyocoyotzinnow-&gt;JoeFisherTV ## [9] verliaglorol -&gt;huber_logan ajanoly -&gt;pallabghosh ## [11] BleedBlue4lif5 -&gt;MattLombardoNFL bcarrasco09_ -&gt;MattLombardoNFL ## [13] Sultanama1 -&gt;pallabghosh Wildaaja9 -&gt;pallabghosh ## [15] Berguzarhalitl1-&gt;pallabghosh Rezekiamelia11 -&gt;pallabghosh ## + ... omitted several edges plot(igra_duke_s,vertex.color=&quot;gold&quot;, vertex.size=log(igraph::degree(igra_duke_s))*3+1, vertex.frame.color=&quot;gray&quot;, vertex.label.color=&quot;black&quot;, vertex.label.cex=log(igraph::degree(igra_duke_s))*0.2+0.1, vertex.label.dist=2, edge.curved=0.5,edge.arrow.size=.2) 4.4.6 Friendship networks 4.4.6.1 get_friends() Friendship network of NYC political science directed: following get_friends(): Get user IDs of accounts followed by target user(s). ##maximum ids: 100 user.seed=&quot;drewconway&quot; user.following=get_friends(user.seed,n=500,retryonratelimit = TRUE) nrow(user.following) ## [1] 290 user.following%&gt;%head(5) ## # A tibble: 5 x 2 ## user user_id ## &lt;chr&gt; &lt;chr&gt; ## 1 drewconway 846137120209190912 ## 2 drewconway 6156562 ## 3 drewconway 36133587 ## 4 drewconway 5850692 ## 5 drewconway 132496568 4.4.6.2 filter on the following user list info.following=lookup_users(user.following$user_id) info.following ## # A tibble: 290 x 88 ## user_id status_id created_at screen_name text source ## &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 846137… 11228451… 2019-04-29 12:48:49 dog_feelin… gooo… Twitt… ## 2 6156562 11229301… 2019-04-29 18:26:36 aewo @gar… Twitt… ## 3 361335… 11225643… 2019-04-28 18:12:46 bearloga Wow.… Twitt… ## 4 5850692 11228639… 2019-04-29 14:03:23 Aaroth @jul… Twitt… ## 5 132496… 11229010… 2019-04-29 16:30:47 NewYorkSta… &quot;A s… Twitt… ## 6 152765… 11228638… 2019-04-29 14:02:47 drewharwell Anci… Twitt… ## 7 160392… 11229432… 2019-04-29 19:18:25 pklinkne What… Twitt… ## 8 235070… 11221966… 2019-04-27 17:51:56 stasavage Cong… Twitt… ## 9 881321… 11229470… 2019-04-29 19:33:34 BackAftaTh… @Chi… Twitt… ## 10 269349… 11229111… 2019-04-29 17:11:02 TheFFBalle… &quot;Com… Buffer ## # … with 280 more rows, and 82 more variables: display_text_width &lt;int&gt;, ## # reply_to_status_id &lt;chr&gt;, reply_to_user_id &lt;chr&gt;, ## # reply_to_screen_name &lt;chr&gt;, is_quote &lt;lgl&gt;, is_retweet &lt;lgl&gt;, ## # favorite_count &lt;int&gt;, retweet_count &lt;int&gt;, hashtags &lt;list&gt;, ## # symbols &lt;list&gt;, urls_url &lt;list&gt;, urls_t.co &lt;list&gt;, ## # urls_expanded_url &lt;list&gt;, media_url &lt;list&gt;, media_t.co &lt;list&gt;, ## # media_expanded_url &lt;list&gt;, media_type &lt;list&gt;, ext_media_url &lt;list&gt;, ## # ext_media_t.co &lt;list&gt;, ext_media_expanded_url &lt;list&gt;, ## # ext_media_type &lt;chr&gt;, mentions_user_id &lt;list&gt;, ## # mentions_screen_name &lt;list&gt;, lang &lt;chr&gt;, quoted_status_id &lt;chr&gt;, ## # quoted_text &lt;chr&gt;, quoted_created_at &lt;dttm&gt;, quoted_source &lt;chr&gt;, ## # quoted_favorite_count &lt;int&gt;, quoted_retweet_count &lt;int&gt;, ## # quoted_user_id &lt;chr&gt;, quoted_screen_name &lt;chr&gt;, quoted_name &lt;chr&gt;, ## # quoted_followers_count &lt;int&gt;, quoted_friends_count &lt;int&gt;, ## # quoted_statuses_count &lt;int&gt;, quoted_location &lt;chr&gt;, ## # quoted_description &lt;chr&gt;, quoted_verified &lt;lgl&gt;, ## # retweet_status_id &lt;chr&gt;, retweet_text &lt;chr&gt;, ## # retweet_created_at &lt;dttm&gt;, retweet_source &lt;chr&gt;, ## # retweet_favorite_count &lt;int&gt;, retweet_retweet_count &lt;int&gt;, ## # retweet_user_id &lt;chr&gt;, retweet_screen_name &lt;chr&gt;, retweet_name &lt;chr&gt;, ## # retweet_followers_count &lt;int&gt;, retweet_friends_count &lt;int&gt;, ## # retweet_statuses_count &lt;int&gt;, retweet_location &lt;chr&gt;, ## # retweet_description &lt;chr&gt;, retweet_verified &lt;lgl&gt;, place_url &lt;chr&gt;, ## # place_name &lt;chr&gt;, place_full_name &lt;chr&gt;, place_type &lt;chr&gt;, ## # country &lt;chr&gt;, country_code &lt;chr&gt;, geo_coords &lt;list&gt;, ## # coords_coords &lt;list&gt;, bbox_coords &lt;list&gt;, status_url &lt;chr&gt;, ## # name &lt;chr&gt;, location &lt;chr&gt;, description &lt;chr&gt;, url &lt;chr&gt;, ## # protected &lt;lgl&gt;, followers_count &lt;int&gt;, friends_count &lt;int&gt;, ## # listed_count &lt;int&gt;, statuses_count &lt;int&gt;, favourites_count &lt;int&gt;, ## # account_created_at &lt;dttm&gt;, verified &lt;lgl&gt;, profile_url &lt;chr&gt;, ## # profile_expanded_url &lt;chr&gt;, account_lang &lt;chr&gt;, ## # profile_banner_url &lt;chr&gt;, profile_background_url &lt;chr&gt;, ## # profile_image_url &lt;chr&gt; names(info.following) ## [1] &quot;user_id&quot; &quot;status_id&quot; ## [3] &quot;created_at&quot; &quot;screen_name&quot; ## [5] &quot;text&quot; &quot;source&quot; ## [7] &quot;display_text_width&quot; &quot;reply_to_status_id&quot; ## [9] &quot;reply_to_user_id&quot; &quot;reply_to_screen_name&quot; ## [11] &quot;is_quote&quot; &quot;is_retweet&quot; ## [13] &quot;favorite_count&quot; &quot;retweet_count&quot; ## [15] &quot;hashtags&quot; &quot;symbols&quot; ## [17] &quot;urls_url&quot; &quot;urls_t.co&quot; ## [19] &quot;urls_expanded_url&quot; &quot;media_url&quot; ## [21] &quot;media_t.co&quot; &quot;media_expanded_url&quot; ## [23] &quot;media_type&quot; &quot;ext_media_url&quot; ## [25] &quot;ext_media_t.co&quot; &quot;ext_media_expanded_url&quot; ## [27] &quot;ext_media_type&quot; &quot;mentions_user_id&quot; ## [29] &quot;mentions_screen_name&quot; &quot;lang&quot; ## [31] &quot;quoted_status_id&quot; &quot;quoted_text&quot; ## [33] &quot;quoted_created_at&quot; &quot;quoted_source&quot; ## [35] &quot;quoted_favorite_count&quot; &quot;quoted_retweet_count&quot; ## [37] &quot;quoted_user_id&quot; &quot;quoted_screen_name&quot; ## [39] &quot;quoted_name&quot; &quot;quoted_followers_count&quot; ## [41] &quot;quoted_friends_count&quot; &quot;quoted_statuses_count&quot; ## [43] &quot;quoted_location&quot; &quot;quoted_description&quot; ## [45] &quot;quoted_verified&quot; &quot;retweet_status_id&quot; ## [47] &quot;retweet_text&quot; &quot;retweet_created_at&quot; ## [49] &quot;retweet_source&quot; &quot;retweet_favorite_count&quot; ## [51] &quot;retweet_retweet_count&quot; &quot;retweet_user_id&quot; ## [53] &quot;retweet_screen_name&quot; &quot;retweet_name&quot; ## [55] &quot;retweet_followers_count&quot; &quot;retweet_friends_count&quot; ## [57] &quot;retweet_statuses_count&quot; &quot;retweet_location&quot; ## [59] &quot;retweet_description&quot; &quot;retweet_verified&quot; ## [61] &quot;place_url&quot; &quot;place_name&quot; ## [63] &quot;place_full_name&quot; &quot;place_type&quot; ## [65] &quot;country&quot; &quot;country_code&quot; ## [67] &quot;geo_coords&quot; &quot;coords_coords&quot; ## [69] &quot;bbox_coords&quot; &quot;status_url&quot; ## [71] &quot;name&quot; &quot;location&quot; ## [73] &quot;description&quot; &quot;url&quot; ## [75] &quot;protected&quot; &quot;followers_count&quot; ## [77] &quot;friends_count&quot; &quot;listed_count&quot; ## [79] &quot;statuses_count&quot; &quot;favourites_count&quot; ## [81] &quot;account_created_at&quot; &quot;verified&quot; ## [83] &quot;profile_url&quot; &quot;profile_expanded_url&quot; ## [85] &quot;account_lang&quot; &quot;profile_banner_url&quot; ## [87] &quot;profile_background_url&quot; &quot;profile_image_url&quot; ##choose the filtering criterion: description, verified (blue check mark), location info.following%&gt;%select(geo_coords,country,country_code,location)%&gt;%lat_lng() ## # A tibble: 290 x 8 ## geo_coords country country_code location lat lng coords_coords ## &lt;list&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 &lt;dbl [2]&gt; &lt;NA&gt; &lt;NA&gt; &quot;&quot; NA NA NA ## 2 &lt;dbl [2]&gt; &lt;NA&gt; &lt;NA&gt; NYC NA NA NA ## 3 &lt;dbl [2]&gt; &lt;NA&gt; &lt;NA&gt; Pittsbu… NA NA NA ## 4 &lt;dbl [2]&gt; &lt;NA&gt; &lt;NA&gt; Philade… NA NA NA ## 5 &lt;dbl [2]&gt; &lt;NA&gt; &lt;NA&gt; New York NA NA NA ## 6 &lt;dbl [2]&gt; &lt;NA&gt; &lt;NA&gt; D.C. NA NA NA ## 7 &lt;dbl [2]&gt; &lt;NA&gt; &lt;NA&gt; Hamilto… NA NA NA ## 8 &lt;dbl [2]&gt; &lt;NA&gt; &lt;NA&gt; New Yor… NA NA NA ## 9 &lt;dbl [2]&gt; &lt;NA&gt; &lt;NA&gt; &quot;&quot; NA NA NA ## 10 &lt;dbl [2]&gt; &lt;NA&gt; &lt;NA&gt; Phoenix… NA NA NA ## # … with 280 more rows, and 1 more variable: bbox_coords &lt;dbl&gt; ## filter based on description candidates=info.following%&gt;%filter(description%&gt;% str_detect(&quot;nyu|new york university&quot;), description%&gt;% str_detect(&quot;poli(tics|tical|sci|cy)&quot;))%&gt;% select(user_id,screen_name,name,friends_count,description) candidates%&gt;%head(5) ## # A tibble: 1 x 5 ## user_id screen_name name friends_count description ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 8448612… zeitzoff Thomas … 2666 Associate professor @AU_SPA.… 4.4.6.3 request rate limit rate_limit https://developer.twitter.com/en/docs/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status rate_limit()%&gt;%head() ## # A tibble: 6 x 7 ## query limit remaining reset reset_at timestamp app ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;tim&gt; &lt;dttm&gt; &lt;dttm&gt; &lt;chr&gt; ## 1 list… 15 15 15.0… 2019-04-29 15:53:16 2019-04-29 15:38:16 Test… ## 2 list… 75 75 15.0… 2019-04-29 15:53:16 2019-04-29 15:38:16 Test… ## 3 list… 15 15 15.0… 2019-04-29 15:53:16 2019-04-29 15:38:16 Test… ## 4 list… 900 900 15.0… 2019-04-29 15:53:16 2019-04-29 15:38:16 Test… ## 5 list… 15 15 15.0… 2019-04-29 15:53:16 2019-04-29 15:38:16 Test… ## 6 list… 75 75 15.0… 2019-04-29 15:53:16 2019-04-29 15:38:16 Test… rate_limit(&quot;get_friends&quot;) ## # A tibble: 1 x 7 ## query limit remaining reset reset_at timestamp app ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;tim&gt; &lt;dttm&gt; &lt;dttm&gt; &lt;chr&gt; ## 1 frie… 15 14 14.9… 2019-04-29 15:53:14 2019-04-29 15:38:16 Test… get_friends(c(&quot;drewconway&quot;,&quot;BarackObama&quot;)) ## 1 friend networks collected! ## 2 friend networks collected! ## # A tibble: 5,290 x 2 ## user user_id ## &lt;chr&gt; &lt;chr&gt; ## 1 drewconway 846137120209190912 ## 2 drewconway 6156562 ## 3 drewconway 36133587 ## 4 drewconway 5850692 ## 5 drewconway 132496568 ## 6 drewconway 15276573 ## 7 drewconway 16039252 ## 8 drewconway 2350709449 ## 9 drewconway 881321968301223937 ## 10 drewconway 2693496433 ## # … with 5,280 more rows rate_limit(&quot;get_friends&quot;) # 15 every 15 min ## # A tibble: 1 x 7 ## query limit remaining reset reset_at timestamp app ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;tim&gt; &lt;dttm&gt; &lt;dttm&gt; &lt;chr&gt; ## 1 frie… 15 12 14.9… 2019-04-29 15:53:14 2019-04-29 15:38:16 Test… rate_limit(&quot;lookup_users&quot;) # 900 every 15 min ## # A tibble: 1 x 7 ## query limit remaining reset reset_at timestamp app ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;tim&gt; &lt;dttm&gt; &lt;dttm&gt; &lt;chr&gt; ## 1 user… 900 897 14.9… 2019-04-29 15:53:14 2019-04-29 15:38:17 Test… limit.fri=rate_limit(&quot;get_friends&quot;) if (limit.fri$remaining==0){ Sys.sleep(60*as.numeric(limit.fri$reset))} 4.4.6.4 Friendship network # seed user user.seed= 20916144 #&quot;cdsamii&quot; user.following=get_friends(user.seed,n=15,retryonratelimit = TRUE) userid=c(user.seed,user.following$user_id) info.following=lookup_users(userid) user.df=info.following%&gt;%filter(description%&gt;% str_detect(regex(&quot;nyu|new york university&quot;,ignore_case = T)), description%&gt;% str_detect(regex(&quot;poli(tics|tical|sci|cy)&quot;,ignore_case = T)) )%&gt;% select(user_id,screen_name,name,friends_count,description) acc.id=user.df$user_id # qualified id nyc.id=user.seed # already scrapped the friends can.id=acc.id[!acc.id%in%nyc.id] # to be scrapped rej.id=userid[!info.following$user_id%in%acc.id] # non-qualified edge.list=user.following%&gt;%filter(user_id%in%acc.id) # netowork info.id=userid # already request user info while((length(nyc.id)&lt;100)){ # pick the first user in the acc.id user.following=get_friends(can.id,n=1000,retryonratelimit = TRUE) userid=user.following$user_id useridx=userid[!userid%in%info.id] # new userid info.following=lookup_users(useridx) user.dfx=info.following%&gt;%filter(description%&gt;% str_detect(regex(&quot;nyu|new york university&quot;,ignore_case = T)), description%&gt;% str_detect(regex(&quot;poli(tics|tical|sci|cy)&quot;,ignore_case = T)) )%&gt;% select(user_id,screen_name,name,friends_count,description) nyc.id=c(nyc.id,can.id)%&gt;%unique() #already scrapped and in the list if(nrow(user.dfx)==0){break} user.df=rbind(user.df,user.dfx) #merge user info df can.id=user.dfx$user_id #to be scrapped rej.idx=useridx[!useridx%in%can.id] #not qualified rej.id=c(rej.id,rej.idx)%&gt;%unique() acc.id=c(acc.id,can.id)%&gt;%unique() info.id=c(info.id,useridx)%&gt;%unique() edge.listx=user.following%&gt;%filter(user_id%in%acc.id) #add edgelist edge.list=rbind(edge.list,edge.listx) } 4.4.6.5 Network Visualization load(&quot;images/friendship.rdata&quot;) edge.list%&gt;%head(5) ## # A tibble: 5 x 2 ## user user_id ## &lt;chr&gt; &lt;chr&gt; ## 1 20916144 99679924 ## 2 99679924 31049199 ## 3 99679924 2961443543 ## 4 99679924 288295699 ## 5 99679924 1023012089416298496 user.df%&gt;%head(5) ## # A tibble: 5 x 5 ## user_id screen_name name friends_count description ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 20916144 cdsamii Cyrus Sa… 543 I study methods to inform p… ## 2 99679924 YeWang1576 Ye Wang 454 Political Science PhD stude… ## 3 31049199 DrewDim Drew Dim… 1758 Social Scientific Methodolo… ## 4 2961443… yxqsophie Sophie X… 82 Ph.D. student at NYU Politi… ## 5 2882956… _avecchiato Alessand… 321 Ph.D. candidate at @NYUPoli… library(igraph) net=graph_from_data_frame(edge.list) netsim=igraph::simplify(net, remove.multiple = T, remove.loops = F) V(netsim)$id=V(netsim)$name user.df=user.df %&gt;% unique()%&gt;% arrange(match(user_id, V(netsim)$id)) user.name=user.df%&gt;% pull(name) V(netsim)$name=user.name V(netsim)$degree=user.df$friends_count set.seed(123) plot(netsim,vertex.name=V(netsim)$user.name,vertex.color=&quot;gold&quot;, vertex.size=log(V(netsim)$degree)*.8+0.01, vertex.frame.color=&quot;gray&quot;, vertex.label.color=&quot;black&quot;, vertex.label.cex=0.5, vertex.label.dist=2, edge.curved=0.5,edge.arrow.size=.2,vertex.label.cex=.5,vertex.label=NA) 4.5 Other APIs [Rfacebook])(https://cran.r-project.org/web/packages/Rfacebook/Rfacebook.pdf) (facebook) RedditExtractoR (reddit) imdbapi (IMDB) omdbapi(The Open Movie Database) 4.6 API request directly from R 4.6.1 Introduction The movie database API https://www.themoviedb.org/ Signup and request for an API key https://developers.themoviedb.org/3/getting-started/introduction Write functions to make query: Create a query From JSON file to dataframe Build your own network based on these functions 4.6.2 preparation #install.packages(&quot;rjson&quot;) library(rjson) #install.packages(&quot;jsonlite&quot;) library(jsonlite) 4.6.3 search people id Search people based on the name: https://developers.themoviedb.org/3/search/search-people ### get actor/director id based on name get_search_people = function(people,api=&quot;YOUR_API_ACCOUNT&quot;){ search = URLencode(people, reserved = TRUE) people_url = paste0(&quot;https://api.themoviedb.org/3/search/person?api_key=&quot;,api,&quot;&amp;language=en-US&amp;query=&quot;, search,&quot;&amp;include_adult=false&quot;) people_json = jsonlite::fromJSON(paste(readLines(people_url), collapse=&quot;&quot;)) total_page = people_json$total_pages if (total_page &gt; 1){ people_id_df = data.frame() n = min(5, total_page) for (j in 1:n){ url = paste0(&quot;https://api.themoviedb.org/3/search/person?api_key=&quot;,api,&quot;&amp;language=en-US&amp;query=&quot;, search,&quot;&amp;page=&quot;,j,&quot;&amp;include_adult=false&quot;) json = jsonlite::fromJSON(paste(readLines(people_url), collapse=&quot;&quot;)) temp = json$results %&gt;% as.data.frame() %&gt;% select(id, name) people_id_df = rbind(people_id_df, temp) } } else { people_id_df = people_json$results %&gt;% as.data.frame() %&gt;% select(id, name) } return(people_id_df) # this dataframe only contains name and people id } actress=&quot;Julianne Moore&quot; # She comes from NC get_search_people(actress) people=actress 4.6.4 search movies based on people id Search the movies of one person based on id:https://developers.themoviedb.org/3/people/get-person-movie-credits # get movie details of one person with the person id get_people_movie = function(id,api=&quot;YOUR_API_ACCOUNT&quot;){ url = paste0(&quot;https://api.themoviedb.org/3/person/&quot;,id,&quot;/movie_credits?api_key=&quot;,api,&quot;&amp;language=en-US&quot;) people_movie_json = jsonlite::fromJSON(paste(readLines(url), collapse=&quot;&quot;)) people_movie_df = people_movie_json$cast %&gt;% as.data.frame() %&gt;% select(character, poster_path, id, vote_average, original_language, title, popularity, overview, release_date) base_url = &quot;http://image.tmdb.org/t/p/w500&quot; people_movie_df = people_movie_df %&gt;% mutate(poster_path = paste0(base_url, poster_path)) return(people_movie_df) } id=1231 # got from the previous function `get_search_people` get_people_movie(id) "],
["advanced-network-visualization.html", "Chapter 5 Advanced Network Visualization 5.1 Introduction 5.2 Preparation 5.3 Visualization for static network 5.4 Other static networks 5.5 ggplot2 version for network visualization 5.6 Interactive network visualization 5.7 Dynamic network", " Chapter 5 Advanced Network Visualization 5.1 Introduction 5.1.1 Outline Visualization for static network: Graph: hairball plot Matrix: heatmap in R basic package; geom_tile in pkg ggplot2 Other static networks: Two-mode networks (node-specific attribute) Multiple networks (edge-specific attribute) … ( ggtree, ggalluvial, etc.) ggplot2 version for network visualization: Comparison between ggnet2,geomnet,ggnetwork Extension to interactive (plotly) , dynamic network (ggnetwork) Other interactive network visualizations: visNetwork (good documentation) networkD3 threejs ggigraph Visualization for dynamic networks Snapshots for the evolving networks: ggnetwork (common) Animation for the evolving networks: ggplot2 + gganimate ndtv pkg (good documentation) 5.1.2 Available R packages and tutorial ggplot2 version for network visualization ggnet2: https://briatte.github.io/ggnet/ geomnet: https://github.com/sctyner/geomnet https://cran.r-project.org/web/packages/geomnet/geomnet.pdf ggnetwork: https://briatte.github.io/ggnetwork/ Comparison among the three R packages: https://journal.r-project.org/archive/2017/RJ-2017-023/RJ-2017-023.pdf Interactive network visualization visNetwork https://datastorm-open.github.io/visNetwork/ ggigraph http://davidgohel.github.io/ggiraph/index.html networkD3 http://christophergandrud.github.io/networkD3/ threejs http://bwlewis.github.io/rthreejs/graphjs.html https://bwlewis.github.io/rthreejs/ Dynamic network ndtv Official website: https://cran.r-project.org/web/packages/ndtv/vignettes/ndtv.pdf Nice tutorial: http://statnet.csde.washington.edu/workshops/SUNBELT/current/ndtv/ndtv_workshop.html#understanding-how-networkdynamic-works http://kateto.net/network-visualization http://statnet.csde.washington.edu/workshops/SUNBELT/current/ndtv/ndtv-d3_vignette.html gganimate https://gganimate.com/ (ggplot2+gganimate) Tutorial: http://kateto.net/netscix2016 http://kateto.net/network-visualization http://curleylab.psych.columbia.edu/netviz/ 5.1.3 References All code comes from the following websites with modifications: http://kateto.net/netscix2016 http://kateto.net/network-visualization https://journal.r-project.org/archive/2017/RJ-2017-023/RJ-2017-023.pdf 5.2 Preparation library(igraph) library(igraphdata) library(dplyr) library(ggplot2) data(karate) 5.3 Visualization for static network 5.3.1 Hairball plot dia_vk=get_diameter(karate,directed = FALSE) ecol=rep(&quot;gray80&quot;,ecount(karate)) ecol[E(karate,path = dia_vk)]=&quot;orange&quot; ew=rep(1,ecount(karate)) ew[E(karate,path = dia_vk)]=3 ls=list(`1`=which(V(karate)$Faction==1),`2`=which(V(karate)$Faction==2)) set.seed(1) plot(karate,edge.color=ecol,edge.width=ew,mark.groups = ls) #,vertex.size=log(degree(karate))*7+1 5.3.2 Heatmap karate.mat=get.adjacency(karate,sparse = FALSE) heatmap(karate.mat[,34:1],Rowv = NA, Colv = NA,scale=&quot;none&quot;) # By default, Rowv and Colv will provide us the dendrogram #scale=c(&quot;row&quot;,&quot;column&quot;,&quot;none&quot;) -- normalize the values heatmap(karate.mat[,34:1]) ?heatmap Using geom_tile in R package ggplot2: # Change to long format. -- edgelist but including all the 0s longData=reshape2::melt(karate.mat) longData_all=as_tibble(longData) longData_all1=longData_all%&gt;%mutate(Var1=forcats::fct_rev(Var1)) # using geom_tile ggplot(longData_all1, aes(x = Var2, y = Var1)) + geom_tile(aes(fill=value)) + scale_fill_gradient(low=&quot;white&quot;, high=&quot;#333333&quot;,na.value = &quot;red&quot;) + theme_bw()+ggtitle(&quot;&quot;)+xlab(&quot;&quot;)+ylab(&quot;&quot;)+ #set clean background and no titles guides(fill = guide_colourbar(barheight = 12))+ # can set the length of colour bar theme(axis.text.x = element_text(angle = 90, hjust = 1))+ coord_fixed() # fix to square coordinator 5.4 Other static networks Two-mode networks (different shape, color) Multiple networks (different color of edges, facets) ggtree ggalluvial 5.4.1 Two-mode network graph_from_incidence_matrix: add a vertex attribute called “type” can use different node-specific plotting parameter (shape,color,label) to indicate the type has it own layout, layout_as_bipartite set.seed(1) twomode.mat=matrix(sample(c(0,1),9,replace = TRUE),nrow = 3) rownames(twomode.mat)=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;) colnames(twomode.mat)=1:3 twomode.mat ## 1 2 3 ## A 0 1 1 ## B 0 0 1 ## C 1 1 1 twomode.net=graph_from_incidence_matrix(twomode.mat) plot(twomode.net) vertex_attr_names(twomode.net) ## [1] &quot;type&quot; &quot;name&quot; V(twomode.net)$type ## [1] FALSE FALSE FALSE TRUE TRUE TRUE V(twomode.net)$color &lt;- c(&quot;blue&quot;, &quot;orange&quot;)[V(twomode.net)$type+1] V(twomode.net)$shape &lt;- c(&quot;square&quot;, &quot;circle&quot;)[V(twomode.net)$type+1] plot(twomode.net,vertex.label.color=&quot;white&quot;) plot(twomode.net,vertex.label.color=&quot;white&quot;,layout=layout_as_bipartite) 5.4.2 Multiple neworks can use different edge-specific plotting parameters (color,linetype) to indicate the type simplify the network by types. can use different facet to present different networks with fixing layout (using ggnetwork will be more convenient) data(enron) subenron=induced_subgraph(enron,V(enron)[1:30]) subenron ## IGRAPH af878f6 D--- 30 2133 -- Enron email network ## + attr: LDC_names (g/c), LDC_desc (g/c), name (g/c), Citation ## | (g/c), Email (v/c), Name (v/c), Note (v/c), Time (e/c), ## | Reciptype (e/c), Topic (e/n), LDC_topic (e/n) ## + edges from af878f6: ## [1] 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 ## [12] 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 1-&gt;10 ## [23] 1-&gt;10 1-&gt;21 1-&gt;21 1-&gt;21 1-&gt;21 2-&gt; 2 2-&gt;16 2-&gt;16 2-&gt;16 2-&gt;16 2-&gt;16 ## [34] 2-&gt;16 2-&gt;16 3-&gt;11 3-&gt;11 3-&gt;11 3-&gt;11 3-&gt;18 3-&gt;18 3-&gt;18 3-&gt;18 5-&gt; 2 ## [45] 5-&gt; 2 5-&gt; 2 5-&gt; 2 5-&gt; 2 5-&gt; 2 5-&gt; 5 5-&gt; 5 5-&gt; 5 5-&gt; 5 5-&gt; 5 5-&gt; 5 ## [56] 5-&gt; 5 5-&gt; 5 5-&gt; 5 5-&gt; 6 5-&gt; 6 5-&gt; 6 5-&gt; 6 5-&gt; 6 5-&gt; 6 5-&gt; 7 5-&gt; 7 ## + ... omitted several edges E(subenron)$Reciptype%&gt;%unique() ## [1] &quot;to&quot; &quot;bcc&quot; &quot;cc&quot; E(subenron)$color &lt;- c(&quot;gold&quot;, &quot;tomato&quot;, &quot;yellowgreen&quot;)[E(subenron)$Reciptype%&gt;%as.factor()] set.seed(1) plot(subenron,edge.arrow.size=0.2,layout=layout_in_circle,vertex.label=NA,vertex.size=2) #merge the edges by type subenron.df=igraph::as_data_frame(subenron) se.df=subenron.df%&gt;%group_by(from,to,Reciptype)%&gt;%summarise(weight=n()) se.net=graph_from_data_frame(se.df) E(se.net)$color &lt;- c(&quot;gold&quot;, &quot;tomato&quot;, &quot;yellowgreen&quot;)[E(se.net)$Reciptype%&gt;%as.factor()] set.seed(1) plot(se.net,edge.arrow.size=0.2,layout=layout_in_circle,vertex.label=NA,vertex.size=2) #edge.width=log(E(se.net)$weight+0.1)/4 #can set the width of edge To delete edges, using - or delete_edges(graph,edges) To keep the subgraph with specific edges, using subgraph.edges(graph, eids, delete.vertices = FALSE) set.seed(1) #fix the layout l=layout_in_circle(se.net) plot(se.net,edge.arrow.size=0.2,layout=l,vertex.shape=&quot;none&quot;) #delete the edges se.net.to=se.net-E(se.net)[E(se.net)$Reciptype%in%c(&quot;cc&quot;,&quot;bcc&quot;)] #se.net.to=delete.edges(se.net,E(se.net)[E(se.net)$Reciptype%in%c(&quot;cc&quot;,&quot;bcc&quot;)]) #another way to delete #se.net.to=subgraph.edges(se.net,E(se.net)[E(se.net)$Reciptype==&quot;to&quot;],delete.vertices = FALSE) # keep the subgraph se.net.cc=se.net-E(se.net)[E(se.net)$Reciptype%in%c(&quot;to&quot;,&quot;bcc&quot;)] se.net.bcc=se.net-E(se.net)[E(se.net)$Reciptype%in%c(&quot;to&quot;,&quot;cc&quot;)] par(mfrow=c(1,3)) plot(se.net.to,edge.arrow.size=0.2,layout=l,vertex.shape=&quot;none&quot;) plot(se.net.cc,edge.arrow.size=0.2,layout=l,vertex.shape=&quot;none&quot;) plot(se.net.bcc,edge.arrow.size=0.2,layout=l,vertex.shape=&quot;none&quot;) 5.5 ggplot2 version for network visualization 5.5.1 ggnet2,geomnet,ggnetwork ggplot2 version for network visualization ggnet2: https://briatte.github.io/ggnet/ geomnet: https://github.com/sctyner/geomnet https://cran.r-project.org/web/packages/geomnet/geomnet.pdf ggnetwork: https://briatte.github.io/ggnetwork/ Comparison among the three R packages: https://journal.r-project.org/archive/2017/RJ-2017-023/RJ-2017-023.pdf All based on ggplot2 and network ggnet2 has similar syntax as plot. easy to use. geomnet add available layer geom_net in ggplot2. use dataframe as input. can interact with plotly ggnetwork (preferred) is most flexible. advantages on dynamic network. 5.5.2 football data #install.packages(&quot;GGally&quot;) library(&quot;GGally&quot;) #install.packages(&quot;geomnet&quot;) library(&quot;geomnet&quot;) #install.packages(&quot;ggnetwork&quot;) library(&quot;ggnetwork&quot;) library(&quot;statnet&quot;) # load the data data(&quot;football&quot;,package = &quot;geomnet&quot;) rownames(football$vertices) &lt;-football$vertices$label # create network from edge list fb.net=network::network(football$edges[,1:2]) # add vertex attribute: the conference the team is in fb.net %v% &quot;conf&quot; &lt;-football$vertices[network.vertex.names(fb.net), &quot;value&quot;] # add edge attribute: whether two teams belong to the same conference set.edge.attribute(fb.net, &quot;same.conf&quot;,football$edges$same.conf) set.edge.attribute(fb.net, &quot;lty&quot;, ifelse(fb.net %e% &quot;same.conf&quot; == 1, 1, 2)) 5.5.3 ggnet2 Features: Input: network object Available detailed tutorial. https://briatte.github.io/ggnet/ Syntax is similar to plot Output the underlying organized struture (positions of nodes). Easy to add geom_xx Issues: No curved edges No self-loops No complex graphs For evolving graphs, cannot provide multiple facet directly. Need to fix the placement coordinates. set.seed(3212019) pggnet2=ggnet2(fb.net, # input `network` object mode = &quot;fruchtermanreingold&quot;, # layout from `network` pkg layout.par = list(cell.jitter=0.75), #can pass the layout args #node attribute node.color = &quot;conf&quot;, palette = &quot;Paired&quot;, #palette=&quot;Set3&quot;, node.size=5, #node.size=&quot;degree&quot;, #size.cut=3, # cut the size to three categories using quantiles #size=&quot;conf&quot;, #to manual mapping the size: size.palette=c(&quot;Atlantic Coast&quot;=1,...), #node.shape = &quot;conf&quot;, node.alpha = 0.5, #node.label = TRUE, #edge edge.color = c(&quot;color&quot;, &quot;grey50&quot;), #1st value: same col as node for same group. else 2nd args. edge.alpha = 0.5, edge.size=0.3, edge.lty = &quot;lty&quot;, #edge.label = 1, #edge.label.size=1, #legend color.legend = &quot;Conference&quot;, #legend.size = 10, #legend.position = &quot;bottom&quot;) )+ geom_point(aes(color = color), size = 3) # can be treat as ggplot object and add geom_xx layer pggnet2 ## treat it as dataframe to add geom_xx layer pggnet2$data%&gt;%names() ## [1] &quot;label&quot; &quot;alpha&quot; &quot;color&quot; &quot;shape&quot; &quot;size&quot; &quot;x&quot; &quot;y&quot; 5.5.4 geomnet Features: Input: dataframe Allow self-loops Allow facet (cannot fix the nodes) Issues: No available detailed tutorial. The underlying structured is not available. It is wrapped as a whole. (eg. if setting alpha, is for both nodes and edges; do not provide the positions of points) Obey the ggplot2 syntax “strictly”, less flexible #merge the vertex and edges ver.conf=football$vertices%&gt;%mutate(from=label)%&gt;%select(-label) fb.df=left_join(football$edges,ver.conf,by=&quot;from&quot;) # create data plot set.seed(3212019) pgeomnet= ggplot(data = fb.df, # input: dataframe aes(from_id = from, to_id = to)) + geom_net(layout.alg = &#39;fruchtermanreingold&#39;, aes(colour = value, group = value, linetype = factor(same.conf != 1)), linewidth = 0.5, size = 5, vjust = -0.75, alpha = 1) + theme_net() + #theme(legend.position = &quot;bottom&quot;) + scale_colour_brewer(&quot;Conference&quot;, palette = &quot;Paired&quot;) + guides(linetype = FALSE) pgeomnet ## the underlying dataframe is not point + line pgeomnet$data%&gt;%names() ## [1] &quot;from&quot; &quot;to&quot; &quot;same.conf&quot; &quot;value&quot; 5.5.5 ggnetwork Features: Available detailed tutorial, https://briatte.github.io/ggnetwork/ Input: igraph(need library(intergraph)) or network object Syntax is super userfriendly. ggnetwork provide the underlying dataframe use geom_edges and geom_nodes separately; can set edge/node-specific mapping within the geom_xx for labels geom_(node/edge)(text/label)[_repel]: geom_nodetext, geom_nodelabel, geom_nodetext_repel, geom_nodelabel_repel,geom_edgetext, geom_edgelabel, geom_edgetext_repel, geom_edgelabel_repel Allow curve edges (but is compatible with plotly) Can represent dynamic networks using facet with fixing the positions of node Issues: No self-loops ## igraph object fb.igra=graph_from_data_frame(football$edges[,1:2],directed = FALSE) V(fb.igra)$conf=football$vertices[V(fb.igra)$name, &quot;value&quot;] E(fb.igra)$same.conf=football$edges$same.conf E(fb.igra)$lty=ifelse(E(fb.igra)$same.conf == 1, 1, 2) #need to load this for igraph object #install.packages(&quot;intergraph&quot;) library(&quot;intergraph&quot;) #Tips: ctrl+shift+A to reformat set.seed(3212019) pggnetwork= ggplot( ggnetwork(# provide the underlying dataframe fb.igra, #input: network object layout = &quot;fruchtermanreingold&quot;, #layout cell.jitter = 0.75), #can pass layout parameter aes(x, y, xend = xend, yend = yend) ) + #mapping for edges geom_edges(aes(linetype = as.factor(same.conf)), #arrow = arrow(length = unit(6, &quot;pt&quot;), type = &quot;closed&quot;) #if directed color = &quot;grey50&quot;, curvature = 0.2, alpha=0.5 ) + geom_nodes(aes(color = conf), size = 5, alpha=0.5) + scale_color_brewer(&quot;Conference&quot;, palette = &quot;Paired&quot;) + scale_linetype_manual(values = c(2, 1)) + guides(linetype = FALSE) + theme_blank()+ geom_nodes(aes(color = conf), size = 3) # can be treat as ggplot object and add geom_xx layer pggnetwork ## treat it as dataframe to add geom_xx layer pggnetwork$data%&gt;%names() ## [1] &quot;x&quot; &quot;y&quot; &quot;conf&quot; &quot;na.x&quot; ## [5] &quot;vertex.names&quot; &quot;xend&quot; &quot;yend&quot; &quot;lty&quot; ## [9] &quot;na.y&quot; &quot;same.conf&quot; 5.5.6 Extensions of ggnet2,geomnet,ggnetwork Since the output is ggplot2 object, Interactive network visualization: ggplot2 + plotly Dynamic network: facet ggnetwork 5.5.6.1 ggplot2 + plotly library(&quot;plotly&quot;) ggplotly(pggnet2+coord_fixed())%&gt;%hide_guides() ggplotly(pgeomnet+coord_fixed())%&gt;%hide_guides() #if set the `curvature` of the edge, the plotly will not show. #ggplotly(pggnetwork+coord_fixed())%&gt;%hide_guides() pggnetwork2= ggplot( ggnetwork(# provide the underlying dataframe fb.igra, #input: network object layout = &quot;fruchtermanreingold&quot;, #layout cell.jitter = 0.75), #can pass layout parameter aes(x, y, xend = xend, yend = yend) ) + #mapping for edges geom_edges(aes(linetype = as.factor(same.conf)), #arrow = arrow(length = unit(6, &quot;pt&quot;), type = &quot;closed&quot;) #if directed color = &quot;grey50&quot;, #curvature = 0.2, alpha=0.5 ) + geom_nodes(aes(color = conf), size = 5, alpha=0.5) + scale_color_brewer(&quot;Conference&quot;, palette = &quot;Paired&quot;) + scale_linetype_manual(values = c(2, 1)) + guides(linetype = FALSE) + theme_blank()+ geom_nodes(aes(color = conf), size = 3) ggplotly(pggnetwork2+coord_fixed())%&gt;%hide_guides() 5.5.6.2 Facet dynamic network Recommend using ggnetwork ## create network names(email$edges) ## [1] &quot;From&quot; &quot;eID&quot; &quot;Date&quot; &quot;Subject&quot; &quot;to&quot; ## [6] &quot;month&quot; &quot;day&quot; &quot;year&quot; &quot;nrecipients&quot; names(email$nodes) ## [1] &quot;label&quot; &quot;LastName&quot; ## [3] &quot;FirstName&quot; &quot;BirthDate&quot; ## [5] &quot;BirthCountry&quot; &quot;Gender&quot; ## [7] &quot;CitizenshipCountry&quot; &quot;CitizenshipBasis&quot; ## [9] &quot;CitizenshipStartDate&quot; &quot;PassportCountry&quot; ## [11] &quot;PassportIssueDate&quot; &quot;PassportExpirationDate&quot; ## [13] &quot;CurrentEmploymentType&quot; &quot;CurrentEmploymentTitle&quot; ## [15] &quot;CurrentEmploymentStartDate&quot; &quot;MilitaryServiceBranch&quot; ## [17] &quot;MilitaryDischargeType&quot; &quot;MilitaryDischargeDate&quot; #edgelist: remove emails sent to all employees edges=email$edges%&gt;%filter(nrecipients &lt; 54)%&gt;%select(From,to,day) # Create network em.net &lt;- network(edges[, 1:2]) # assign edge attributes (day) set.edge.attribute(em.net, &quot;day&quot;, edges[, 3]) # assign vertex attributes (employee type) em.cet &lt;- as.character(email$nodes$CurrentEmploymentType) names(em.cet) = email$nodes$label em.net %v% &quot;curr_empl_type&quot; &lt;- em.cet[ network.vertex.names(em.net) ] set.seed(3212019) ggplot( ggnetwork( em.net, arrow.gap = 0.02, by = &quot;day&quot;, layout = &quot;kamadakawai&quot; ), aes(x, y, xend = xend, yend = yend) ) + geom_edges( aes(color = curr_empl_type), alpha = 0.25, arrow = arrow(length = unit(5, &quot;pt&quot;), type = &quot;closed&quot;) ) + geom_nodes(aes(color = curr_empl_type), size = 1.5) + scale_color_brewer(&quot;Employment Type&quot;, palette = &quot;Set1&quot;) + facet_wrap( .~ day, nrow = 2, labeller = &quot;label_both&quot;) + theme_facet(legend.position = &quot;bottom&quot;) ## Warning in fortify.network(x, ...): duplicated edges detected 5.5.6.3 Comments The main part of network visualization is the layout of the nodes.All the mentioned R pkg automatically generate the positions of points in the layer. If you want to build a network with pre-specified locations for each node, just draw the points and lines using plot or ggplot. See Chapter 8 Overlaying networks on geographic in http://kateto.net/network-visualization Figure 5.1: network visualization from kateto 5.6 Interactive network visualization Apart from the ggplot2 + plotly shown in Chapter @ref{ggplotly}, other available packages: ggigraph networkD3 threejs visNetwork (nice tutorial; Recommended) 5.7 Dynamic network 5.7.1 Introduction ndtv Official website: https://cran.r-project.org/web/packages/ndtv/vignettes/ndtv.pdf Nice tutorial: http://statnet.csde.washington.edu/workshops/SUNBELT/current/ndtv/ndtv_workshop.html#understanding-how-networkdynamic-works http://kateto.net/network-visualization http://statnet.csde.washington.edu/workshops/SUNBELT/current/ndtv/ndtv-d3_vignette.html gganimate https://gganimate.com/ (ggplot2+gganimate) "],
["amen-packages.html", "Chapter 6 amen packages 6.1 Outline 6.2 ame() 6.3 Input: prepare the dataset 6.4 Fit the model: the Gaussian AME model (continuous Y) 6.5 Choice of model in ame: binary, ordinal, discrete or sparse relations 6.6 symmetric outcome: symmetric=TRUE 6.7 ame_rep() for longitudinal outcome", " Chapter 6 amen packages 6.1 Outline Gaussian AME model: ame Different relation: ame(...,model=,...) ordinal data censored and fixed rank nomination data sampled or missing data symmetric relation: ame(...,symmetric=TRUE,...) repeated measures data: longitudal data ame_rep(Y,Xdyad,Xrow,Xcol) Tutorial: https://github.com/pdhoff/amen/blob/master/inst/doc/amen.pdf 6.2 ame() \\[z_{i,j}=\\beta_d^Tx_{d,i,j}+\\beta_r^Tx_{r,i}+\\beta_c^Tx_{c,j}+\\mu+a_i+b_j+u_i^Tv_j+\\epsilon_{i,j}\\] \\[y_{i,j}=g(z_{i,j})\\] ame(Y,Xd,Xr,Xc,model,R,rvar=TRUE,cvar=TRUE,dcor=TRUE,symmetric=FALSE) model: “nrm”: continuous Y “bin”: binary Y “ord”: ordinal Y “cbin”: censored binary Y “frn”: fixed rank Y “rrl”: row ranks (relationships across rows of Y are not directly comparable) Y: named matrix \\(n\\times n \\times p_d\\) Xd: named array (dyadic covariates) Xr: named matrix (nodal covariates) Xc: named matrix (nodal covariates) R: number (dimension of latent factor) rvar,cvar,dcor: whether to include row/column/corr effect or not symmetric: symmetric outcome or not 6.3 Input: prepare the dataset prepare the dataset Get the Xnode,Xdyad from igraph object. Get the Xnode,Xdyad from edgelist dataframe. library(igraph) library(igraphdata) library(dplyr) From igraph object: data(&quot;USairports&quot;) ?USairports USairports ## IGRAPH bf6202d DN-- 755 23473 -- US airports ## + attr: name (g/c), name (v/c), City (v/c), Position (v/c), ## | Carrier (e/c), Departures (e/n), Seats (e/n), Passengers (e/n), ## | Aircraft (e/n), Distance (e/n) ## + edges from bf6202d (vertex names): ## [1] BGR-&gt;JFK BGR-&gt;JFK BOS-&gt;EWR ANC-&gt;JFK JFK-&gt;ANC LAS-&gt;LAX MIA-&gt;JFK ## [8] EWR-&gt;ANC BJC-&gt;MIA MIA-&gt;BJC TEB-&gt;ANC JFK-&gt;LAX LAX-&gt;JFK LAX-&gt;SFO ## [15] AEX-&gt;LAS BFI-&gt;SBA ELM-&gt;PIT GEG-&gt;SUN ICT-&gt;PBI LAS-&gt;LAX LAS-&gt;PBI ## [22] LAS-&gt;SFO LAX-&gt;LAS PBI-&gt;AEX PBI-&gt;ICT PIT-&gt;VCT SFO-&gt;LAX VCT-&gt;DWH ## [29] IAD-&gt;JFK ABE-&gt;CLT ABE-&gt;HPN AGS-&gt;CLT AGS-&gt;CLT AVL-&gt;CLT AVL-&gt;CLT ## [36] AVP-&gt;CLT AVP-&gt;PHL BDL-&gt;CLT BHM-&gt;CLT BHM-&gt;CLT BNA-&gt;CLT BNA-&gt;CLT ## + ... omitted several edges #For vertex attributes -Xnode Xnode_ls=vertex_attr(USairports) Xnode=matrix(unlist(Xnode_ls),ncol=length(Xnode_ls)) colnames(Xnode)=names(Xnode_ls) rownames(Xnode)=Xnode_ls$name Xnode=Xnode[,-1] #For edge attributes - Xdyad Xdyad_ls=edge_attr(USairports) Xdyad=array(c(as_adjacency_matrix(USairports,sparse = FALSE),unlist(Xdyad_ls)),dim=c(nrow(Xnode),nrow(Xnode),length(Xdyad_ls)+1)) dimnames(Xdyad)[[1]]=dimnames(Xdyad)[[2]]=Xnode_ls$name dimnames(Xdyad)[[3]]=c(&quot;relation&quot;,names(Xdyad_ls)) From dataframe: transfer it to a igraph then to the array may be the easiest. #Xdyad df=igraph::as_data_frame(USairports) net=graph_from_data_frame(df) vnames=V(net)$name Xdyad_ls=edge_attr(USairports) Xdyad=array(c(as_adjacency_matrix(USairports,sparse = FALSE),unlist(Xdyad_ls)),dim=c(nrow(Xnode),nrow(Xnode),length(Xdyad_ls)+1)) dimnames(Xdyad)[[1]]=dimnames(Xdyad)[[2]]=vnames dimnames(Xdyad)[[3]]=c(&quot;relation&quot;,names(Xdyad_ls)) #Xnode #If your nodal attributes stored in a data.frame Xnode_df=as.data.frame(Xnode)%&gt;%mutate(Vertex=rownames(Xnode))%&gt;%arrange(Vertex) head(Xnode_df) ## City Position Vertex ## 1 Peach Springs, AZ N355925 W1134859 1G4 ## 2 Bradley Lake, AK N565311 W1340930 A23 ## 3 Pogo Mines, AK N592603 W1514228 A27 ## 4 Kiluda Bay, AK N570308 W1352046 A29 ## 5 Allentown/Bethlehem/Easton, PA N403909 W0752625 ABE ## 6 Abilene, TX N322441 W0994055 ABI #Xnode #need to match the order of Xnode to the order of the Xdyad Xnode_df=Xnode_df%&gt;%arrange(match(Vertex,vnames)) Xnode=as.matrix(Xnode_df) rownames(Xnode)=Xnode[,&quot;Vertex&quot;] Xnode=Xnode[,-3] Xnode%&gt;%head() ## City Position ## BGR &quot;Bangor, ME&quot; &quot;N444827 W0684941&quot; ## BOS &quot;Boston, MA&quot; &quot;N422152 W0710019&quot; ## ANC &quot;Anchorage, AK&quot; &quot;N611028 W1495947&quot; ## JFK &quot;New York, NY&quot; &quot;N403823 W0734644&quot; ## LAS &quot;Las Vegas, NV&quot; &quot;N360449 W1150908&quot; ## MIA &quot;Miami, FL&quot; &quot;N254736 W0801726&quot; 6.4 Fit the model: the Gaussian AME model (continuous Y) 6.4.1 The Gaussian AME model #install.packages(&quot;amen&quot;) library(amen) library(ggplot2) \\(y_{i,j}=\\mu+a_i+b_j+\\epsilon_{i,j}\\) # use the trade data (export) from top 30 countries ranked by gdp data(IR90s) names(IR90s) # list ## [1] &quot;dyadvars&quot; &quot;nodevars&quot; dim(IR90s$dyadvars) #- array ## [1] 130 130 5 dimnames(IR90s$dyadvars) ## [[1]] ## [1] &quot;AFG&quot; &quot;ALB&quot; &quot;ALG&quot; &quot;ANG&quot; &quot;ARG&quot; &quot;AUL&quot; &quot;AUS&quot; &quot;BAH&quot; &quot;BEL&quot; &quot;BEN&quot; &quot;BFO&quot; ## [12] &quot;BHU&quot; &quot;BNG&quot; &quot;BOL&quot; &quot;BOT&quot; &quot;BRA&quot; &quot;BUI&quot; &quot;BUL&quot; &quot;CAM&quot; &quot;CAN&quot; &quot;CAO&quot; &quot;CDI&quot; ## [23] &quot;CEN&quot; &quot;CHA&quot; &quot;CHL&quot; &quot;CHN&quot; &quot;COL&quot; &quot;COM&quot; &quot;CON&quot; &quot;COS&quot; &quot;CUB&quot; &quot;CYP&quot; &quot;DEN&quot; ## [34] &quot;DJI&quot; &quot;DOM&quot; &quot;DRC&quot; &quot;ECU&quot; &quot;EGY&quot; &quot;EQG&quot; &quot;FIN&quot; &quot;FJI&quot; &quot;FRN&quot; &quot;GAB&quot; &quot;GAM&quot; ## [45] &quot;GHA&quot; &quot;GNB&quot; &quot;GRC&quot; &quot;GUA&quot; &quot;GUI&quot; &quot;GUY&quot; &quot;HAI&quot; &quot;HON&quot; &quot;HUN&quot; &quot;IND&quot; &quot;INS&quot; ## [56] &quot;IRE&quot; &quot;IRN&quot; &quot;IRQ&quot; &quot;ISR&quot; &quot;ITA&quot; &quot;JAM&quot; &quot;JOR&quot; &quot;JPN&quot; &quot;KEN&quot; &quot;LAO&quot; &quot;LBR&quot; ## [67] &quot;LES&quot; &quot;LIB&quot; &quot;MAA&quot; &quot;MAG&quot; &quot;MAL&quot; &quot;MAS&quot; &quot;MAW&quot; &quot;MEX&quot; &quot;MLI&quot; &quot;MON&quot; &quot;MOR&quot; ## [78] &quot;MYA&quot; &quot;MZM&quot; &quot;NAM&quot; &quot;NEP&quot; &quot;NEW&quot; &quot;NIC&quot; &quot;NIG&quot; &quot;NIR&quot; &quot;NOR&quot; &quot;NTH&quot; &quot;OMA&quot; ## [89] &quot;PAK&quot; &quot;PAN&quot; &quot;PAR&quot; &quot;PHI&quot; &quot;PNG&quot; &quot;POL&quot; &quot;POR&quot; &quot;PRK&quot; &quot;QAT&quot; &quot;ROK&quot; &quot;RUM&quot; ## [100] &quot;RWA&quot; &quot;SAF&quot; &quot;SAL&quot; &quot;SAU&quot; &quot;SEN&quot; &quot;SIE&quot; &quot;SIN&quot; &quot;SOM&quot; &quot;SPN&quot; &quot;SRI&quot; &quot;SUD&quot; ## [111] &quot;SWA&quot; &quot;SWD&quot; &quot;SWZ&quot; &quot;SYR&quot; &quot;TAW&quot; &quot;TAZ&quot; &quot;THI&quot; &quot;TOG&quot; &quot;TRI&quot; &quot;TUN&quot; &quot;TUR&quot; ## [122] &quot;UAE&quot; &quot;UGA&quot; &quot;UKG&quot; &quot;URU&quot; &quot;USA&quot; &quot;VEN&quot; &quot;YEM&quot; &quot;ZAM&quot; &quot;ZIM&quot; ## ## [[2]] ## [1] &quot;AFG&quot; &quot;ALB&quot; &quot;ALG&quot; &quot;ANG&quot; &quot;ARG&quot; &quot;AUL&quot; &quot;AUS&quot; &quot;BAH&quot; &quot;BEL&quot; &quot;BEN&quot; &quot;BFO&quot; ## [12] &quot;BHU&quot; &quot;BNG&quot; &quot;BOL&quot; &quot;BOT&quot; &quot;BRA&quot; &quot;BUI&quot; &quot;BUL&quot; &quot;CAM&quot; &quot;CAN&quot; &quot;CAO&quot; &quot;CDI&quot; ## [23] &quot;CEN&quot; &quot;CHA&quot; &quot;CHL&quot; &quot;CHN&quot; &quot;COL&quot; &quot;COM&quot; &quot;CON&quot; &quot;COS&quot; &quot;CUB&quot; &quot;CYP&quot; &quot;DEN&quot; ## [34] &quot;DJI&quot; &quot;DOM&quot; &quot;DRC&quot; &quot;ECU&quot; &quot;EGY&quot; &quot;EQG&quot; &quot;FIN&quot; &quot;FJI&quot; &quot;FRN&quot; &quot;GAB&quot; &quot;GAM&quot; ## [45] &quot;GHA&quot; &quot;GNB&quot; &quot;GRC&quot; &quot;GUA&quot; &quot;GUI&quot; &quot;GUY&quot; &quot;HAI&quot; &quot;HON&quot; &quot;HUN&quot; &quot;IND&quot; &quot;INS&quot; ## [56] &quot;IRE&quot; &quot;IRN&quot; &quot;IRQ&quot; &quot;ISR&quot; &quot;ITA&quot; &quot;JAM&quot; &quot;JOR&quot; &quot;JPN&quot; &quot;KEN&quot; &quot;LAO&quot; &quot;LBR&quot; ## [67] &quot;LES&quot; &quot;LIB&quot; &quot;MAA&quot; &quot;MAG&quot; &quot;MAL&quot; &quot;MAS&quot; &quot;MAW&quot; &quot;MEX&quot; &quot;MLI&quot; &quot;MON&quot; &quot;MOR&quot; ## [78] &quot;MYA&quot; &quot;MZM&quot; &quot;NAM&quot; &quot;NEP&quot; &quot;NEW&quot; &quot;NIC&quot; &quot;NIG&quot; &quot;NIR&quot; &quot;NOR&quot; &quot;NTH&quot; &quot;OMA&quot; ## [89] &quot;PAK&quot; &quot;PAN&quot; &quot;PAR&quot; &quot;PHI&quot; &quot;PNG&quot; &quot;POL&quot; &quot;POR&quot; &quot;PRK&quot; &quot;QAT&quot; &quot;ROK&quot; &quot;RUM&quot; ## [100] &quot;RWA&quot; &quot;SAF&quot; &quot;SAL&quot; &quot;SAU&quot; &quot;SEN&quot; &quot;SIE&quot; &quot;SIN&quot; &quot;SOM&quot; &quot;SPN&quot; &quot;SRI&quot; &quot;SUD&quot; ## [111] &quot;SWA&quot; &quot;SWD&quot; &quot;SWZ&quot; &quot;SYR&quot; &quot;TAW&quot; &quot;TAZ&quot; &quot;THI&quot; &quot;TOG&quot; &quot;TRI&quot; &quot;TUN&quot; &quot;TUR&quot; ## [122] &quot;UAE&quot; &quot;UGA&quot; &quot;UKG&quot; &quot;URU&quot; &quot;USA&quot; &quot;VEN&quot; &quot;YEM&quot; &quot;ZAM&quot; &quot;ZIM&quot; ## ## [[3]] ## [1] &quot;conflicts&quot; &quot;exports&quot; &quot;distance&quot; &quot;shared_igos&quot; &quot;polity_int&quot; gdp=IR90s$nodevars[,2] topgdp=which(gdp&gt;=sort(gdp,decreasing = TRUE)[30]) Y=log(IR90s$dyadvars[topgdp,topgdp,2]+1) Y[1:5,1:5] ## ARG AUL BEL BNG BRA ## ARG NA 0.05826891 0.2468601 0.03922071 1.76473080 ## AUL 0.0861777 NA 0.3784364 0.10436002 0.21511138 ## BEL 0.2700271 0.35065687 NA 0.01980263 0.39877612 ## BNG 0.0000000 0.01980263 0.1222176 NA 0.01980263 ## BRA 1.6937791 0.23901690 0.6205765 0.03922071 NA 6.4.2 Social relations model (SRM) \\[y_{i,j}=\\mu+a_i+b_j+\\epsilon_{i,j}\\] Input: Y - a named matrix # fit the model fit_SRM=ame(Y,model=&quot;nrm&quot;,plot=FALSE,print = FALSE) #normal AME model; by default: niter=10,000; save every 25; burnin=500 #output names(fit_SRM) ## [1] &quot;BETA&quot; &quot;VC&quot; &quot;APM&quot; &quot;BPM&quot; &quot;U&quot; &quot;V&quot; &quot;UVPM&quot; &quot;EZ&quot; &quot;YPM&quot; &quot;GOF&quot; mean(fit_SRM$BETA) #mu_hat ## [1] 0.6616995 (muhat=mean(Y,na.rm = TRUE)) ## [1] 0.680044 apply(fit_SRM$VC,2,mean) # covariance ## va cab vb rho ve ## 0.2809375 0.2364107 0.2722367 0.8577201 0.2387065 ahat=rowMeans(Y,na.rm = TRUE)-mean(Y,na.rm = TRUE) bhat=colMeans(Y,na.rm = TRUE)-mean(Y,na.rm = TRUE) (corab=cov(cbind(ahat,bhat))) ## ahat bhat ## ahat 0.2407563 0.2290788 ## bhat 0.2290788 0.2289489 (R=Y-(muhat+outer(ahat,bhat,&quot;+&quot;))) ## ARG AUL BEL BNG BRA ## ARG NA -0.138060630 -0.23544663 0.312875331 1.63527007 ## AUL -0.16956545 NA -0.43273546 0.049149445 -0.24321454 ## BEL -0.21364558 -0.402467428 NA -0.263337516 -0.28747937 ## BNG 0.28580442 0.036155468 -0.14740670 NA 0.10302428 ## BRA 1.46096778 -0.263245960 -0.16766355 0.006942009 NA ## CAN -0.17367495 0.008106998 -0.30453842 -0.086801691 0.10095129 ## CHN -0.28802510 0.388372858 -0.30185657 -0.100071302 -0.36177499 ## COL 0.29564048 -0.022129678 -0.17829524 0.437904147 0.14811749 ## EGY 0.25762273 -0.001878520 -0.21162833 0.468105637 0.07484259 ## FRN -0.23537558 -0.357291724 1.60148082 -0.635013732 -0.29042291 ## IND -0.01417791 -0.043803438 0.06583220 0.637489812 -0.13599932 ## INS -0.13556799 0.325168886 -0.32399791 0.102005862 -0.26539140 ## IRN 0.03803907 -0.221462181 -0.21728509 0.248521975 0.20701985 ## ITA -0.04846778 -0.160389153 0.55599067 -0.545832983 0.13043260 ## JPN -0.77132395 0.587375094 -0.43066468 -0.739867701 -0.32622191 ## MEX 0.31445810 -0.176365556 -0.33770028 0.171400968 0.25071177 ## NTH -0.35738098 -0.398742583 2.11143771 -0.261291065 -0.33187377 ## PAK 0.23763171 0.043687688 -0.21538203 0.504539360 0.04480512 ## PHI 0.06168391 -0.043764695 -0.40838500 0.252266154 -0.11162848 ## POL 0.20701146 -0.072196296 0.01406599 0.387935563 0.10589815 ## ROK -0.16700865 0.192608090 -0.72935785 -0.075675369 -0.15336832 ## SAF 0.15365832 -0.024443477 0.02378144 0.214428959 0.01016447 ## SAU -0.31498022 -0.149696308 -0.66524792 -0.029087793 0.26547920 ## SPN 0.27723450 -0.300832361 0.37460163 -0.073409842 0.03430044 ## SWD -0.10048691 0.088730653 0.60848888 -0.069246392 -0.02568636 ## TAW -0.26831811 0.249196248 -0.55259409 -0.035524670 -0.25764209 ## THI -0.10070850 0.175886982 -0.21970992 0.118516213 -0.24823149 ## TUR 0.13431957 -0.106144478 -0.09025494 0.324999845 -0.04884512 ## UKG -0.58169724 0.242724120 1.08346413 -0.559239933 -0.46004035 ## USA -0.16801641 0.489417309 -0.09654737 -1.359712929 0.35838719 ## CAN CHN COL EGY FRN ## ARG -0.25750202 -0.218112259 0.379283330 0.335425500 -0.50910133 ## AUL -0.14391354 0.487239680 -0.095293669 0.110238741 -0.63291671 ## BEL -0.54194908 -0.388986507 -0.266064828 -0.196471710 1.70626150 ## BNG -0.11692294 -0.394894646 0.426451271 0.384104903 -0.44483896 ## BRA -0.12658392 -0.164793316 0.229919068 0.037860427 -0.12880792 ## CAN NA 0.192689487 0.053983278 -0.198984116 -0.33600377 ## CHN 0.38302118 NA -0.495164243 -0.354867835 0.13190355 ## COL -0.06750000 -0.482167329 NA 0.325721722 -0.50130398 ## EGY -0.19296065 -0.432645788 0.398269579 NA -0.45714730 ## FRN -0.10102537 -0.153364961 -0.500193843 -0.216018305 NA ## IND -0.19454812 0.059967577 0.088369094 0.172028032 -0.36779412 ## INS -0.30654846 0.403748876 -0.033387417 0.016730889 -0.53243819 ## IRN -0.31901826 -0.319886607 0.178685918 0.136339550 -0.15494203 ## ITA -0.16692944 0.001411349 -0.407648796 -0.070228744 1.55611087 ## JPN 0.46908045 1.458427987 -0.647484216 -0.878718373 -0.02644183 ## MEX 1.10390222 -0.527509119 0.440818988 0.069168873 -0.53184292 ## NTH -0.50556372 -0.410390081 -0.312044308 -0.159546595 1.24932142 ## PAK -0.12152866 -0.112884023 0.358475938 0.325981866 -0.45832611 ## PHI -0.05400932 0.025341858 0.192380427 0.150034059 -0.62442162 ## POL -0.20675566 -0.438707890 0.328049837 0.333461456 -0.07819955 ## ROK 0.12887478 1.397776911 -0.249505355 -0.227078508 -0.54070127 ## SAF -0.24137825 -0.190864320 0.184102035 0.112196864 -0.42706692 ## SAU -0.43764211 -0.523791529 -0.184283699 0.056089216 0.02690898 ## SPN -0.36535493 -0.457920467 0.062013184 -0.006544036 1.60143892 ## SWD -0.14378535 -0.124608851 -0.045362235 0.028029281 0.30922160 ## TAW 0.17100764 1.413411595 -0.240344421 -0.213304377 -0.48486254 ## THI -0.09287004 0.443899383 -0.008380224 -0.012358346 -0.32430698 ## TUR -0.25150906 -0.416121434 0.265114119 0.417978469 -0.01949016 ## UKG 0.30907514 -0.173171638 -0.577625928 -0.451674396 1.21014874 ## USA 2.44390557 0.493707570 -0.071731672 -0.594444456 0.38161638 ## IND INS IRN ITA JPN ## ARG 0.12233225 0.062477771 0.503935683 -0.207345734 -0.720363646 ## AUL 0.31608726 0.612026831 0.111444799 -0.377986917 1.199289037 ## BEL 0.54742550 -0.369674544 -0.087705809 0.972810738 -0.706327549 ## BNG 0.20872090 0.162892849 0.377402340 -0.347264973 -0.831081422 ## BRA -0.11009861 -0.126656283 0.148869672 0.005514737 -0.005172175 ## CAN -0.21823527 -0.065374795 0.010165397 -0.260472972 0.698722565 ## CHN -0.16138315 -0.053643104 -0.334087963 -0.008877084 1.527796818 ## COL 0.13101767 0.104509668 0.289748777 -0.412091633 -0.697192715 ## EGY 0.31527181 0.134711157 0.309999935 0.149907060 -0.850213278 ## FRN -0.45419538 -0.482181747 -0.291211963 1.563964415 -0.159540500 ## IND NA 0.121773776 0.136055086 -0.179982776 -0.061472319 ## INS 0.09532398 NA -0.064498647 -0.446133793 1.259109783 ## IRN 0.39796902 0.136288886 NA 0.157305726 0.248951379 ## ITA -0.33484659 -0.451783448 0.022689324 NA -0.186033475 ## JPN -0.37347476 0.522930506 -0.460865139 -0.490816315 NA ## MEX -0.09664567 -0.103724604 0.043048224 -0.670364313 -0.285816186 ## NTH -0.30663112 -0.268753590 -0.188139432 1.146405249 -0.763248726 ## PAK 0.16918351 0.189327200 0.328475202 -0.407143096 -0.602324847 ## PHI -0.03501185 -0.004167284 0.226328416 -0.631346237 0.408153473 ## POL 0.11941733 0.074149555 0.269050575 0.134876289 -0.930383351 ## ROK -0.04511087 0.403568310 -0.003768855 -0.581148577 0.979043460 ## SAF 0.08821251 -0.023655341 0.115063752 0.397588251 0.001665143 ## SAU 0.60958685 0.072835799 -0.141525081 -0.135394695 0.862585232 ## SPN -0.26162927 -0.235986589 0.013274379 1.037508198 -0.735832846 ## SWD -0.20862783 -0.154567937 -0.031849185 0.184997624 -0.406276962 ## TAW -0.23988349 0.254384458 -0.328614065 -0.532525363 0.897056769 ## THI -0.09296008 0.208935980 0.050403550 -0.480267175 0.822712249 ## TUR 0.06587136 0.020875748 0.459563758 0.356238545 -0.915357528 ## UKG 0.03681840 -0.492835042 -0.348181213 0.784074660 -0.190145269 ## USA -0.51389508 -0.366074511 -1.484337802 -0.238101334 1.189580283 ## MEX NTH PAK PHI POL ## ARG 0.124973579 -0.163851688 0.26677001 0.042982916 0.119797247 ## AUL -0.310989745 -0.615849561 0.10277947 0.207138727 -0.228299303 ## BEL -0.401049524 1.634785609 -0.23496497 -0.393852530 0.068097435 ## BNG 0.090795880 -0.306103608 0.46040420 0.245812999 0.293639793 ## BRA 0.275277690 -0.001306934 -0.02977357 -0.092132674 -0.077922490 ## CAN 0.452297063 -0.454111393 -0.14273855 -0.223616702 -0.253081581 ## CHN -0.269940422 0.057863812 -0.23060758 -0.080421871 -0.271563669 ## COL 0.164580663 -0.295447541 0.37275063 0.187429818 0.264815414 ## EGY 0.062614189 -0.360718556 0.41280442 0.207680976 0.255507771 ## FRN -0.318888621 0.799615236 -0.53671417 -0.645662010 0.084221278 ## IND -0.145816836 -0.343502900 0.15790252 0.050543246 0.047076746 ## INS -0.181831266 -0.237372227 0.06375980 0.154997473 -0.082623168 ## IRN -0.137166846 -0.051777017 0.33893257 0.288201907 0.192927858 ## ITA -0.248226920 0.258244786 -0.38974953 -0.671144170 0.491961966 ## JPN 0.004025465 -0.109779114 -0.52063404 0.410646473 -0.916539749 ## MEX NA -0.513941502 0.11619778 -0.059270735 -0.011443940 ## NTH -0.511898158 NA -0.26420227 -0.351083013 0.238341064 ## PAK 0.042623174 -0.365420878 NA 0.197446137 0.225664460 ## PHI 0.022239475 -0.038082507 0.18711264 NA 0.069421246 ## POL 0.031234280 0.071721116 0.33263434 0.157069705 NA ## ROK 0.129309204 -0.547536198 -0.11801421 0.327776769 -0.121976834 ## SAF -0.132321994 -0.353130475 0.17883425 0.003175342 0.060571588 ## SAU -0.471148926 0.055256995 0.30514475 0.313262336 -0.307242881 ## SPN 0.194343258 0.360879345 -0.10009708 -0.276028150 0.186566145 ## SWD -0.179535571 0.503706625 -0.08699767 -0.253969344 0.308312843 ## TAW -0.052411936 0.187455423 -0.18336990 0.358358017 -0.270433067 ## THI -0.138874566 -0.093140180 0.08973034 0.169517278 -0.074914667 ## TUR -0.050932801 -0.069031625 0.31755465 0.084377812 0.216761995 ## UKG -0.554981679 1.055749094 -0.41147145 -0.638756464 0.008691453 ## USA 2.229606283 0.171599983 -0.98303369 -0.083441062 -1.005014825 ## ROK SAF SAU SPN SWD ## ARG -0.362233457 0.19553986 3.860386e-05 0.14735374 -0.06359310 ## AUL 0.860561467 0.07592911 -5.323656e-02 -0.54508562 -0.30065074 ## BEL -0.598980861 -0.14503179 -2.107145e-01 0.58202663 0.44895404 ## BNG -0.270629009 0.25980223 1.834506e-01 -0.21711215 0.14908928 ## BRA -0.121161499 -0.05996261 1.255901e-02 -0.05215012 -0.20173297 ## CAN 0.181178447 -0.19144664 -1.989677e-01 -0.50389239 -0.30121427 ## CHN 0.727143852 -0.32029690 -2.660169e-01 -0.11278727 -0.22101478 ## COL -0.289791477 0.21136938 1.448700e-01 -0.14038186 0.13839675 ## EGY -0.186543399 0.26117934 3.441694e-01 -0.10346365 0.15864791 ## FRN -0.476336945 -0.28735326 -2.090332e-01 1.54531048 0.35832183 ## IND -0.135396692 0.06611456 2.441142e-01 -0.25510686 -0.10935241 ## INS 0.674863870 -0.13366139 8.669695e-03 -0.20321934 -0.29281171 ## IRN 0.313222493 0.46946173 -2.547492e-02 -0.03124152 0.07721459 ## ITA -0.349938573 -0.19521948 -7.890806e-02 1.08235528 0.12418180 ## JPN 1.312006916 -0.26018320 -8.512040e-02 -0.36112944 -0.39401347 ## MEX -0.356498469 -0.01591308 -9.264560e-02 0.17996748 -0.17550867 ## NTH -0.477808270 -0.14222111 -2.415952e-01 0.62127121 0.81077717 ## PAK -0.141540504 0.21162953 2.452869e-01 -0.19411571 0.10955188 ## PHI -0.007832581 0.07452155 -1.178041e-02 -0.40466298 -0.08498157 ## POL -0.321272456 0.16140080 1.043692e-01 -0.21725033 0.44620262 ## ROK NA -0.26446981 -3.569072e-02 -0.39713177 -0.40702337 ## SAF 0.115341994 NA 4.135417e-02 -0.12570070 -0.12281876 ## SAU 0.907089702 -0.02884924 NA -0.13469994 -0.34386266 ## SPN -0.530825059 -0.12089638 -7.674545e-02 NA 0.12915560 ## SWD -0.421035710 -0.07847988 -8.955842e-02 0.11593934 NA ## TAW 0.113849725 -0.01693698 -2.010367e-01 -0.47075430 -0.27846171 ## THI -0.088784337 -0.03655959 -2.442148e-02 -0.28541641 -0.16095996 ## TUR -0.312104881 0.13730491 3.096975e-01 -0.05875336 0.06960934 ## UKG -0.383108089 0.28418233 2.598720e-01 0.77849980 0.75819531 ## USA 0.853908792 -0.43607760 1.619809e-02 -0.25615041 -0.33218743 ## TAW THI TUR UKG USA ## ARG -0.26786838 -0.016537857 0.07753578 -0.798550230 -0.73684143 ## AUL 0.53918578 0.226666204 -0.17534350 -0.214520275 -0.45750012 ## BEL -0.50461578 -0.298895772 0.03156665 1.070656955 -0.36375742 ## BNG -0.17626393 0.084918888 0.17899253 -0.473750553 -0.77454325 ## BRA -0.21013372 -0.131415942 -0.12831408 -0.353707259 0.20859124 ## CAN -0.03431240 -0.255679721 -0.30028947 0.203947873 2.70296369 ## CHN 0.06467976 0.149454205 -0.39606323 0.195394892 1.36350552 ## COL -0.22469678 0.026633741 0.12070738 -0.552955061 -0.00972408 ## EGY -0.17517524 0.056737196 0.28801196 -0.443091744 -1.19778413 ## FRN -0.16328266 -0.450948644 0.14575385 1.259912772 0.19044508 ## IND -0.22455149 0.148550901 -0.02612952 0.002654294 -0.01334986 ## INS 0.39885516 0.104268739 -0.21609140 -0.402471787 0.01458823 ## IRN -0.06933650 -0.000327536 0.36884939 -0.816826086 -1.85438126 ## ITA -0.43426528 -0.467722476 0.47941273 0.770347252 0.20546309 ## JPN 1.49642155 1.161041251 -0.59372709 0.319721049 1.48870792 ## MEX -0.27003857 -0.145459754 -0.10695597 -0.667542199 2.28170453 ## NTH -0.18711089 -0.369913379 0.05293275 1.350794221 -0.40898934 ## PAK -0.08867515 0.074101969 0.15887322 -0.387575206 -0.87656442 ## PHI 0.31687896 0.209481853 -0.05507832 -0.327933130 0.32836696 ## POL -0.13756227 0.061124511 0.15519815 -0.217880168 -1.24136475 ## ROK 0.63998897 0.315742053 -0.15836913 -0.225091737 0.73090586 ## SAF 0.17314948 -0.067029836 0.05279630 0.101639269 -0.66212862 ## SAU 0.18137689 -0.063192560 0.33691229 -0.457899109 0.13950385 ## SPN -0.51890365 -0.340479899 0.16742710 0.708989028 -0.56335572 ## SWD -0.27058116 -0.190722184 0.08687133 0.664955520 -0.21075662 ## TAW NA 0.509091062 -0.30860455 -0.105638796 0.99065212 ## THI 0.27322207 NA -0.19941423 -0.225385198 0.40671073 ## TUR -0.22647348 -0.047902314 NA -0.064008153 -0.74554048 ## UKG -0.46121227 -0.423269125 0.01968215 NA 0.54460268 ## USA 0.71724273 -0.010565387 -0.48288722 0.699873295 NA cov(cbind(c(R),c(t(R))),use=&quot;complete&quot;) #ignore the NAs ## [,1] [,2] ## [1,] 0.2212591 0.1900891 ## [2,] 0.1900891 0.2212591 ggplot(data=data.frame(anova=ahat,posterior=fit_SRM$APM),aes(x=anova,y=posterior))+ geom_point()+geom_abline(slope=1,intercept = 0)+ coord_fixed()+theme_bw() ggplot(data=data.frame(anova=bhat,posterior=fit_SRM$BPM),aes(x=anova,y=posterior))+ geom_point()+geom_abline(slope=1,intercept = 0)+ coord_fixed()+theme_bw() fit_SRM$GOF[1:2,] #statistics to check the goodness of fitting ## sd.rowmean sd.colmean dyad.dep triad.dep ## obs 0.4906692 0.4784861 0.9392867 0.20403144 ## 0.5067037 0.4927832 0.9439214 -0.04290418 fit_SRM$EZ[1,] #outer(fit_SRM$APM,fit_SRM$BPM,&quot;+&quot;)+mean(fit_SRM$BETA) ## ARG AUL BEL BNG BRA CAN ## -0.07794040 0.20119396 0.47274114 -0.27231126 0.12639108 0.39109046 ## CHN COL EGY FRN IND INS ## 0.65814039 -0.21862131 -0.18080266 0.87439754 0.04244846 0.05873294 ## IRN ITA JPN MEX NTH PAK ## -0.12913288 0.76432070 1.14712258 0.11145944 0.64902071 -0.20233784 ## PHI POL ROK SAF SAU SPN ## -0.02683689 -0.08070833 0.48956943 -0.04639155 0.03904056 0.46910842 ## SWD TAW THI TUR UKG USA ## 0.10333439 0.40538545 0.14927293 0.03727601 0.95566614 1.86031544 missing dyadic data Can fill the NAs by MCMC approximation. Appropriate when missing at random. (many types of link tracing designs, such as egocentric and snowball sampling) fit_SRM$YPM[1,] #estimate of Y: add epsilon ## ARG AUL BEL BNG BRA ## NA 0.208100702 0.495727907 -0.239767170 0.121767896 ## CAN CHN COL EGY FRN ## 0.380297124 0.676787809 -0.168728890 -0.182872326 0.882133875 ## IND INS IRN ITA JPN ## 0.081284533 0.084503762 -0.178630396 0.773802677 1.142515148 ## MEX NTH PAK PHI POL ## 0.098379646 0.669411379 -0.175831799 -0.030543475 -0.039650740 ## ROK SAF SAU SPN SWD ## 0.494026113 -0.026982824 0.001747629 0.488819195 0.083139518 ## TAW THI TUR UKG USA ## 0.409170751 0.170518602 0.031709477 0.914005344 1.872744222 #summary summary(fit_SRM) #significant non-zero ## ## Regression coefficients: ## pmean psd z-stat p-val ## intercept 0.662 0.184 3.601 0 ## ## Variance parameters: ## pmean psd ## va 0.281 0.078 ## cab 0.236 0.070 ## vb 0.272 0.072 ## rho 0.858 0.013 ## ve 0.239 0.015 6.4.3 Social relations regression model (SRRM) \\[y_{i,j}=\\beta_d^Tx_{d,i,j}+\\beta_r^Tx_{r,i}+\\beta_c^Tx_{c,j}+\\mu+a_i+b_j+\\epsilon_{i,j}\\] Input: Y- a named matrix Xd - a named array \\(n\\times n \\times p_d\\) dyadic covariates Xr - a named matrix \\(n\\times p_r\\) Xc - a named matrix \\(n\\times p_c\\) #nodal covariates colnames(IR90s$nodevars) ## [1] &quot;pop&quot; &quot;gdp&quot; &quot;polity&quot; Xn=IR90s$nodevars[topgdp,] Xn[,1:2]=log(Xn[,1:2]) # use the log #dyadic covariates dimnames(IR90s$dyadvars)[[3]] ## [1] &quot;conflicts&quot; &quot;exports&quot; &quot;distance&quot; &quot;shared_igos&quot; &quot;polity_int&quot; Xd=IR90s$dyadvars[topgdp,topgdp,c(1,3,4,5)] Xd[,,3]=log(Xd[,,3]) # use log fit_srrm=ame(Y,Xd=Xd,Xr=Xn,Xc=Xn,model = &quot;nrm&quot;,plot = FALSE,print = FALSE) summary(fit_srrm) ## ## Regression coefficients: ## pmean psd z-stat p-val ## intercept -6.411 1.258 -5.096 0.000 ## pop.row -0.330 0.132 -2.498 0.012 ## gdp.row 0.567 0.151 3.756 0.000 ## polity.row -0.015 0.020 -0.786 0.432 ## pop.col -0.302 0.127 -2.384 0.017 ## gdp.col 0.537 0.148 3.635 0.000 ## polity.col -0.006 0.019 -0.309 0.757 ## conflicts.dyad 0.076 0.042 1.823 0.068 ## distance.dyad -0.041 0.007 -6.087 0.000 ## shared_igos.dyad 0.886 0.187 4.737 0.000 ## polity_int.dyad -0.001 0.001 -1.672 0.095 ## ## Variance parameters: ## pmean psd ## va 0.265 0.105 ## cab 0.214 0.098 ## vb 0.251 0.099 ## rho 0.785 0.020 ## ve 0.157 0.011 6.4.4 No row variance, column variance or dyadic correlation \\[y_{i,j}=\\beta_d^Tx_{d,i,j}+\\beta_r^Tx_{r,i}+\\beta_c^Tx_{c,j}+\\mu+\\epsilon_{i,j}\\] fit_rm=ame(Y,Xd=Xd,Xr=Xn,Xc=Xn,model = &quot;nrm&quot;,rvar = FALSE,cvar = FALSE,dcor=FALSE,plot=FALSE,print = FALSE) summary(fit_rm) ## ## Regression coefficients: ## pmean psd z-stat p-val ## intercept -4.417 0.170 -25.947 0.000 ## pop.row -0.318 0.022 -14.621 0.000 ## gdp.row 0.664 0.024 27.417 0.000 ## polity.row -0.007 0.005 -1.335 0.182 ## pop.col -0.280 0.023 -12.328 0.000 ## gdp.col 0.622 0.024 25.590 0.000 ## polity.col 0.002 0.005 0.509 0.611 ## conflicts.dyad 0.238 0.057 4.152 0.000 ## distance.dyad -0.053 0.004 -14.407 0.000 ## shared_igos.dyad -0.021 0.028 -0.739 0.460 ## polity_int.dyad 0.000 0.001 0.280 0.780 ## ## Variance parameters: ## pmean psd ## va 0.000 0.000 ## cab 0.000 0.000 ## vb 0.000 0.000 ## rho 0.000 0.000 ## ve 0.229 0.011 6.4.5 additive and multiplicative effects model (ame) \\[y_{i,j}=\\beta_d^Tx_{d,i,j}+\\beta_r^Tx_{r,i}+\\beta_c^Tx_{c,j}+\\mu+a_i+b_j+u_i^Tv_j+\\epsilon_{i,j}\\] Input: Y- a named matrix Xd - a named array \\(n\\times n \\times p_d\\) dyadic covariates Xr - a named matrix \\(n\\times p_r\\) Xc - a named matrix \\(n\\times p_c\\) R - dimension of latent factor \\(U\\) and \\(V\\) are \\(n\\times R\\) matrices fit_ame2=ame(Y,Xd=Xd,Xr=Xn,Xc=Xn,model = &quot;nrm&quot;,R=2,plot=FALSE,print = FALSE) summary(fit_ame2) ## ## Regression coefficients: ## pmean psd z-stat p-val ## intercept -4.096 0.777 -5.270 0.000 ## pop.row -0.281 0.069 -4.081 0.000 ## gdp.row 0.567 0.092 6.187 0.000 ## polity.row -0.001 0.010 -0.064 0.949 ## pop.col -0.236 0.072 -3.290 0.001 ## gdp.col 0.521 0.100 5.208 0.000 ## polity.col 0.008 0.010 0.761 0.447 ## conflicts.dyad 0.016 0.037 0.420 0.674 ## distance.dyad -0.038 0.004 -9.542 0.000 ## shared_igos.dyad 0.095 0.074 1.281 0.200 ## polity_int.dyad -0.001 0.000 -2.273 0.023 ## ## Variance parameters: ## pmean psd ## va 0.074 0.023 ## cab 0.030 0.017 ## vb 0.072 0.022 ## rho 0.620 0.037 ## ve 0.064 0.004 6.4.6 circle plot for estimated latent factor circplot(Y,U=fit_ame2$U,V=fit_ame2$V) #only available for 2 dimension latent factor 6.5 Choice of model in ame: binary, ordinal, discrete or sparse relations 6.5.1 binary outcome Probit model. \\[z_{i,j}=\\beta_d^Tx_{d,i,j}+\\beta_r^Tx_{r,i}+\\beta_c^Tx_{c,j}+\\mu+a_i+b_j+u_i^Tv_j+\\epsilon_{i,j}\\] \\[y_{i,j}=1(z_{i,j}&gt;0)\\] Interpretation on the coefficients: one unit change in \\(x_i\\) leads to a \\(\\beta_i\\) change in the z-score of Y: \\(\\beta_i\\phi(\\beta_0+\\beta_1x_1+...)\\) data(&quot;lazegalaw&quot;) names(lazegalaw) ## [1] &quot;X&quot; &quot;Y&quot; dimnames(lazegalaw$X) #nodal covariates ## [[1]] ## NULL ## ## [[2]] ## [1] &quot;status&quot; &quot;female&quot; &quot;office&quot; &quot;seniority&quot; &quot;age&quot; &quot;practice&quot; ## [7] &quot;school&quot; dimnames(lazegalaw$Y) #relation and dyadic covariates ## [[1]] ## NULL ## ## [[2]] ## NULL ## ## [[3]] ## [1] &quot;advice&quot; &quot;friendship&quot; &quot;cowork&quot; Y=lazegalaw$Y[,,2] Xd=lazegalaw$Y[,,-2] Xn=lazegalaw$X fit_amebin3=ame(Y,Xd=Xd,Xr=Xn,Xc=Xn,model = &quot;bin&quot;,R=2,plot=FALSE,print = FALSE) 6.5.2 ordinal outcome ordinal probit model data(sheep) names(sheep) ## [1] &quot;dom&quot; &quot;age&quot; Y=sheep$dom x=sheep$age-mean(sheep$age) #centralize - beta can be (-,+) Xd=outer(x,x) Xn=cbind(x,x^2) colnames(Xn)=c(&quot;age&quot;,&quot;age2&quot;) fit_ameord=ame(Y = Y,Xdyad = Xd,Xrow = Xn,Xcol = Xn,model = &quot;ord&quot;,plot=FALSE,print = FALSE) summary(fit_ameord) ## ## Regression coefficients: ## pmean psd z-stat p-val ## age.row 0.158 0.051 3.108 0.002 ## age2.row -0.086 0.019 -4.468 0.000 ## age.col -0.242 0.039 -6.138 0.000 ## age2.col -0.008 0.015 -0.568 0.570 ## .dyad 0.043 0.008 5.371 0.000 ## ## Variance parameters: ## pmean psd ## va 0.433 0.153 ## cab 0.039 0.073 ## vb 0.215 0.084 ## rho -0.399 0.092 ## ve 1.000 0.000 6.5.3 censored and fixed rank nomination data Fix rank nomination: named a fixed number of people. – ordinal + censored (...,model=&quot;frn&quot;,odmax=..) odmax: maximum number of links each row may have higher shows stronger relationship – make sure your data follows the right order. data(&quot;sampsonmonks&quot;) dimnames(sampsonmonks) ## [[1]] ## [1] &quot;ROMUL&quot; &quot;BONAVEN&quot; &quot;AMBROSE&quot; &quot;BERTH&quot; &quot;PETER&quot; &quot;LOUIS&quot; &quot;VICTOR&quot; ## [8] &quot;WINF&quot; &quot;JOHN&quot; &quot;GREG&quot; &quot;HUGH&quot; &quot;BONI&quot; &quot;MARK&quot; &quot;ALBERT&quot; ## [15] &quot;AMAND&quot; &quot;BASIL&quot; &quot;ELIAS&quot; &quot;SIMP&quot; ## ## [[2]] ## [1] &quot;ROMUL&quot; &quot;BONAVEN&quot; &quot;AMBROSE&quot; &quot;BERTH&quot; &quot;PETER&quot; &quot;LOUIS&quot; &quot;VICTOR&quot; ## [8] &quot;WINF&quot; &quot;JOHN&quot; &quot;GREG&quot; &quot;HUGH&quot; &quot;BONI&quot; &quot;MARK&quot; &quot;ALBERT&quot; ## [15] &quot;AMAND&quot; &quot;BASIL&quot; &quot;ELIAS&quot; &quot;SIMP&quot; ## ## [[3]] ## [1] &quot;like_m2&quot; &quot;like_m1&quot; &quot;like&quot; &quot;dislike&quot; ## [5] &quot;esteem&quot; &quot;disesteem&quot; &quot;pos_influence&quot; &quot;neg_influence&quot; ## [9] &quot;praise&quot; &quot;blame&quot; Y=sampsonmonks[,,3] #like apply(Y&gt;0,1,sum,na.rm=T) # named at least 4 people ## ROMUL BONAVEN AMBROSE BERTH PETER LOUIS VICTOR WINF JOHN ## 3 3 4 3 3 3 3 3 3 ## GREG HUGH BONI MARK ALBERT AMAND BASIL ELIAS SIMP ## 4 3 3 3 3 3 3 3 3 fit_amefrn=ame(Y,R=2,model = &quot;frn&quot;,odmax = 4,plot=FALSE,print = FALSE) ## WARNING: Random reordering used to break ties in ranks summary(fit_amefrn) ## ## Regression coefficients: ## pmean psd z-stat p-val ## intercept -1.326 0.226 -5.868 0 ## ## Variance parameters: ## pmean psd ## va 0.188 0.100 ## cab 0.009 0.068 ## vb 0.212 0.120 ## rho 0.654 0.166 ## ve 1.000 0.000 Sensored binary (...,model=&quot;cbin&quot;,odmax=..) odmax: maximum number of links each row may have 6.6 symmetric outcome: symmetric=TRUE 6.6.1 symmetric outcome: symmetric=TRUE \\[z_{i,j}=\\beta_d^Tx_{d,i,j}+\\beta_n^Tx_{i}+\\beta_n^Tx_{j}+\\mu+a_i+a_j+u_i^T\\Lambda u_j+\\epsilon_{i,j}\\] \\[y_{i,j}=g(z_{i,j})\\] symmetric=TRUE data(&quot;coldwar&quot;) names(coldwar) ## [1] &quot;cc&quot; &quot;distance&quot; &quot;gdp&quot; &quot;polity&quot; Y=sign(apply(coldwar$cc,c(1,2),mean)) #avg across time - binary relation Xn=cbind(apply(log(coldwar$gdp),1,mean), sign(apply(coldwar$polity,1,mean)) ) Xn[,1]=Xn[,1]-mean(Xn[,1]) #centralize dimnames(Xn)[[2]]=c(&quot;lgdp&quot;,&quot;polity&quot;) Xd=array(dim=c(nrow(Y),nrow(Y),3)) Xd[,,1]=outer(Xn[,1],Xn[,1]) Xd[,,2]=outer(Xn[,2],Xn[,2]) Xd[,,3]=log(coldwar$distance) dimnames(Xd)[[3]]=c(&quot;igdp&quot;,&quot;ipol&quot;,&quot;ldist&quot;) # fit the model fit_amesym1=ame(Y,Xd,Xn,R=1,symmetric = TRUE,model = &quot;ord&quot;,plot=FALSE,print = FALSE) summary(fit_amesym1) ## ## Regression coefficients: ## pmean psd z-stat p-val ## lgdp.node -0.002 0.038 -0.053 0.958 ## polity.node 0.068 0.068 1.003 0.316 ## igdp.dyad -0.026 0.021 -1.276 0.202 ## ipol.dyad 0.127 0.058 2.186 0.029 ## ldist.dyad 0.346 0.052 6.684 0.000 ## ## Variance parameters: ## pmean psd ## va 0.138 0.038 ## ve 1.000 0.000 names(fit_amesym1) ## [1] &quot;BETA&quot; &quot;VC&quot; &quot;APM&quot; &quot;U&quot; &quot;L&quot; &quot;ULUPM&quot; &quot;EZ&quot; &quot;YPM&quot; &quot;GOF&quot; 6.7 ame_rep() for longitudinal outcome 6.7.1 repeated measures data: longitudinal outcome \\[z_{i,j,t}=\\beta_d^Tx_{d,i,j,t}+\\beta_r^Tx_{r,i,t}+\\beta_c^Tx_{c,j,t}+\\mu+a_i+b_j+u_i^Tv_j+\\epsilon_{i,j,t}\\] \\[y_{i,j,t}=g(z_{i,j,t})\\] For \\(\\beta_r^Tx_{r,i,t}\\) can also consider \\(\\beta_r^Tx_{r,i}\\). For example, gender. For \\(\\beta_d^Tx_{d,i,j,t}\\) can consider \\(y_{i,j,t-1}\\) or \\(y_{j,i,t-1}\\) or more. (autoregression) ame_rep(Y,Xdyad,Xrow,Xcol) Add extra dimension for the time \\(T\\). For time-invariant covariates, need to construct array by repeating the matrix across time. Example: Figure 6.1: Example from amen tutorial data(&quot;dutchcollege&quot;) names(dutchcollege) ## [1] &quot;Y&quot; &quot;X&quot; dim(dutchcollege$Y) ## [1] 32 32 7 c(dutchcollege$Y[,,1])%&gt;%unique() # ## [1] NA 0 -1 2 1 Y=1*(dutchcollege$Y&gt;=2)[,,2:7] # transfer to binary relation; n=dim(Y)[1] t=dim(Y)[3] #nodal covariates colnames(dutchcollege$X) ## [1] &quot;male&quot; &quot;smoker&quot; &quot;program&quot; Xnode=dutchcollege$X[,1:2] Xnode=array(Xnode,dim=c(n,ncol(Xnode),t)) #repeat the X across time dimnames(Xnode)[[2]]=c(&quot;male&quot;,&quot;smoker&quot;) # dyadic covariates Xdyad=array(dim=c(n,n,5,t)) Xdyad[,,1,]=1*(dutchcollege$Y&gt;=2)[,,1:6] #lag Y Xdyad[,,2,]=array(apply(Xdyad[,,1,],3,t),dim=c(n,n,t)) #transpose the matrix Xdyad[,,3,]=outer(Xnode[,1,1],Xnode[,1,1]) Xdyad[,,4,]=outer(Xnode[,2,1],Xnode[,2,1]) Xdyad[,,5,]=outer(dutchcollege$X[,3],dutchcollege$X[,3],&quot;==&quot;) #same program dimnames(Xdyad)[[3]]=c(&quot;Ylag&quot;,&quot;tYlag&quot;,&quot;bothmale&quot;,&quot;bothsmoke&quot;,&quot;sameprog&quot;) # fit the model fit_amet=ame_rep(Y,Xdyad,Xnode,Xnode,model = &quot;bin&quot;,plot=FALSE,print = FALSE) ## 5 pct burnin complete ## 10 pct burnin complete ## 15 pct burnin complete ## 20 pct burnin complete ## 25 pct burnin complete ## 30 pct burnin complete ## 35 pct burnin complete ## 40 pct burnin complete ## 45 pct burnin complete ## 50 pct burnin complete ## 55 pct burnin complete ## 60 pct burnin complete ## 65 pct burnin complete ## 70 pct burnin complete ## 75 pct burnin complete ## 80 pct burnin complete ## 85 pct burnin complete ## 90 pct burnin complete ## 95 pct burnin complete ## 100 pct burnin complete summary(fit_amet) ## ## Regression coefficients: ## pmean psd z-stat p-val ## intercept -1.612 0.170 -9.456 0.000 ## male.row -0.169 0.220 -0.771 0.441 ## smoker.row -0.458 0.182 -2.514 0.012 ## male.col -0.038 0.162 -0.237 0.813 ## smoker.col -0.237 0.145 -1.628 0.104 ## Ylag.dyad 1.201 0.063 19.150 0.000 ## tYlag.dyad 0.860 0.062 13.799 0.000 ## bothmale.dyad 0.740 0.145 5.090 0.000 ## bothsmoke.dyad 0.661 0.122 5.424 0.000 ## sameprog.dyad 0.432 0.063 6.881 0.000 ## ## Variance parameters: ## pmean psd ## va 0.223 0.073 ## cab 0.033 0.034 ## vb 0.119 0.038 ## rho 0.641 0.038 ## ve 1.000 0.000 "]
]
